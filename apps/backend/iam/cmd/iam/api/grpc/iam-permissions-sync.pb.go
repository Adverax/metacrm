// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.7
// source: iam-permissions-sync.proto

package contracts

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChangeType int32

const (
	ChangeType_CHANGE_TYPE_UNSPECIFIED        ChangeType = 0
	ChangeType_CHANGE_TYPE_GROUP_JOINED       ChangeType = 1 // User joined a group
	ChangeType_CHANGE_TYPE_GROUP_LEFT         ChangeType = 2 // User left a group
	ChangeType_CHANGE_TYPE_PERMISSION_GRANTED ChangeType = 3 // Permission was granted
	ChangeType_CHANGE_TYPE_PERMISSION_REVOKED ChangeType = 4 // Permission was revoked
	ChangeType_CHANGE_TYPE_ROLE_ASSIGNED      ChangeType = 5 // Role was assigned
	ChangeType_CHANGE_TYPE_ROLE_REMOVED       ChangeType = 6 // Role was removed
)

// Enum value maps for ChangeType.
var (
	ChangeType_name = map[int32]string{
		0: "CHANGE_TYPE_UNSPECIFIED",
		1: "CHANGE_TYPE_GROUP_JOINED",
		2: "CHANGE_TYPE_GROUP_LEFT",
		3: "CHANGE_TYPE_PERMISSION_GRANTED",
		4: "CHANGE_TYPE_PERMISSION_REVOKED",
		5: "CHANGE_TYPE_ROLE_ASSIGNED",
		6: "CHANGE_TYPE_ROLE_REMOVED",
	}
	ChangeType_value = map[string]int32{
		"CHANGE_TYPE_UNSPECIFIED":        0,
		"CHANGE_TYPE_GROUP_JOINED":       1,
		"CHANGE_TYPE_GROUP_LEFT":         2,
		"CHANGE_TYPE_PERMISSION_GRANTED": 3,
		"CHANGE_TYPE_PERMISSION_REVOKED": 4,
		"CHANGE_TYPE_ROLE_ASSIGNED":      5,
		"CHANGE_TYPE_ROLE_REMOVED":       6,
	}
)

func (x ChangeType) Enum() *ChangeType {
	p := new(ChangeType)
	*p = x
	return p
}

func (x ChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_iam_permissions_sync_proto_enumTypes[0].Descriptor()
}

func (ChangeType) Type() protoreflect.EnumType {
	return &file_iam_permissions_sync_proto_enumTypes[0]
}

func (x ChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangeType.Descriptor instead.
func (ChangeType) EnumDescriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{0}
}

type GroupType int32

const (
	GroupType_GROUP_TYPE_UNSPECIFIED     GroupType = 0
	GroupType_GROUP_TYPE_ROLE_BASED      GroupType = 1 // Role-based group
	GroupType_GROUP_TYPE_TERRITORY_BASED GroupType = 2 // Territory-based group
	GroupType_GROUP_TYPE_MANUAL          GroupType = 3 // Manually managed group
	GroupType_GROUP_TYPE_DYNAMIC         GroupType = 4 // Dynamically managed group
)

// Enum value maps for GroupType.
var (
	GroupType_name = map[int32]string{
		0: "GROUP_TYPE_UNSPECIFIED",
		1: "GROUP_TYPE_ROLE_BASED",
		2: "GROUP_TYPE_TERRITORY_BASED",
		3: "GROUP_TYPE_MANUAL",
		4: "GROUP_TYPE_DYNAMIC",
	}
	GroupType_value = map[string]int32{
		"GROUP_TYPE_UNSPECIFIED":     0,
		"GROUP_TYPE_ROLE_BASED":      1,
		"GROUP_TYPE_TERRITORY_BASED": 2,
		"GROUP_TYPE_MANUAL":          3,
		"GROUP_TYPE_DYNAMIC":         4,
	}
)

func (x GroupType) Enum() *GroupType {
	p := new(GroupType)
	*p = x
	return p
}

func (x GroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_iam_permissions_sync_proto_enumTypes[1].Descriptor()
}

func (GroupType) Type() protoreflect.EnumType {
	return &file_iam_permissions_sync_proto_enumTypes[1]
}

func (x GroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupType.Descriptor instead.
func (GroupType) EnumDescriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{1}
}

type MembershipType int32

const (
	MembershipType_MEMBERSHIP_TYPE_UNSPECIFIED MembershipType = 0
	MembershipType_MEMBERSHIP_TYPE_DIRECT      MembershipType = 1 // Direct membership
	MembershipType_MEMBERSHIP_TYPE_INHERITED   MembershipType = 2 // Inherited through role
	MembershipType_MEMBERSHIP_TYPE_AUTOMATIC   MembershipType = 3 // Automatic through group type
)

// Enum value maps for MembershipType.
var (
	MembershipType_name = map[int32]string{
		0: "MEMBERSHIP_TYPE_UNSPECIFIED",
		1: "MEMBERSHIP_TYPE_DIRECT",
		2: "MEMBERSHIP_TYPE_INHERITED",
		3: "MEMBERSHIP_TYPE_AUTOMATIC",
	}
	MembershipType_value = map[string]int32{
		"MEMBERSHIP_TYPE_UNSPECIFIED": 0,
		"MEMBERSHIP_TYPE_DIRECT":      1,
		"MEMBERSHIP_TYPE_INHERITED":   2,
		"MEMBERSHIP_TYPE_AUTOMATIC":   3,
	}
)

func (x MembershipType) Enum() *MembershipType {
	p := new(MembershipType)
	*p = x
	return p
}

func (x MembershipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MembershipType) Descriptor() protoreflect.EnumDescriptor {
	return file_iam_permissions_sync_proto_enumTypes[2].Descriptor()
}

func (MembershipType) Type() protoreflect.EnumType {
	return &file_iam_permissions_sync_proto_enumTypes[2]
}

func (x MembershipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MembershipType.Descriptor instead.
func (MembershipType) EnumDescriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{2}
}

type SourceType int32

const (
	SourceType_SOURCE_TYPE_UNSPECIFIED SourceType = 0
	SourceType_SOURCE_TYPE_GROUP       SourceType = 1 // Permission from group membership
	SourceType_SOURCE_TYPE_ROLE        SourceType = 2 // Permission from role
	SourceType_SOURCE_TYPE_DIRECT      SourceType = 3 // Direct permission assignment
	SourceType_SOURCE_TYPE_TERRITORY   SourceType = 4 // Permission from territory
)

// Enum value maps for SourceType.
var (
	SourceType_name = map[int32]string{
		0: "SOURCE_TYPE_UNSPECIFIED",
		1: "SOURCE_TYPE_GROUP",
		2: "SOURCE_TYPE_ROLE",
		3: "SOURCE_TYPE_DIRECT",
		4: "SOURCE_TYPE_TERRITORY",
	}
	SourceType_value = map[string]int32{
		"SOURCE_TYPE_UNSPECIFIED": 0,
		"SOURCE_TYPE_GROUP":       1,
		"SOURCE_TYPE_ROLE":        2,
		"SOURCE_TYPE_DIRECT":      3,
		"SOURCE_TYPE_TERRITORY":   4,
	}
)

func (x SourceType) Enum() *SourceType {
	p := new(SourceType)
	*p = x
	return p
}

func (x SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_iam_permissions_sync_proto_enumTypes[3].Descriptor()
}

func (SourceType) Type() protoreflect.EnumType {
	return &file_iam_permissions_sync_proto_enumTypes[3]
}

func (x SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceType.Descriptor instead.
func (SourceType) EnumDescriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{3}
}

type GetUserPermissionsSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId                 string   `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                                                    // Tenant identifier (UUID)
	UserId                   string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                          // User record ID (e.g., "usr_a1b2c3d4e5f67890")
	ObjectApiNames           []string `protobuf:"bytes,3,rep,name=object_api_names,json=objectApiNames,proto3" json:"object_api_names,omitempty"`                                // Objects to include (empty = all objects)
	IncludeGroupMemberships  bool     `protobuf:"varint,4,opt,name=include_group_memberships,json=includeGroupMemberships,proto3" json:"include_group_memberships,omitempty"`    // Include group membership info
	IncludePermissionSources bool     `protobuf:"varint,5,opt,name=include_permission_sources,json=includePermissionSources,proto3" json:"include_permission_sources,omitempty"` // Include detailed permission sources
	TtlSeconds               *int32   `protobuf:"varint,6,opt,name=ttl_seconds,json=ttlSeconds,proto3,oneof" json:"ttl_seconds,omitempty"`                                       // Cache TTL in seconds (default: 3600)
}

func (x *GetUserPermissionsSnapshotRequest) Reset() {
	*x = GetUserPermissionsSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPermissionsSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPermissionsSnapshotRequest) ProtoMessage() {}

func (x *GetUserPermissionsSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPermissionsSnapshotRequest.ProtoReflect.Descriptor instead.
func (*GetUserPermissionsSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{0}
}

func (x *GetUserPermissionsSnapshotRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *GetUserPermissionsSnapshotRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserPermissionsSnapshotRequest) GetObjectApiNames() []string {
	if x != nil {
		return x.ObjectApiNames
	}
	return nil
}

func (x *GetUserPermissionsSnapshotRequest) GetIncludeGroupMemberships() bool {
	if x != nil {
		return x.IncludeGroupMemberships
	}
	return false
}

func (x *GetUserPermissionsSnapshotRequest) GetIncludePermissionSources() bool {
	if x != nil {
		return x.IncludePermissionSources
	}
	return false
}

func (x *GetUserPermissionsSnapshotRequest) GetTtlSeconds() int32 {
	if x != nil && x.TtlSeconds != nil {
		return *x.TtlSeconds
	}
	return 0
}

type GetUserPermissionsChangesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId                string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                                                 // Tenant identifier (UUID)
	UserId                  string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                       // User record ID
	Since                   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=since,proto3" json:"since,omitempty"`                                                                       // Get changes since this timestamp
	ObjectApiNames          []string               `protobuf:"bytes,4,rep,name=object_api_names,json=objectApiNames,proto3" json:"object_api_names,omitempty"`                             // Objects to check (empty = all objects)
	IncludeGroupMemberships bool                   `protobuf:"varint,5,opt,name=include_group_memberships,json=includeGroupMemberships,proto3" json:"include_group_memberships,omitempty"` // Include group membership changes
}

func (x *GetUserPermissionsChangesRequest) Reset() {
	*x = GetUserPermissionsChangesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPermissionsChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPermissionsChangesRequest) ProtoMessage() {}

func (x *GetUserPermissionsChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPermissionsChangesRequest.ProtoReflect.Descriptor instead.
func (*GetUserPermissionsChangesRequest) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{1}
}

func (x *GetUserPermissionsChangesRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *GetUserPermissionsChangesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserPermissionsChangesRequest) GetSince() *timestamppb.Timestamp {
	if x != nil {
		return x.Since
	}
	return nil
}

func (x *GetUserPermissionsChangesRequest) GetObjectApiNames() []string {
	if x != nil {
		return x.ObjectApiNames
	}
	return nil
}

func (x *GetUserPermissionsChangesRequest) GetIncludeGroupMemberships() bool {
	if x != nil {
		return x.IncludeGroupMemberships
	}
	return false
}

type GetBulkUserPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId                 string   `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                                                    // Tenant identifier (UUID)
	UserIds                  []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`                                                       // List of user IDs (max 100)
	ObjectApiNames           []string `protobuf:"bytes,3,rep,name=object_api_names,json=objectApiNames,proto3" json:"object_api_names,omitempty"`                                // Objects to include (empty = all objects)
	IncludeGroupMemberships  bool     `protobuf:"varint,4,opt,name=include_group_memberships,json=includeGroupMemberships,proto3" json:"include_group_memberships,omitempty"`    // Include group membership info
	IncludePermissionSources bool     `protobuf:"varint,5,opt,name=include_permission_sources,json=includePermissionSources,proto3" json:"include_permission_sources,omitempty"` // Include detailed permission sources
	TtlSeconds               *int32   `protobuf:"varint,6,opt,name=ttl_seconds,json=ttlSeconds,proto3,oneof" json:"ttl_seconds,omitempty"`                                       // Cache TTL in seconds (default: 3600)
}

func (x *GetBulkUserPermissionsRequest) Reset() {
	*x = GetBulkUserPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBulkUserPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBulkUserPermissionsRequest) ProtoMessage() {}

func (x *GetBulkUserPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBulkUserPermissionsRequest.ProtoReflect.Descriptor instead.
func (*GetBulkUserPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{2}
}

func (x *GetBulkUserPermissionsRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *GetBulkUserPermissionsRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *GetBulkUserPermissionsRequest) GetObjectApiNames() []string {
	if x != nil {
		return x.ObjectApiNames
	}
	return nil
}

func (x *GetBulkUserPermissionsRequest) GetIncludeGroupMemberships() bool {
	if x != nil {
		return x.IncludeGroupMemberships
	}
	return false
}

func (x *GetBulkUserPermissionsRequest) GetIncludePermissionSources() bool {
	if x != nil {
		return x.IncludePermissionSources
	}
	return false
}

func (x *GetBulkUserPermissionsRequest) GetTtlSeconds() int32 {
	if x != nil && x.TtlSeconds != nil {
		return *x.TtlSeconds
	}
	return 0
}

type GetGroupMembershipPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId                 string   `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                                                    // Tenant identifier (UUID)
	GroupRecordId            string   `protobuf:"bytes,2,opt,name=group_record_id,json=groupRecordId,proto3" json:"group_record_id,omitempty"`                                   // Group record ID (e.g., "grp_a1b2c3d4e5f67890")
	ObjectApiNames           []string `protobuf:"bytes,3,rep,name=object_api_names,json=objectApiNames,proto3" json:"object_api_names,omitempty"`                                // Objects to include (empty = all objects)
	IncludeAllMembers        bool     `protobuf:"varint,4,opt,name=include_all_members,json=includeAllMembers,proto3" json:"include_all_members,omitempty"`                      // Include permissions for all group members
	IncludePermissionSources bool     `protobuf:"varint,5,opt,name=include_permission_sources,json=includePermissionSources,proto3" json:"include_permission_sources,omitempty"` // Include detailed permission sources
	TtlSeconds               *int32   `protobuf:"varint,6,opt,name=ttl_seconds,json=ttlSeconds,proto3,oneof" json:"ttl_seconds,omitempty"`                                       // Cache TTL in seconds (default: 3600)
}

func (x *GetGroupMembershipPermissionsRequest) Reset() {
	*x = GetGroupMembershipPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupMembershipPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupMembershipPermissionsRequest) ProtoMessage() {}

func (x *GetGroupMembershipPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupMembershipPermissionsRequest.ProtoReflect.Descriptor instead.
func (*GetGroupMembershipPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{3}
}

func (x *GetGroupMembershipPermissionsRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *GetGroupMembershipPermissionsRequest) GetGroupRecordId() string {
	if x != nil {
		return x.GroupRecordId
	}
	return ""
}

func (x *GetGroupMembershipPermissionsRequest) GetObjectApiNames() []string {
	if x != nil {
		return x.ObjectApiNames
	}
	return nil
}

func (x *GetGroupMembershipPermissionsRequest) GetIncludeAllMembers() bool {
	if x != nil {
		return x.IncludeAllMembers
	}
	return false
}

func (x *GetGroupMembershipPermissionsRequest) GetIncludePermissionSources() bool {
	if x != nil {
		return x.IncludePermissionSources
	}
	return false
}

func (x *GetGroupMembershipPermissionsRequest) GetTtlSeconds() int32 {
	if x != nil && x.TtlSeconds != nil {
		return *x.TtlSeconds
	}
	return 0
}

type CheckUserPermissionsChangedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId       string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                     // Tenant identifier (UUID)
	UserId         string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                           // User record ID
	Since          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=since,proto3" json:"since,omitempty"`                                           // Check changes since this timestamp
	ObjectApiNames []string               `protobuf:"bytes,4,rep,name=object_api_names,json=objectApiNames,proto3" json:"object_api_names,omitempty"` // Objects to check (empty = all objects)
}

func (x *CheckUserPermissionsChangedRequest) Reset() {
	*x = CheckUserPermissionsChangedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserPermissionsChangedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserPermissionsChangedRequest) ProtoMessage() {}

func (x *CheckUserPermissionsChangedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserPermissionsChangedRequest.ProtoReflect.Descriptor instead.
func (*CheckUserPermissionsChangedRequest) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{4}
}

func (x *CheckUserPermissionsChangedRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CheckUserPermissionsChangedRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CheckUserPermissionsChangedRequest) GetSince() *timestamppb.Timestamp {
	if x != nil {
		return x.Since
	}
	return nil
}

func (x *CheckUserPermissionsChangedRequest) GetObjectApiNames() []string {
	if x != nil {
		return x.ObjectApiNames
	}
	return nil
}

type SyncGroupPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId       string   `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                     // Tenant identifier (UUID)
	GroupRecordId  string   `protobuf:"bytes,2,opt,name=group_record_id,json=groupRecordId,proto3" json:"group_record_id,omitempty"`    // Group record ID
	UserIds        []string `protobuf:"bytes,3,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`                        // Specific users to sync (empty = all group members)
	ObjectApiNames []string `protobuf:"bytes,4,rep,name=object_api_names,json=objectApiNames,proto3" json:"object_api_names,omitempty"` // Objects to sync (empty = all objects)
	ForceRefresh   bool     `protobuf:"varint,5,opt,name=force_refresh,json=forceRefresh,proto3" json:"force_refresh,omitempty"`        // Force refresh even if cache is valid
}

func (x *SyncGroupPermissionsRequest) Reset() {
	*x = SyncGroupPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncGroupPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncGroupPermissionsRequest) ProtoMessage() {}

func (x *SyncGroupPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncGroupPermissionsRequest.ProtoReflect.Descriptor instead.
func (*SyncGroupPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{5}
}

func (x *SyncGroupPermissionsRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *SyncGroupPermissionsRequest) GetGroupRecordId() string {
	if x != nil {
		return x.GroupRecordId
	}
	return ""
}

func (x *SyncGroupPermissionsRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *SyncGroupPermissionsRequest) GetObjectApiNames() []string {
	if x != nil {
		return x.ObjectApiNames
	}
	return nil
}

func (x *SyncGroupPermissionsRequest) GetForceRefresh() bool {
	if x != nil {
		return x.ForceRefresh
	}
	return false
}

type GetPermissionSyncStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId *string                `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3,oneof" json:"tenant_id,omitempty"` // Tenant identifier (UUID) - optional for system-wide stats
	Since    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=since,proto3" json:"since,omitempty"`                             // Get stats since this timestamp (default: 1 day ago)
}

func (x *GetPermissionSyncStatsRequest) Reset() {
	*x = GetPermissionSyncStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPermissionSyncStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPermissionSyncStatsRequest) ProtoMessage() {}

func (x *GetPermissionSyncStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPermissionSyncStatsRequest.ProtoReflect.Descriptor instead.
func (*GetPermissionSyncStatsRequest) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{6}
}

func (x *GetPermissionSyncStatsRequest) GetTenantId() string {
	if x != nil && x.TenantId != nil {
		return *x.TenantId
	}
	return ""
}

func (x *GetPermissionSyncStatsRequest) GetSince() *timestamppb.Timestamp {
	if x != nil {
		return x.Since
	}
	return nil
}

type GetUserPermissionsSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshot    *UserPermissionsSnapshot `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	CacheInfo   *CacheInfo               `protobuf:"bytes,2,opt,name=cache_info,json=cacheInfo,proto3" json:"cache_info,omitempty"`
	GeneratedAt *timestamppb.Timestamp   `protobuf:"bytes,3,opt,name=generated_at,json=generatedAt,proto3" json:"generated_at,omitempty"`
}

func (x *GetUserPermissionsSnapshotResponse) Reset() {
	*x = GetUserPermissionsSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPermissionsSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPermissionsSnapshotResponse) ProtoMessage() {}

func (x *GetUserPermissionsSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPermissionsSnapshotResponse.ProtoReflect.Descriptor instead.
func (*GetUserPermissionsSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{7}
}

func (x *GetUserPermissionsSnapshotResponse) GetSnapshot() *UserPermissionsSnapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *GetUserPermissionsSnapshotResponse) GetCacheInfo() *CacheInfo {
	if x != nil {
		return x.CacheInfo
	}
	return nil
}

func (x *GetUserPermissionsSnapshotResponse) GetGeneratedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.GeneratedAt
	}
	return nil
}

type GetUserPermissionsChangesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes      []*PermissionChange    `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
	TotalChanges int32                  `protobuf:"varint,2,opt,name=total_changes,json=totalChanges,proto3" json:"total_changes,omitempty"`
	LastChange   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	CacheInfo    *CacheInfo             `protobuf:"bytes,4,opt,name=cache_info,json=cacheInfo,proto3" json:"cache_info,omitempty"`
}

func (x *GetUserPermissionsChangesResponse) Reset() {
	*x = GetUserPermissionsChangesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPermissionsChangesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPermissionsChangesResponse) ProtoMessage() {}

func (x *GetUserPermissionsChangesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPermissionsChangesResponse.ProtoReflect.Descriptor instead.
func (*GetUserPermissionsChangesResponse) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{8}
}

func (x *GetUserPermissionsChangesResponse) GetChanges() []*PermissionChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *GetUserPermissionsChangesResponse) GetTotalChanges() int32 {
	if x != nil {
		return x.TotalChanges
	}
	return 0
}

func (x *GetUserPermissionsChangesResponse) GetLastChange() *timestamppb.Timestamp {
	if x != nil {
		return x.LastChange
	}
	return nil
}

func (x *GetUserPermissionsChangesResponse) GetCacheInfo() *CacheInfo {
	if x != nil {
		return x.CacheInfo
	}
	return nil
}

type GetBulkUserPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshots     []*UserPermissionsSnapshot `protobuf:"bytes,1,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
	TotalUsers    int32                      `protobuf:"varint,2,opt,name=total_users,json=totalUsers,proto3" json:"total_users,omitempty"`
	FailedUsers   int32                      `protobuf:"varint,3,opt,name=failed_users,json=failedUsers,proto3" json:"failed_users,omitempty"`
	FailedUserIds []string                   `protobuf:"bytes,4,rep,name=failed_user_ids,json=failedUserIds,proto3" json:"failed_user_ids,omitempty"`
	CacheInfo     *CacheInfo                 `protobuf:"bytes,5,opt,name=cache_info,json=cacheInfo,proto3" json:"cache_info,omitempty"`
}

func (x *GetBulkUserPermissionsResponse) Reset() {
	*x = GetBulkUserPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBulkUserPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBulkUserPermissionsResponse) ProtoMessage() {}

func (x *GetBulkUserPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBulkUserPermissionsResponse.ProtoReflect.Descriptor instead.
func (*GetBulkUserPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{9}
}

func (x *GetBulkUserPermissionsResponse) GetSnapshots() []*UserPermissionsSnapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

func (x *GetBulkUserPermissionsResponse) GetTotalUsers() int32 {
	if x != nil {
		return x.TotalUsers
	}
	return 0
}

func (x *GetBulkUserPermissionsResponse) GetFailedUsers() int32 {
	if x != nil {
		return x.FailedUsers
	}
	return 0
}

func (x *GetBulkUserPermissionsResponse) GetFailedUserIds() []string {
	if x != nil {
		return x.FailedUserIds
	}
	return nil
}

func (x *GetBulkUserPermissionsResponse) GetCacheInfo() *CacheInfo {
	if x != nil {
		return x.CacheInfo
	}
	return nil
}

type GetGroupMembershipPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberPermissions []*UserPermissionsSnapshot `protobuf:"bytes,1,rep,name=member_permissions,json=memberPermissions,proto3" json:"member_permissions,omitempty"`
	GroupInfo         *GroupInfo                 `protobuf:"bytes,2,opt,name=group_info,json=groupInfo,proto3" json:"group_info,omitempty"`
	TotalMembers      int32                      `protobuf:"varint,3,opt,name=total_members,json=totalMembers,proto3" json:"total_members,omitempty"`
	CacheInfo         *CacheInfo                 `protobuf:"bytes,4,opt,name=cache_info,json=cacheInfo,proto3" json:"cache_info,omitempty"`
}

func (x *GetGroupMembershipPermissionsResponse) Reset() {
	*x = GetGroupMembershipPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupMembershipPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupMembershipPermissionsResponse) ProtoMessage() {}

func (x *GetGroupMembershipPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupMembershipPermissionsResponse.ProtoReflect.Descriptor instead.
func (*GetGroupMembershipPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{10}
}

func (x *GetGroupMembershipPermissionsResponse) GetMemberPermissions() []*UserPermissionsSnapshot {
	if x != nil {
		return x.MemberPermissions
	}
	return nil
}

func (x *GetGroupMembershipPermissionsResponse) GetGroupInfo() *GroupInfo {
	if x != nil {
		return x.GroupInfo
	}
	return nil
}

func (x *GetGroupMembershipPermissionsResponse) GetTotalMembers() int32 {
	if x != nil {
		return x.TotalMembers
	}
	return 0
}

func (x *GetGroupMembershipPermissionsResponse) GetCacheInfo() *CacheInfo {
	if x != nil {
		return x.CacheInfo
	}
	return nil
}

type CheckUserPermissionsChangedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasChanges     bool                   `protobuf:"varint,1,opt,name=has_changes,json=hasChanges,proto3" json:"has_changes,omitempty"`
	LastChange     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	ChangedObjects []string               `protobuf:"bytes,3,rep,name=changed_objects,json=changedObjects,proto3" json:"changed_objects,omitempty"`
	TotalChanges   int32                  `protobuf:"varint,4,opt,name=total_changes,json=totalChanges,proto3" json:"total_changes,omitempty"`
}

func (x *CheckUserPermissionsChangedResponse) Reset() {
	*x = CheckUserPermissionsChangedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserPermissionsChangedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserPermissionsChangedResponse) ProtoMessage() {}

func (x *CheckUserPermissionsChangedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserPermissionsChangedResponse.ProtoReflect.Descriptor instead.
func (*CheckUserPermissionsChangedResponse) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{11}
}

func (x *CheckUserPermissionsChangedResponse) GetHasChanges() bool {
	if x != nil {
		return x.HasChanges
	}
	return false
}

func (x *CheckUserPermissionsChangedResponse) GetLastChange() *timestamppb.Timestamp {
	if x != nil {
		return x.LastChange
	}
	return nil
}

func (x *CheckUserPermissionsChangedResponse) GetChangedObjects() []string {
	if x != nil {
		return x.ChangedObjects
	}
	return nil
}

func (x *CheckUserPermissionsChangedResponse) GetTotalChanges() int32 {
	if x != nil {
		return x.TotalChanges
	}
	return 0
}

type SyncGroupPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsersSynced        int32                  `protobuf:"varint,1,opt,name=users_synced,json=usersSynced,proto3" json:"users_synced,omitempty"`
	PermissionsUpdated int32                  `protobuf:"varint,2,opt,name=permissions_updated,json=permissionsUpdated,proto3" json:"permissions_updated,omitempty"`
	SyncedAt           *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=synced_at,json=syncedAt,proto3" json:"synced_at,omitempty"`
	FailedUserIds      []string               `protobuf:"bytes,4,rep,name=failed_user_ids,json=failedUserIds,proto3" json:"failed_user_ids,omitempty"`
}

func (x *SyncGroupPermissionsResponse) Reset() {
	*x = SyncGroupPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncGroupPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncGroupPermissionsResponse) ProtoMessage() {}

func (x *SyncGroupPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncGroupPermissionsResponse.ProtoReflect.Descriptor instead.
func (*SyncGroupPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{12}
}

func (x *SyncGroupPermissionsResponse) GetUsersSynced() int32 {
	if x != nil {
		return x.UsersSynced
	}
	return 0
}

func (x *SyncGroupPermissionsResponse) GetPermissionsUpdated() int32 {
	if x != nil {
		return x.PermissionsUpdated
	}
	return 0
}

func (x *SyncGroupPermissionsResponse) GetSyncedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SyncedAt
	}
	return nil
}

func (x *SyncGroupPermissionsResponse) GetFailedUserIds() []string {
	if x != nil {
		return x.FailedUserIds
	}
	return nil
}

type GetPermissionSyncStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *PermissionSyncStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *GetPermissionSyncStatsResponse) Reset() {
	*x = GetPermissionSyncStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPermissionSyncStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPermissionSyncStatsResponse) ProtoMessage() {}

func (x *GetPermissionSyncStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPermissionSyncStatsResponse.ProtoReflect.Descriptor instead.
func (*GetPermissionSyncStatsResponse) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{13}
}

func (x *GetPermissionSyncStatsResponse) GetStats() *PermissionSyncStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type UserPermissionsSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                  // User record ID
	TenantId          string                 `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                            // Tenant identifier
	Permissions       []*ObjectPermission    `protobuf:"bytes,3,rep,name=permissions,proto3" json:"permissions,omitempty"`                                      // Object permissions
	FieldPermissions  []*FieldPermission     `protobuf:"bytes,4,rep,name=field_permissions,json=fieldPermissions,proto3" json:"field_permissions,omitempty"`    // Field permissions
	GroupMemberships  []*GroupMembership     `protobuf:"bytes,5,rep,name=group_memberships,json=groupMemberships,proto3" json:"group_memberships,omitempty"`    // Group memberships
	PermissionSources []*PermissionSource    `protobuf:"bytes,6,rep,name=permission_sources,json=permissionSources,proto3" json:"permission_sources,omitempty"` // Detailed permission sources
	SnapshotAt        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=snapshot_at,json=snapshotAt,proto3" json:"snapshot_at,omitempty"`                      // When snapshot was taken
	SnapshotVersion   string                 `protobuf:"bytes,8,opt,name=snapshot_version,json=snapshotVersion,proto3" json:"snapshot_version,omitempty"`       // Version of the snapshot
}

func (x *UserPermissionsSnapshot) Reset() {
	*x = UserPermissionsSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPermissionsSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPermissionsSnapshot) ProtoMessage() {}

func (x *UserPermissionsSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPermissionsSnapshot.ProtoReflect.Descriptor instead.
func (*UserPermissionsSnapshot) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{14}
}

func (x *UserPermissionsSnapshot) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserPermissionsSnapshot) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *UserPermissionsSnapshot) GetPermissions() []*ObjectPermission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *UserPermissionsSnapshot) GetFieldPermissions() []*FieldPermission {
	if x != nil {
		return x.FieldPermissions
	}
	return nil
}

func (x *UserPermissionsSnapshot) GetGroupMemberships() []*GroupMembership {
	if x != nil {
		return x.GroupMemberships
	}
	return nil
}

func (x *UserPermissionsSnapshot) GetPermissionSources() []*PermissionSource {
	if x != nil {
		return x.PermissionSources
	}
	return nil
}

func (x *UserPermissionsSnapshot) GetSnapshotAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SnapshotAt
	}
	return nil
}

func (x *UserPermissionsSnapshot) GetSnapshotVersion() string {
	if x != nil {
		return x.SnapshotVersion
	}
	return ""
}

type PermissionChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeId       string                 `protobuf:"bytes,1,opt,name=change_id,json=changeId,proto3" json:"change_id,omitempty"`                                                // Unique change identifier
	UserId         string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                      // User affected by change
	ChangeType     ChangeType             `protobuf:"varint,3,opt,name=change_type,json=changeType,proto3,enum=iam.permissions.sync.v1.ChangeType" json:"change_type,omitempty"` // Type of change
	ObjectApiName  string                 `protobuf:"bytes,4,opt,name=object_api_name,json=objectApiName,proto3" json:"object_api_name,omitempty"`                               // Object affected (if applicable)
	GroupId        string                 `protobuf:"bytes,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                                                   // Group affected (if applicable)
	OldPermissions *PermissionBitmask     `protobuf:"bytes,6,opt,name=old_permissions,json=oldPermissions,proto3" json:"old_permissions,omitempty"`                              // Previous permissions
	NewPermissions *PermissionBitmask     `protobuf:"bytes,7,opt,name=new_permissions,json=newPermissions,proto3" json:"new_permissions,omitempty"`                              // New permissions
	ChangedAt      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=changed_at,json=changedAt,proto3" json:"changed_at,omitempty"`                                             // When change occurred
	ChangeReason   string                 `protobuf:"bytes,9,opt,name=change_reason,json=changeReason,proto3" json:"change_reason,omitempty"`                                    // Reason for change
	EventId        string                 `protobuf:"bytes,10,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`                                                  // Related event ID
}

func (x *PermissionChange) Reset() {
	*x = PermissionChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionChange) ProtoMessage() {}

func (x *PermissionChange) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionChange.ProtoReflect.Descriptor instead.
func (*PermissionChange) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{15}
}

func (x *PermissionChange) GetChangeId() string {
	if x != nil {
		return x.ChangeId
	}
	return ""
}

func (x *PermissionChange) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PermissionChange) GetChangeType() ChangeType {
	if x != nil {
		return x.ChangeType
	}
	return ChangeType_CHANGE_TYPE_UNSPECIFIED
}

func (x *PermissionChange) GetObjectApiName() string {
	if x != nil {
		return x.ObjectApiName
	}
	return ""
}

func (x *PermissionChange) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *PermissionChange) GetOldPermissions() *PermissionBitmask {
	if x != nil {
		return x.OldPermissions
	}
	return nil
}

func (x *PermissionChange) GetNewPermissions() *PermissionBitmask {
	if x != nil {
		return x.NewPermissions
	}
	return nil
}

func (x *PermissionChange) GetChangedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangedAt
	}
	return nil
}

func (x *PermissionChange) GetChangeReason() string {
	if x != nil {
		return x.ChangeReason
	}
	return ""
}

func (x *PermissionChange) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type GroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupRecordId string                 `protobuf:"bytes,1,opt,name=group_record_id,json=groupRecordId,proto3" json:"group_record_id,omitempty"`                           // Group record ID
	GroupLabel    string                 `protobuf:"bytes,2,opt,name=group_label,json=groupLabel,proto3" json:"group_label,omitempty"`                                      // Group display name
	GroupApiName  string                 `protobuf:"bytes,3,opt,name=group_api_name,json=groupApiName,proto3" json:"group_api_name,omitempty"`                              // Group API name
	GroupType     GroupType              `protobuf:"varint,4,opt,name=group_type,json=groupType,proto3,enum=iam.permissions.sync.v1.GroupType" json:"group_type,omitempty"` // Type of group
	MemberCount   int32                  `protobuf:"varint,5,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`                                  // Number of members
	LastModified  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`                                // Last modification time
}

func (x *GroupInfo) Reset() {
	*x = GroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfo) ProtoMessage() {}

func (x *GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfo.ProtoReflect.Descriptor instead.
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{16}
}

func (x *GroupInfo) GetGroupRecordId() string {
	if x != nil {
		return x.GroupRecordId
	}
	return ""
}

func (x *GroupInfo) GetGroupLabel() string {
	if x != nil {
		return x.GroupLabel
	}
	return ""
}

func (x *GroupInfo) GetGroupApiName() string {
	if x != nil {
		return x.GroupApiName
	}
	return ""
}

func (x *GroupInfo) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_GROUP_TYPE_UNSPECIFIED
}

func (x *GroupInfo) GetMemberCount() int32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *GroupInfo) GetLastModified() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModified
	}
	return nil
}

type ObjectPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectApiName string                 `protobuf:"bytes,1,opt,name=object_api_name,json=objectApiName,proto3" json:"object_api_name,omitempty"` // Object API name (e.g., "user", "order")
	ObjectId      int64                  `protobuf:"varint,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`                 // Internal object ID
	Permissions   *PermissionBitmask     `protobuf:"bytes,3,opt,name=permissions,proto3" json:"permissions,omitempty"`                            // Combined permission bitmask
	ComputedAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=computed_at,json=computedAt,proto3" json:"computed_at,omitempty"`            // When permissions were computed
}

func (x *ObjectPermission) Reset() {
	*x = ObjectPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectPermission) ProtoMessage() {}

func (x *ObjectPermission) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectPermission.ProtoReflect.Descriptor instead.
func (*ObjectPermission) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{17}
}

func (x *ObjectPermission) GetObjectApiName() string {
	if x != nil {
		return x.ObjectApiName
	}
	return ""
}

func (x *ObjectPermission) GetObjectId() int64 {
	if x != nil {
		return x.ObjectId
	}
	return 0
}

func (x *ObjectPermission) GetPermissions() *PermissionBitmask {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *ObjectPermission) GetComputedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ComputedAt
	}
	return nil
}

type FieldPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectApiName string                 `protobuf:"bytes,1,opt,name=object_api_name,json=objectApiName,proto3" json:"object_api_name,omitempty"` // Object API name (e.g., "user", "order")
	FieldApiName  string                 `protobuf:"bytes,2,opt,name=field_api_name,json=fieldApiName,proto3" json:"field_api_name,omitempty"`    // Field API name (e.g., "email", "salary")
	ObjectId      int64                  `protobuf:"varint,3,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`                 // Internal object ID
	FieldId       int64                  `protobuf:"varint,4,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`                    // Internal field ID
	Permissions   *PermissionBitmask     `protobuf:"bytes,5,opt,name=permissions,proto3" json:"permissions,omitempty"`                            // Combined permission bitmask
	ComputedAt    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=computed_at,json=computedAt,proto3" json:"computed_at,omitempty"`            // When permissions were computed
}

func (x *FieldPermission) Reset() {
	*x = FieldPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldPermission) ProtoMessage() {}

func (x *FieldPermission) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldPermission.ProtoReflect.Descriptor instead.
func (*FieldPermission) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{18}
}

func (x *FieldPermission) GetObjectApiName() string {
	if x != nil {
		return x.ObjectApiName
	}
	return ""
}

func (x *FieldPermission) GetFieldApiName() string {
	if x != nil {
		return x.FieldApiName
	}
	return ""
}

func (x *FieldPermission) GetObjectId() int64 {
	if x != nil {
		return x.ObjectId
	}
	return 0
}

func (x *FieldPermission) GetFieldId() int64 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (x *FieldPermission) GetPermissions() *PermissionBitmask {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *FieldPermission) GetComputedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ComputedAt
	}
	return nil
}

type GroupMembership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupRecordId   string                 `protobuf:"bytes,1,opt,name=group_record_id,json=groupRecordId,proto3" json:"group_record_id,omitempty"`                                               // Group record ID
	GroupLabel      string                 `protobuf:"bytes,2,opt,name=group_label,json=groupLabel,proto3" json:"group_label,omitempty"`                                                          // Group display name
	GroupApiName    string                 `protobuf:"bytes,3,opt,name=group_api_name,json=groupApiName,proto3" json:"group_api_name,omitempty"`                                                  // Group API name
	GroupType       GroupType              `protobuf:"varint,4,opt,name=group_type,json=groupType,proto3,enum=iam.permissions.sync.v1.GroupType" json:"group_type,omitempty"`                     // Type of group
	MembershipType  MembershipType         `protobuf:"varint,5,opt,name=membership_type,json=membershipType,proto3,enum=iam.permissions.sync.v1.MembershipType" json:"membership_type,omitempty"` // How user became a member
	RelatedEntityId string                 `protobuf:"bytes,6,opt,name=related_entity_id,json=relatedEntityId,proto3" json:"related_entity_id,omitempty"`                                         // Related entity (role or territory)
	JoinedAt        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty"`                                                                // When user joined the group
	ExpiresAt       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`                                                             // When membership expires
}

func (x *GroupMembership) Reset() {
	*x = GroupMembership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMembership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMembership) ProtoMessage() {}

func (x *GroupMembership) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMembership.ProtoReflect.Descriptor instead.
func (*GroupMembership) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{19}
}

func (x *GroupMembership) GetGroupRecordId() string {
	if x != nil {
		return x.GroupRecordId
	}
	return ""
}

func (x *GroupMembership) GetGroupLabel() string {
	if x != nil {
		return x.GroupLabel
	}
	return ""
}

func (x *GroupMembership) GetGroupApiName() string {
	if x != nil {
		return x.GroupApiName
	}
	return ""
}

func (x *GroupMembership) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_GROUP_TYPE_UNSPECIFIED
}

func (x *GroupMembership) GetMembershipType() MembershipType {
	if x != nil {
		return x.MembershipType
	}
	return MembershipType_MEMBERSHIP_TYPE_UNSPECIFIED
}

func (x *GroupMembership) GetRelatedEntityId() string {
	if x != nil {
		return x.RelatedEntityId
	}
	return ""
}

func (x *GroupMembership) GetJoinedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinedAt
	}
	return nil
}

func (x *GroupMembership) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

type PermissionSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceType  SourceType             `protobuf:"varint,1,opt,name=source_type,json=sourceType,proto3,enum=iam.permissions.sync.v1.SourceType" json:"source_type,omitempty"` // Type of source (group, role, direct)
	SourceId    string                 `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`                                                // ID of the source
	SourceName  string                 `protobuf:"bytes,3,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`                                          // Name of the source
	Permissions *PermissionBitmask     `protobuf:"bytes,4,opt,name=permissions,proto3" json:"permissions,omitempty"`                                                          // Permissions from this source
	Priority    int32                  `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`                                                               // Priority of this source
	GrantedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=granted_at,json=grantedAt,proto3" json:"granted_at,omitempty"`                                             // When permission was granted
}

func (x *PermissionSource) Reset() {
	*x = PermissionSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionSource) ProtoMessage() {}

func (x *PermissionSource) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionSource.ProtoReflect.Descriptor instead.
func (*PermissionSource) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{20}
}

func (x *PermissionSource) GetSourceType() SourceType {
	if x != nil {
		return x.SourceType
	}
	return SourceType_SOURCE_TYPE_UNSPECIFIED
}

func (x *PermissionSource) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *PermissionSource) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *PermissionSource) GetPermissions() *PermissionBitmask {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *PermissionSource) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *PermissionSource) GetGrantedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.GrantedAt
	}
	return nil
}

type PermissionBitmask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value           int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`                                           // Raw bitmask value
	CanRead         bool     `protobuf:"varint,2,opt,name=can_read,json=canRead,proto3" json:"can_read,omitempty"`                        // READ permission (bit 0, value 1)
	CanUpdate       bool     `protobuf:"varint,3,opt,name=can_update,json=canUpdate,proto3" json:"can_update,omitempty"`                  // UPDATE permission (bit 1, value 2)
	CanCreate       bool     `protobuf:"varint,4,opt,name=can_create,json=canCreate,proto3" json:"can_create,omitempty"`                  // CREATE permission (bit 2, value 4)
	CanDelete       bool     `protobuf:"varint,5,opt,name=can_delete,json=canDelete,proto3" json:"can_delete,omitempty"`                  // DELETE permission (bit 3, value 8)
	PermissionNames []string `protobuf:"bytes,6,rep,name=permission_names,json=permissionNames,proto3" json:"permission_names,omitempty"` // Human-readable permission names
}

func (x *PermissionBitmask) Reset() {
	*x = PermissionBitmask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionBitmask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionBitmask) ProtoMessage() {}

func (x *PermissionBitmask) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionBitmask.ProtoReflect.Descriptor instead.
func (*PermissionBitmask) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{21}
}

func (x *PermissionBitmask) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *PermissionBitmask) GetCanRead() bool {
	if x != nil {
		return x.CanRead
	}
	return false
}

func (x *PermissionBitmask) GetCanUpdate() bool {
	if x != nil {
		return x.CanUpdate
	}
	return false
}

func (x *PermissionBitmask) GetCanCreate() bool {
	if x != nil {
		return x.CanCreate
	}
	return false
}

func (x *PermissionBitmask) GetCanDelete() bool {
	if x != nil {
		return x.CanDelete
	}
	return false
}

func (x *PermissionBitmask) GetPermissionNames() []string {
	if x != nil {
		return x.PermissionNames
	}
	return nil
}

type CacheInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromCache  bool                   `protobuf:"varint,1,opt,name=from_cache,json=fromCache,proto3" json:"from_cache,omitempty"`    // Whether data came from cache
	CachedAt   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=cached_at,json=cachedAt,proto3" json:"cached_at,omitempty"`        // When data was cached
	ExpiresAt  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`     // When cache expires
	TtlSeconds int32                  `protobuf:"varint,4,opt,name=ttl_seconds,json=ttlSeconds,proto3" json:"ttl_seconds,omitempty"` // Cache TTL in seconds
}

func (x *CacheInfo) Reset() {
	*x = CacheInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheInfo) ProtoMessage() {}

func (x *CacheInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheInfo.ProtoReflect.Descriptor instead.
func (*CacheInfo) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{22}
}

func (x *CacheInfo) GetFromCache() bool {
	if x != nil {
		return x.FromCache
	}
	return false
}

func (x *CacheInfo) GetCachedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CachedAt
	}
	return nil
}

func (x *CacheInfo) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *CacheInfo) GetTtlSeconds() int32 {
	if x != nil {
		return x.TtlSeconds
	}
	return 0
}

type PermissionSyncStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalEvents       int32                  `protobuf:"varint,1,opt,name=total_events,json=totalEvents,proto3" json:"total_events,omitempty"`                    // Total events processed
	SyncEvents        int32                  `protobuf:"varint,2,opt,name=sync_events,json=syncEvents,proto3" json:"sync_events,omitempty"`                       // Permission sync events
	FailedEvents      int32                  `protobuf:"varint,3,opt,name=failed_events,json=failedEvents,proto3" json:"failed_events,omitempty"`                 // Failed events
	AvgProcessingTime *durationpb.Duration   `protobuf:"bytes,4,opt,name=avg_processing_time,json=avgProcessingTime,proto3" json:"avg_processing_time,omitempty"` // Average processing time
	PeriodStart       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=period_start,json=periodStart,proto3" json:"period_start,omitempty"`                     // Stats period start
	PeriodEnd         *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=period_end,json=periodEnd,proto3" json:"period_end,omitempty"`                           // Stats period end
}

func (x *PermissionSyncStats) Reset() {
	*x = PermissionSyncStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_sync_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionSyncStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionSyncStats) ProtoMessage() {}

func (x *PermissionSyncStats) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_sync_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionSyncStats.ProtoReflect.Descriptor instead.
func (*PermissionSyncStats) Descriptor() ([]byte, []int) {
	return file_iam_permissions_sync_proto_rawDescGZIP(), []int{23}
}

func (x *PermissionSyncStats) GetTotalEvents() int32 {
	if x != nil {
		return x.TotalEvents
	}
	return 0
}

func (x *PermissionSyncStats) GetSyncEvents() int32 {
	if x != nil {
		return x.SyncEvents
	}
	return 0
}

func (x *PermissionSyncStats) GetFailedEvents() int32 {
	if x != nil {
		return x.FailedEvents
	}
	return 0
}

func (x *PermissionSyncStats) GetAvgProcessingTime() *durationpb.Duration {
	if x != nil {
		return x.AvgProcessingTime
	}
	return nil
}

func (x *PermissionSyncStats) GetPeriodStart() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodStart
	}
	return nil
}

func (x *PermissionSyncStats) GetPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodEnd
	}
	return nil
}

var File_iam_permissions_sync_proto protoreflect.FileDescriptor

var file_iam_permissions_sync_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x69, 0x61, 0x6d, 0x2d, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2d, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x69, 0x61,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x02, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x19,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x74,
	0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xf0, 0x01, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x69, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x22,
	0xb1, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x69, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12,
	0x3c, 0x0a, 0x1a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0b, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x22, 0xb9, 0x02, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x74, 0x6c,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x0a, 0x74, 0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0xb6, 0x01, 0x0a, 0x22, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05,
	0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x1b, 0x53, 0x79, 0x6e,
	0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x69, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x22, 0x81, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x05, 0x73,
	0x69, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xf4, 0x01, 0x0a, 0x22,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4c, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x12, 0x41, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x8d, 0x02, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x41, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x9f, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb3, 0x02, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f,
	0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x11, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x41, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd1, 0x01, 0x0a, 0x23, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xd3,
	0x01, 0x0a, 0x1c, 0x53, 0x79, 0x6e, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x73, 0x53, 0x79, 0x6e, 0x63,
	0x65, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x22, 0x64, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x8c, 0x04, 0x0a, 0x17, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0b,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x55, 0x0a, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x58, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x11,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x41, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf6, 0x03, 0x0a, 0x10, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x69, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x53, 0x0a,
	0x0f, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x6d, 0x61,
	0x73, 0x6b, 0x52, 0x0e, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x53, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x69, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0xa1, 0x02, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x26, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x41, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x10, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x69, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x4c, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x73,
	0x6b, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa2, 0x02, 0x0a, 0x0f,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x69, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xb5, 0x03, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x24, 0x0a,
	0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x69, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0xbb, 0x02, 0x0a, 0x10, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x44, 0x0a,
	0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x6d, 0x61,
	0x73, 0x6b, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x63, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x61, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x09, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x74, 0x6c,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xc3, 0x02, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x13, 0x61, 0x76, 0x67, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x61, 0x76, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x2a, 0xe8, 0x01,
	0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4a,
	0x4f, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4c, 0x45, 0x46,
	0x54, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52,
	0x41, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x91, 0x01, 0x0a, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x52, 0x52,
	0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55,
	0x41, 0x4c, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x04, 0x2a, 0x8b, 0x01, 0x0a,
	0x0e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x48, 0x45, 0x52, 0x49, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x10, 0x03, 0x2a, 0x89, 0x01, 0x0a, 0x0a, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4c,
	0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x52, 0x52, 0x49,
	0x54, 0x4f, 0x52, 0x59, 0x10, 0x04, 0x32, 0x9e, 0x08, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x95, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x3a, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x39, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3a, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75,
	0x6c, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x1b, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x3b, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x53, 0x79, 0x6e, 0x63, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x36, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x61, 0x78, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x63, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_iam_permissions_sync_proto_rawDescOnce sync.Once
	file_iam_permissions_sync_proto_rawDescData = file_iam_permissions_sync_proto_rawDesc
)

func file_iam_permissions_sync_proto_rawDescGZIP() []byte {
	file_iam_permissions_sync_proto_rawDescOnce.Do(func() {
		file_iam_permissions_sync_proto_rawDescData = protoimpl.X.CompressGZIP(file_iam_permissions_sync_proto_rawDescData)
	})
	return file_iam_permissions_sync_proto_rawDescData
}

var file_iam_permissions_sync_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_iam_permissions_sync_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_iam_permissions_sync_proto_goTypes = []interface{}{
	(ChangeType)(0),     // 0: iam.permissions.sync.v1.ChangeType
	(GroupType)(0),      // 1: iam.permissions.sync.v1.GroupType
	(MembershipType)(0), // 2: iam.permissions.sync.v1.MembershipType
	(SourceType)(0),     // 3: iam.permissions.sync.v1.SourceType
	(*GetUserPermissionsSnapshotRequest)(nil),     // 4: iam.permissions.sync.v1.GetUserPermissionsSnapshotRequest
	(*GetUserPermissionsChangesRequest)(nil),      // 5: iam.permissions.sync.v1.GetUserPermissionsChangesRequest
	(*GetBulkUserPermissionsRequest)(nil),         // 6: iam.permissions.sync.v1.GetBulkUserPermissionsRequest
	(*GetGroupMembershipPermissionsRequest)(nil),  // 7: iam.permissions.sync.v1.GetGroupMembershipPermissionsRequest
	(*CheckUserPermissionsChangedRequest)(nil),    // 8: iam.permissions.sync.v1.CheckUserPermissionsChangedRequest
	(*SyncGroupPermissionsRequest)(nil),           // 9: iam.permissions.sync.v1.SyncGroupPermissionsRequest
	(*GetPermissionSyncStatsRequest)(nil),         // 10: iam.permissions.sync.v1.GetPermissionSyncStatsRequest
	(*GetUserPermissionsSnapshotResponse)(nil),    // 11: iam.permissions.sync.v1.GetUserPermissionsSnapshotResponse
	(*GetUserPermissionsChangesResponse)(nil),     // 12: iam.permissions.sync.v1.GetUserPermissionsChangesResponse
	(*GetBulkUserPermissionsResponse)(nil),        // 13: iam.permissions.sync.v1.GetBulkUserPermissionsResponse
	(*GetGroupMembershipPermissionsResponse)(nil), // 14: iam.permissions.sync.v1.GetGroupMembershipPermissionsResponse
	(*CheckUserPermissionsChangedResponse)(nil),   // 15: iam.permissions.sync.v1.CheckUserPermissionsChangedResponse
	(*SyncGroupPermissionsResponse)(nil),          // 16: iam.permissions.sync.v1.SyncGroupPermissionsResponse
	(*GetPermissionSyncStatsResponse)(nil),        // 17: iam.permissions.sync.v1.GetPermissionSyncStatsResponse
	(*UserPermissionsSnapshot)(nil),               // 18: iam.permissions.sync.v1.UserPermissionsSnapshot
	(*PermissionChange)(nil),                      // 19: iam.permissions.sync.v1.PermissionChange
	(*GroupInfo)(nil),                             // 20: iam.permissions.sync.v1.GroupInfo
	(*ObjectPermission)(nil),                      // 21: iam.permissions.sync.v1.ObjectPermission
	(*FieldPermission)(nil),                       // 22: iam.permissions.sync.v1.FieldPermission
	(*GroupMembership)(nil),                       // 23: iam.permissions.sync.v1.GroupMembership
	(*PermissionSource)(nil),                      // 24: iam.permissions.sync.v1.PermissionSource
	(*PermissionBitmask)(nil),                     // 25: iam.permissions.sync.v1.PermissionBitmask
	(*CacheInfo)(nil),                             // 26: iam.permissions.sync.v1.CacheInfo
	(*PermissionSyncStats)(nil),                   // 27: iam.permissions.sync.v1.PermissionSyncStats
	(*timestamppb.Timestamp)(nil),                 // 28: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                   // 29: google.protobuf.Duration
}
var file_iam_permissions_sync_proto_depIdxs = []int32{
	28, // 0: iam.permissions.sync.v1.GetUserPermissionsChangesRequest.since:type_name -> google.protobuf.Timestamp
	28, // 1: iam.permissions.sync.v1.CheckUserPermissionsChangedRequest.since:type_name -> google.protobuf.Timestamp
	28, // 2: iam.permissions.sync.v1.GetPermissionSyncStatsRequest.since:type_name -> google.protobuf.Timestamp
	18, // 3: iam.permissions.sync.v1.GetUserPermissionsSnapshotResponse.snapshot:type_name -> iam.permissions.sync.v1.UserPermissionsSnapshot
	26, // 4: iam.permissions.sync.v1.GetUserPermissionsSnapshotResponse.cache_info:type_name -> iam.permissions.sync.v1.CacheInfo
	28, // 5: iam.permissions.sync.v1.GetUserPermissionsSnapshotResponse.generated_at:type_name -> google.protobuf.Timestamp
	19, // 6: iam.permissions.sync.v1.GetUserPermissionsChangesResponse.changes:type_name -> iam.permissions.sync.v1.PermissionChange
	28, // 7: iam.permissions.sync.v1.GetUserPermissionsChangesResponse.last_change:type_name -> google.protobuf.Timestamp
	26, // 8: iam.permissions.sync.v1.GetUserPermissionsChangesResponse.cache_info:type_name -> iam.permissions.sync.v1.CacheInfo
	18, // 9: iam.permissions.sync.v1.GetBulkUserPermissionsResponse.snapshots:type_name -> iam.permissions.sync.v1.UserPermissionsSnapshot
	26, // 10: iam.permissions.sync.v1.GetBulkUserPermissionsResponse.cache_info:type_name -> iam.permissions.sync.v1.CacheInfo
	18, // 11: iam.permissions.sync.v1.GetGroupMembershipPermissionsResponse.member_permissions:type_name -> iam.permissions.sync.v1.UserPermissionsSnapshot
	20, // 12: iam.permissions.sync.v1.GetGroupMembershipPermissionsResponse.group_info:type_name -> iam.permissions.sync.v1.GroupInfo
	26, // 13: iam.permissions.sync.v1.GetGroupMembershipPermissionsResponse.cache_info:type_name -> iam.permissions.sync.v1.CacheInfo
	28, // 14: iam.permissions.sync.v1.CheckUserPermissionsChangedResponse.last_change:type_name -> google.protobuf.Timestamp
	28, // 15: iam.permissions.sync.v1.SyncGroupPermissionsResponse.synced_at:type_name -> google.protobuf.Timestamp
	27, // 16: iam.permissions.sync.v1.GetPermissionSyncStatsResponse.stats:type_name -> iam.permissions.sync.v1.PermissionSyncStats
	21, // 17: iam.permissions.sync.v1.UserPermissionsSnapshot.permissions:type_name -> iam.permissions.sync.v1.ObjectPermission
	22, // 18: iam.permissions.sync.v1.UserPermissionsSnapshot.field_permissions:type_name -> iam.permissions.sync.v1.FieldPermission
	23, // 19: iam.permissions.sync.v1.UserPermissionsSnapshot.group_memberships:type_name -> iam.permissions.sync.v1.GroupMembership
	24, // 20: iam.permissions.sync.v1.UserPermissionsSnapshot.permission_sources:type_name -> iam.permissions.sync.v1.PermissionSource
	28, // 21: iam.permissions.sync.v1.UserPermissionsSnapshot.snapshot_at:type_name -> google.protobuf.Timestamp
	0,  // 22: iam.permissions.sync.v1.PermissionChange.change_type:type_name -> iam.permissions.sync.v1.ChangeType
	25, // 23: iam.permissions.sync.v1.PermissionChange.old_permissions:type_name -> iam.permissions.sync.v1.PermissionBitmask
	25, // 24: iam.permissions.sync.v1.PermissionChange.new_permissions:type_name -> iam.permissions.sync.v1.PermissionBitmask
	28, // 25: iam.permissions.sync.v1.PermissionChange.changed_at:type_name -> google.protobuf.Timestamp
	1,  // 26: iam.permissions.sync.v1.GroupInfo.group_type:type_name -> iam.permissions.sync.v1.GroupType
	28, // 27: iam.permissions.sync.v1.GroupInfo.last_modified:type_name -> google.protobuf.Timestamp
	25, // 28: iam.permissions.sync.v1.ObjectPermission.permissions:type_name -> iam.permissions.sync.v1.PermissionBitmask
	28, // 29: iam.permissions.sync.v1.ObjectPermission.computed_at:type_name -> google.protobuf.Timestamp
	25, // 30: iam.permissions.sync.v1.FieldPermission.permissions:type_name -> iam.permissions.sync.v1.PermissionBitmask
	28, // 31: iam.permissions.sync.v1.FieldPermission.computed_at:type_name -> google.protobuf.Timestamp
	1,  // 32: iam.permissions.sync.v1.GroupMembership.group_type:type_name -> iam.permissions.sync.v1.GroupType
	2,  // 33: iam.permissions.sync.v1.GroupMembership.membership_type:type_name -> iam.permissions.sync.v1.MembershipType
	28, // 34: iam.permissions.sync.v1.GroupMembership.joined_at:type_name -> google.protobuf.Timestamp
	28, // 35: iam.permissions.sync.v1.GroupMembership.expires_at:type_name -> google.protobuf.Timestamp
	3,  // 36: iam.permissions.sync.v1.PermissionSource.source_type:type_name -> iam.permissions.sync.v1.SourceType
	25, // 37: iam.permissions.sync.v1.PermissionSource.permissions:type_name -> iam.permissions.sync.v1.PermissionBitmask
	28, // 38: iam.permissions.sync.v1.PermissionSource.granted_at:type_name -> google.protobuf.Timestamp
	28, // 39: iam.permissions.sync.v1.CacheInfo.cached_at:type_name -> google.protobuf.Timestamp
	28, // 40: iam.permissions.sync.v1.CacheInfo.expires_at:type_name -> google.protobuf.Timestamp
	29, // 41: iam.permissions.sync.v1.PermissionSyncStats.avg_processing_time:type_name -> google.protobuf.Duration
	28, // 42: iam.permissions.sync.v1.PermissionSyncStats.period_start:type_name -> google.protobuf.Timestamp
	28, // 43: iam.permissions.sync.v1.PermissionSyncStats.period_end:type_name -> google.protobuf.Timestamp
	4,  // 44: iam.permissions.sync.v1.PermissionSyncService.GetUserPermissionsSnapshot:input_type -> iam.permissions.sync.v1.GetUserPermissionsSnapshotRequest
	5,  // 45: iam.permissions.sync.v1.PermissionSyncService.GetUserPermissionsChanges:input_type -> iam.permissions.sync.v1.GetUserPermissionsChangesRequest
	6,  // 46: iam.permissions.sync.v1.PermissionSyncService.GetBulkUserPermissions:input_type -> iam.permissions.sync.v1.GetBulkUserPermissionsRequest
	7,  // 47: iam.permissions.sync.v1.PermissionSyncService.GetGroupMembershipPermissions:input_type -> iam.permissions.sync.v1.GetGroupMembershipPermissionsRequest
	8,  // 48: iam.permissions.sync.v1.PermissionSyncService.CheckUserPermissionsChanged:input_type -> iam.permissions.sync.v1.CheckUserPermissionsChangedRequest
	9,  // 49: iam.permissions.sync.v1.PermissionSyncService.SyncGroupPermissions:input_type -> iam.permissions.sync.v1.SyncGroupPermissionsRequest
	10, // 50: iam.permissions.sync.v1.PermissionSyncService.GetPermissionSyncStats:input_type -> iam.permissions.sync.v1.GetPermissionSyncStatsRequest
	11, // 51: iam.permissions.sync.v1.PermissionSyncService.GetUserPermissionsSnapshot:output_type -> iam.permissions.sync.v1.GetUserPermissionsSnapshotResponse
	12, // 52: iam.permissions.sync.v1.PermissionSyncService.GetUserPermissionsChanges:output_type -> iam.permissions.sync.v1.GetUserPermissionsChangesResponse
	13, // 53: iam.permissions.sync.v1.PermissionSyncService.GetBulkUserPermissions:output_type -> iam.permissions.sync.v1.GetBulkUserPermissionsResponse
	14, // 54: iam.permissions.sync.v1.PermissionSyncService.GetGroupMembershipPermissions:output_type -> iam.permissions.sync.v1.GetGroupMembershipPermissionsResponse
	15, // 55: iam.permissions.sync.v1.PermissionSyncService.CheckUserPermissionsChanged:output_type -> iam.permissions.sync.v1.CheckUserPermissionsChangedResponse
	16, // 56: iam.permissions.sync.v1.PermissionSyncService.SyncGroupPermissions:output_type -> iam.permissions.sync.v1.SyncGroupPermissionsResponse
	17, // 57: iam.permissions.sync.v1.PermissionSyncService.GetPermissionSyncStats:output_type -> iam.permissions.sync.v1.GetPermissionSyncStatsResponse
	51, // [51:58] is the sub-list for method output_type
	44, // [44:51] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_iam_permissions_sync_proto_init() }
func file_iam_permissions_sync_proto_init() {
	if File_iam_permissions_sync_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_iam_permissions_sync_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPermissionsSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_sync_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPermissionsChangesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_sync_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBulkUserPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_sync_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupMembershipPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_sync_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserPermissionsChangedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_sync_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncGroupPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_sync_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPermissionSyncStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_sync_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPermissionsSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_sync_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPermissionsChangesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_sync_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBulkUserPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_sync_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupMembershipPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_sync_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserPermissionsChangedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_sync_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncGroupPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_sync_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPermissionSyncStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_sync_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPermissionsSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_sync_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_sync_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_sync_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_sync_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_sync_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMembership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_sync_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_sync_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionBitmask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_sync_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_sync_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionSyncStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_iam_permissions_sync_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_iam_permissions_sync_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_iam_permissions_sync_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_iam_permissions_sync_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_iam_permissions_sync_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_iam_permissions_sync_proto_goTypes,
		DependencyIndexes: file_iam_permissions_sync_proto_depIdxs,
		EnumInfos:         file_iam_permissions_sync_proto_enumTypes,
		MessageInfos:      file_iam_permissions_sync_proto_msgTypes,
	}.Build()
	File_iam_permissions_sync_proto = out.File
	file_iam_permissions_sync_proto_rawDesc = nil
	file_iam_permissions_sync_proto_goTypes = nil
	file_iam_permissions_sync_proto_depIdxs = nil
}
