// Package httpApi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package httpApi

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CreateGroupRequestType.
const (
	CreateGroupRequestTypeQueue                    CreateGroupRequestType = "queue"
	CreateGroupRequestTypeRegular                  CreateGroupRequestType = "regular"
	CreateGroupRequestTypeRole                     CreateGroupRequestType = "role"
	CreateGroupRequestTypeRoleAndSubordinates      CreateGroupRequestType = "role_and_subordinates"
	CreateGroupRequestTypeTerritory                CreateGroupRequestType = "territory"
	CreateGroupRequestTypeTerritoryAndSubordinates CreateGroupRequestType = "territory_and_subordinates"
)

// Defines values for CreateIdentityRequestKind.
const (
	CreateIdentityRequestKindApiKey   CreateIdentityRequestKind = "api_key"
	CreateIdentityRequestKindOauth    CreateIdentityRequestKind = "oauth"
	CreateIdentityRequestKindPassword CreateIdentityRequestKind = "password"
)

// Defines values for CreatePrincipalRequestKind.
const (
	CreatePrincipalRequestKindExternal CreatePrincipalRequestKind = "external"
	CreatePrincipalRequestKindService  CreatePrincipalRequestKind = "service"
	CreatePrincipalRequestKindSystem   CreatePrincipalRequestKind = "system"
	CreatePrincipalRequestKindUser     CreatePrincipalRequestKind = "user"
)

// Defines values for GroupType.
const (
	GroupTypeQueue                    GroupType = "queue"
	GroupTypeRegular                  GroupType = "regular"
	GroupTypeRole                     GroupType = "role"
	GroupTypeRoleAndSubordinates      GroupType = "role_and_subordinates"
	GroupTypeTerritory                GroupType = "territory"
	GroupTypeTerritoryAndSubordinates GroupType = "territory_and_subordinates"
)

// Defines values for IdentityKind.
const (
	IdentityKindApiKey   IdentityKind = "api_key"
	IdentityKindOauth    IdentityKind = "oauth"
	IdentityKindPassword IdentityKind = "password"
)

// Defines values for PrincipalKind.
const (
	PrincipalKindExternal PrincipalKind = "external"
	PrincipalKindService  PrincipalKind = "service"
	PrincipalKindSystem   PrincipalKind = "system"
	PrincipalKindUser     PrincipalKind = "user"
)

// Defines values for UpdateGroupRequestType.
const (
	UpdateGroupRequestTypeQueue                    UpdateGroupRequestType = "queue"
	UpdateGroupRequestTypeRegular                  UpdateGroupRequestType = "regular"
	UpdateGroupRequestTypeRole                     UpdateGroupRequestType = "role"
	UpdateGroupRequestTypeRoleAndSubordinates      UpdateGroupRequestType = "role_and_subordinates"
	UpdateGroupRequestTypeTerritory                UpdateGroupRequestType = "territory"
	UpdateGroupRequestTypeTerritoryAndSubordinates UpdateGroupRequestType = "territory_and_subordinates"
)

// Defines values for UpdateIdentityRequestKind.
const (
	UpdateIdentityRequestKindApiKey   UpdateIdentityRequestKind = "api_key"
	UpdateIdentityRequestKindOauth    UpdateIdentityRequestKind = "oauth"
	UpdateIdentityRequestKindPassword UpdateIdentityRequestKind = "password"
)

// Defines values for UpdatePrincipalRequestKind.
const (
	UpdatePrincipalRequestKindExternal UpdatePrincipalRequestKind = "external"
	UpdatePrincipalRequestKindService  UpdatePrincipalRequestKind = "service"
	UpdatePrincipalRequestKindSystem   UpdatePrincipalRequestKind = "system"
	UpdatePrincipalRequestKindUser     UpdatePrincipalRequestKind = "user"
)

// Defines values for GetGroupsParamsType.
const (
	GetGroupsParamsTypeQueue                    GetGroupsParamsType = "queue"
	GetGroupsParamsTypeRegular                  GetGroupsParamsType = "regular"
	GetGroupsParamsTypeRole                     GetGroupsParamsType = "role"
	GetGroupsParamsTypeRoleAndSubordinates      GetGroupsParamsType = "role_and_subordinates"
	GetGroupsParamsTypeTerritory                GetGroupsParamsType = "territory"
	GetGroupsParamsTypeTerritoryAndSubordinates GetGroupsParamsType = "territory_and_subordinates"
)

// Defines values for GetIdentitiesParamsKind.
const (
	GetIdentitiesParamsKindApiKey   GetIdentitiesParamsKind = "api_key"
	GetIdentitiesParamsKindOauth    GetIdentitiesParamsKind = "oauth"
	GetIdentitiesParamsKindPassword GetIdentitiesParamsKind = "password"
)

// Defines values for GetPermissionsCheckParamsPermission.
const (
	N1 GetPermissionsCheckParamsPermission = 1
	N2 GetPermissionsCheckParamsPermission = 2
	N4 GetPermissionsCheckParamsPermission = 4
	N8 GetPermissionsCheckParamsPermission = 8
)

// Defines values for GetPrincipalsParamsKind.
const (
	GetPrincipalsParamsKindExternal GetPrincipalsParamsKind = "external"
	GetPrincipalsParamsKindService  GetPrincipalsParamsKind = "service"
	GetPrincipalsParamsKindSystem   GetPrincipalsParamsKind = "system"
	GetPrincipalsParamsKindUser     GetPrincipalsParamsKind = "user"
)

// CreateFieldPermissionRequest defines model for CreateFieldPermissionRequest.
type CreateFieldPermissionRequest struct {
	// FieldId Reference to security field
	FieldId int `json:"field_id"`

	// Permissions Permission bitmask (read/write access)
	Permissions *int `json:"permissions,omitempty"`

	// PermissionsDetail Detailed permission breakdown (alternative to bitmask)
	PermissionsDetail *struct {
		Read  *bool `json:"read,omitempty"`
		Write *bool `json:"write,omitempty"`
	} `json:"permissions_detail,omitempty"`
	union json.RawMessage
}

// CreateFieldPermissionRequest0 defines model for .
type CreateFieldPermissionRequest0 = interface{}

// CreateFieldPermissionRequest1 defines model for .
type CreateFieldPermissionRequest1 = interface{}

// CreateGroupRequest defines model for CreateGroupRequest.
type CreateGroupRequest struct {
	// ApiName API-friendly group identifier
	ApiName string `json:"api_name"`

	// Email Group email address
	Email *openapi_types.Email `json:"email"`

	// Label Human-readable group name
	Label string `json:"label"`

	// RelatedRoleId Related role ID for role-based groups
	RelatedRoleId *int `json:"related_role_id"`

	// RelatedTerritoryId Related territory ID for territory-based groups
	RelatedTerritoryId *int `json:"related_territory_id"`

	// Type Group type determining behavior and membership rules
	Type CreateGroupRequestType `json:"type"`
}

// CreateGroupRequestType Group type determining behavior and membership rules
type CreateGroupRequestType string

// CreateIdentityRequest defines model for CreateIdentityRequest.
type CreateIdentityRequest struct {
	// Idp Identity Provider identifier
	Idp string `json:"idp"`

	// Kind Type of authentication method
	Kind CreateIdentityRequestKind `json:"kind"`

	// PrincipalId Reference to principal
	PrincipalId int `json:"principal_id"`

	// Subject Subject identifier within the IdP
	Subject string `json:"subject"`
}

// CreateIdentityRequestKind Type of authentication method
type CreateIdentityRequestKind string

// CreateObjectPermissionRequest defines model for CreateObjectPermissionRequest.
type CreateObjectPermissionRequest struct {
	// ObjectId Reference to security object
	ObjectId int `json:"object_id"`

	// Permissions Permission bitmask (CRUD operations)
	Permissions *int `json:"permissions,omitempty"`

	// PermissionsDetail Detailed permission breakdown (alternative to bitmask)
	PermissionsDetail *struct {
		Create *bool `json:"create,omitempty"`
		Delete *bool `json:"delete,omitempty"`
		Read   *bool `json:"read,omitempty"`
		Update *bool `json:"update,omitempty"`
	} `json:"permissions_detail,omitempty"`
	union json.RawMessage
}

// CreateObjectPermissionRequest0 defines model for .
type CreateObjectPermissionRequest0 = interface{}

// CreateObjectPermissionRequest1 defines model for .
type CreateObjectPermissionRequest1 = interface{}

// CreatePermissionSetRequest defines model for CreatePermissionSetRequest.
type CreatePermissionSetRequest struct {
	// ApiName API-friendly permission set identifier
	ApiName string `json:"api_name"`

	// Description Description of the permission set
	Description *string `json:"description"`

	// Label Human-readable label
	Label string `json:"label"`
}

// CreatePrincipalRequest defines model for CreatePrincipalRequest.
type CreatePrincipalRequest struct {
	// IsActive Active status flag
	IsActive *bool `json:"is_active,omitempty"`

	// Kind Type of principal
	Kind CreatePrincipalRequestKind `json:"kind"`

	// Login Login identifier for authentication
	Login string `json:"login"`

	// SubjectId Reference to subject entity (user ID for user principals)
	SubjectId *int `json:"subject_id"`
}

// CreatePrincipalRequestKind Type of principal
type CreatePrincipalRequestKind string

// CreateRoleRequest defines model for CreateRoleRequest.
type CreateRoleRequest struct {
	// ApiName API-friendly role identifier
	ApiName string `json:"api_name"`

	// ExternalId External system identifier
	ExternalId *string `json:"external_id"`

	// Label Human-readable role name
	Label string `json:"label"`

	// ParentId Parent role ID
	ParentId *int `json:"parent_id"`
}

// CreateSecurityFieldRequest defines model for CreateSecurityFieldRequest.
type CreateSecurityFieldRequest struct {
	// ApiName API-friendly field identifier
	ApiName string `json:"api_name"`
}

// CreateSecurityObjectRequest defines model for CreateSecurityObjectRequest.
type CreateSecurityObjectRequest struct {
	// ApiName API-friendly object identifier
	ApiName string `json:"api_name"`
}

// CreateTerritoryRequest defines model for CreateTerritoryRequest.
type CreateTerritoryRequest struct {
	// ApiName API-friendly territory identifier
	ApiName string `json:"api_name"`

	// Label Human-readable territory name
	Label string `json:"label"`

	// ParentId Parent territory ID
	ParentId *int `json:"parent_id"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	// Email User's email address
	Email openapi_types.Email `json:"email"`

	// ExternalId External system identifier
	ExternalId *string `json:"external_id"`

	// ManagerId Manager's user ID
	ManagerId *string `json:"manager_id"`

	// Name User's display name
	Name string `json:"name"`
}

// Error defines model for Error.
type Error struct {
	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error code
	Error string `json:"error"`

	// Message Human-readable error message
	Message string `json:"message"`

	// RequestId Request identifier for tracing
	RequestId *string `json:"request_id,omitempty"`

	// Timestamp Error timestamp
	Timestamp time.Time `json:"timestamp"`
}

// FieldPermission defines model for FieldPermission.
type FieldPermission struct {
	// CreatedAt Creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// FieldId Reference to security field
	FieldId int `json:"field_id"`

	// Id Field permission ID
	Id int `json:"id"`

	// PermissionSetId Reference to permission set
	PermissionSetId int `json:"permission_set_id"`

	// Permissions Permission bitmask (read/write access)
	Permissions int `json:"permissions"`

	// PermissionsDetail Detailed permission breakdown
	PermissionsDetail *struct {
		Read  *bool `json:"read,omitempty"`
		Write *bool `json:"write,omitempty"`
	} `json:"permissions_detail,omitempty"`

	// TenantId Tenant identifier
	TenantId openapi_types.UUID `json:"tenant_id"`

	// UpdatedAt Last update timestamp
	UpdatedAt time.Time `json:"updated_at"`
}

// Group defines model for Group.
type Group struct {
	// ApiName API-friendly group identifier
	ApiName string `json:"api_name"`

	// CreatedAt Creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// DeletedAt Soft delete timestamp
	DeletedAt *time.Time `json:"deleted_at"`

	// Email Group email address
	Email *openapi_types.Email `json:"email"`

	// Id Internal group ID
	Id int `json:"id"`

	// Label Human-readable group name
	Label string `json:"label"`

	// RelatedRoleId Related role ID for role-based groups
	RelatedRoleId *int `json:"related_role_id"`

	// RelatedTerritoryId Related territory ID for territory-based groups
	RelatedTerritoryId *int `json:"related_territory_id"`

	// TenantId Tenant identifier
	TenantId openapi_types.UUID `json:"tenant_id"`

	// Type Group type determining behavior and membership rules
	Type GroupType `json:"type"`

	// UpdatedAt Last update timestamp
	UpdatedAt time.Time `json:"updated_at"`
}

// GroupType Group type determining behavior and membership rules
type GroupType string

// GroupMember defines model for GroupMember.
type GroupMember struct {
	// CreatedAt Creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// DeletedAt Soft delete timestamp
	DeletedAt *time.Time `json:"deleted_at"`

	// GroupId Group ID
	GroupId int `json:"group_id"`

	// Id Internal group member ID
	Id int `json:"id"`

	// MemberGroupId Member group ID (for group membership)
	MemberGroupId *int `json:"member_group_id"`

	// MemberUserId Member user ID (for user membership)
	MemberUserId *string `json:"member_user_id"`

	// RecordId Human-readable group member ID
	RecordId string `json:"record_id"`

	// TenantId Tenant identifier
	TenantId openapi_types.UUID `json:"tenant_id"`

	// UpdatedAt Last update timestamp
	UpdatedAt time.Time `json:"updated_at"`
}

// Identity defines model for Identity.
type Identity struct {
	// CreatedAt Creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// Id Internal identity ID
	Id int `json:"id"`

	// Idp Identity Provider identifier
	Idp string `json:"idp"`

	// Kind Type of authentication method
	Kind IdentityKind `json:"kind"`

	// PrincipalId Reference to principal
	PrincipalId int `json:"principal_id"`

	// Subject Subject identifier within the IdP
	Subject string `json:"subject"`

	// TenantId Tenant identifier
	TenantId openapi_types.UUID `json:"tenant_id"`

	// UpdatedAt Last update timestamp
	UpdatedAt time.Time `json:"updated_at"`
}

// IdentityKind Type of authentication method
type IdentityKind string

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	// AccessToken JWT access token
	AccessToken string `json:"access_token"`

	// ExpiresIn Token expiration time in seconds
	ExpiresIn int `json:"expires_in"`

	// RefreshToken JWT refresh token
	RefreshToken string `json:"refresh_token"`

	// TokenType Token type
	TokenType string `json:"token_type"`
	User      User   `json:"user"`
}

// ObjectPermission defines model for ObjectPermission.
type ObjectPermission struct {
	// CreatedAt Creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// Id Object permission ID
	Id int `json:"id"`

	// ObjectId Reference to security object
	ObjectId int `json:"object_id"`

	// PermissionSetId Reference to permission set
	PermissionSetId int `json:"permission_set_id"`

	// Permissions Permission bitmask (CRUD operations)
	Permissions int `json:"permissions"`

	// PermissionsDetail Detailed permission breakdown
	PermissionsDetail *struct {
		Create *bool `json:"create,omitempty"`
		Delete *bool `json:"delete,omitempty"`
		Read   *bool `json:"read,omitempty"`
		Update *bool `json:"update,omitempty"`
	} `json:"permissions_detail,omitempty"`

	// TenantId Tenant identifier
	TenantId openapi_types.UUID `json:"tenant_id"`

	// UpdatedAt Last update timestamp
	UpdatedAt time.Time `json:"updated_at"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	// Limit Number of items per page
	Limit int `json:"limit"`

	// Page Current page number
	Page int `json:"page"`

	// Pages Total number of pages
	Pages int `json:"pages"`

	// Total Total number of items
	Total int `json:"total"`
}

// PermissionSet defines model for PermissionSet.
type PermissionSet struct {
	// ApiName API-friendly permission set identifier
	ApiName string `json:"api_name"`

	// CreatedAt Creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// DeletedAt Deletion timestamp (for soft deletes)
	DeletedAt *time.Time `json:"deleted_at"`

	// Description Description of the permission set
	Description *string `json:"description"`

	// Id Permission set ID
	Id int `json:"id"`

	// IsDeleted Soft delete flag
	IsDeleted bool `json:"is_deleted"`

	// Label Human-readable label
	Label string `json:"label"`

	// TenantId Tenant identifier
	TenantId openapi_types.UUID `json:"tenant_id"`

	// UpdatedAt Last update timestamp
	UpdatedAt time.Time `json:"updated_at"`
}

// Principal defines model for Principal.
type Principal struct {
	// CreatedAt Creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// Id Internal principal ID
	Id int `json:"id"`

	// IsActive Active status flag
	IsActive bool `json:"is_active"`

	// Kind Type of principal
	Kind PrincipalKind `json:"kind"`

	// Login Login identifier for authentication
	Login string `json:"login"`

	// SubjectId Reference to subject entity (user ID for user principals)
	SubjectId *int `json:"subject_id"`

	// TenantId Tenant identifier
	TenantId openapi_types.UUID `json:"tenant_id"`

	// UpdatedAt Last update timestamp
	UpdatedAt time.Time `json:"updated_at"`
}

// PrincipalKind Type of principal
type PrincipalKind string

// Role defines model for Role.
type Role struct {
	// ApiName API-friendly role identifier
	ApiName string `json:"api_name"`

	// CreatedAt Creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// DeletedAt Soft delete timestamp
	DeletedAt *time.Time `json:"deleted_at"`

	// ExternalId External system identifier
	ExternalId *string `json:"external_id"`

	// Id Internal role ID
	Id int `json:"id"`

	// Label Human-readable role name
	Label string `json:"label"`

	// ParentId Parent role ID
	ParentId *int `json:"parent_id"`

	// TenantId Tenant identifier
	TenantId openapi_types.UUID `json:"tenant_id"`

	// UpdatedAt Last update timestamp
	UpdatedAt time.Time `json:"updated_at"`
}

// SecurityField defines model for SecurityField.
type SecurityField struct {
	// ApiName API-friendly field identifier
	ApiName string `json:"api_name"`

	// CreatedAt Creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// Id Security field ID
	Id int `json:"id"`

	// ObjectId Reference to security object
	ObjectId int `json:"object_id"`

	// TenantId Tenant identifier
	TenantId openapi_types.UUID `json:"tenant_id"`

	// UpdatedAt Last update timestamp
	UpdatedAt time.Time `json:"updated_at"`
}

// SecurityObject defines model for SecurityObject.
type SecurityObject struct {
	// ApiName API-friendly object identifier
	ApiName string `json:"api_name"`

	// CreatedAt Creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// Id Security object ID
	Id int `json:"id"`

	// TenantId Tenant identifier
	TenantId openapi_types.UUID `json:"tenant_id"`

	// UpdatedAt Last update timestamp
	UpdatedAt time.Time `json:"updated_at"`
}

// Territory defines model for Territory.
type Territory struct {
	// ApiName API-friendly territory identifier
	ApiName string `json:"api_name"`

	// CreatedAt Creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// DeletedAt Soft delete timestamp
	DeletedAt *time.Time `json:"deleted_at"`

	// Id Internal territory ID
	Id int `json:"id"`

	// Label Human-readable territory name
	Label string `json:"label"`

	// ParentId Parent territory ID
	ParentId *int `json:"parent_id"`

	// TenantId Tenant identifier
	TenantId openapi_types.UUID `json:"tenant_id"`

	// UpdatedAt Last update timestamp
	UpdatedAt time.Time `json:"updated_at"`
}

// UpdateFieldPermissionRequest defines model for UpdateFieldPermissionRequest.
type UpdateFieldPermissionRequest struct {
	// Permissions Permission bitmask (read/write access)
	Permissions *int `json:"permissions,omitempty"`

	// PermissionsDetail Detailed permission breakdown (alternative to bitmask)
	PermissionsDetail *struct {
		Read  *bool `json:"read,omitempty"`
		Write *bool `json:"write,omitempty"`
	} `json:"permissions_detail,omitempty"`
	union json.RawMessage
}

// UpdateFieldPermissionRequest0 defines model for .
type UpdateFieldPermissionRequest0 = interface{}

// UpdateFieldPermissionRequest1 defines model for .
type UpdateFieldPermissionRequest1 = interface{}

// UpdateGroupRequest defines model for UpdateGroupRequest.
type UpdateGroupRequest struct {
	// ApiName API-friendly group identifier
	ApiName *string `json:"api_name,omitempty"`

	// Email Group email address
	Email *openapi_types.Email `json:"email"`

	// Label Human-readable group name
	Label *string `json:"label,omitempty"`

	// RelatedRoleId Related role ID for role-based groups
	RelatedRoleId *int `json:"related_role_id"`

	// RelatedTerritoryId Related territory ID for territory-based groups
	RelatedTerritoryId *int `json:"related_territory_id"`

	// Type Group type determining behavior and membership rules
	Type *UpdateGroupRequestType `json:"type,omitempty"`
}

// UpdateGroupRequestType Group type determining behavior and membership rules
type UpdateGroupRequestType string

// UpdateIdentityRequest defines model for UpdateIdentityRequest.
type UpdateIdentityRequest struct {
	// Idp Identity Provider identifier
	Idp *string `json:"idp,omitempty"`

	// Kind Type of authentication method
	Kind *UpdateIdentityRequestKind `json:"kind,omitempty"`

	// PrincipalId Reference to principal
	PrincipalId *int `json:"principal_id,omitempty"`

	// Subject Subject identifier within the IdP
	Subject *string `json:"subject,omitempty"`
}

// UpdateIdentityRequestKind Type of authentication method
type UpdateIdentityRequestKind string

// UpdateObjectPermissionRequest defines model for UpdateObjectPermissionRequest.
type UpdateObjectPermissionRequest struct {
	// Permissions Permission bitmask (CRUD operations)
	Permissions *int `json:"permissions,omitempty"`

	// PermissionsDetail Detailed permission breakdown (alternative to bitmask)
	PermissionsDetail *struct {
		Create *bool `json:"create,omitempty"`
		Delete *bool `json:"delete,omitempty"`
		Read   *bool `json:"read,omitempty"`
		Update *bool `json:"update,omitempty"`
	} `json:"permissions_detail,omitempty"`
	union json.RawMessage
}

// UpdateObjectPermissionRequest0 defines model for .
type UpdateObjectPermissionRequest0 = interface{}

// UpdateObjectPermissionRequest1 defines model for .
type UpdateObjectPermissionRequest1 = interface{}

// UpdatePermissionSetRequest defines model for UpdatePermissionSetRequest.
type UpdatePermissionSetRequest struct {
	// ApiName API-friendly permission set identifier
	ApiName *string `json:"api_name,omitempty"`

	// Description Description of the permission set
	Description *string `json:"description"`

	// Label Human-readable label
	Label *string `json:"label,omitempty"`
}

// UpdatePrincipalRequest defines model for UpdatePrincipalRequest.
type UpdatePrincipalRequest struct {
	// IsActive Active status flag
	IsActive *bool `json:"is_active,omitempty"`

	// Kind Type of principal
	Kind *UpdatePrincipalRequestKind `json:"kind,omitempty"`

	// Login Login identifier for authentication
	Login *string `json:"login,omitempty"`

	// SubjectId Reference to subject entity (user ID for user principals)
	SubjectId *int `json:"subject_id"`
}

// UpdatePrincipalRequestKind Type of principal
type UpdatePrincipalRequestKind string

// UpdateRoleRequest defines model for UpdateRoleRequest.
type UpdateRoleRequest struct {
	// ApiName API-friendly role identifier
	ApiName *string `json:"api_name,omitempty"`

	// ExternalId External system identifier
	ExternalId *string `json:"external_id"`

	// Label Human-readable role name
	Label *string `json:"label,omitempty"`

	// ParentId Parent role ID
	ParentId *int `json:"parent_id"`
}

// UpdateSecurityFieldRequest defines model for UpdateSecurityFieldRequest.
type UpdateSecurityFieldRequest struct {
	// ApiName API-friendly field identifier
	ApiName *string `json:"api_name,omitempty"`
}

// UpdateSecurityObjectRequest defines model for UpdateSecurityObjectRequest.
type UpdateSecurityObjectRequest struct {
	// ApiName API-friendly object identifier
	ApiName *string `json:"api_name,omitempty"`
}

// UpdateTerritoryRequest defines model for UpdateTerritoryRequest.
type UpdateTerritoryRequest struct {
	// ApiName API-friendly territory identifier
	ApiName *string `json:"api_name,omitempty"`

	// Label Human-readable territory name
	Label *string `json:"label,omitempty"`

	// ParentId Parent territory ID
	ParentId *int `json:"parent_id"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	// Email User's email address
	Email *openapi_types.Email `json:"email,omitempty"`

	// ExternalId External system identifier
	ExternalId *string `json:"external_id"`

	// ManagerId Manager's user ID
	ManagerId *string `json:"manager_id"`

	// Name User's display name
	Name *string `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	// CreatedAt Creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// Email User's email address
	Email openapi_types.Email `json:"email"`

	// ExternalId External system identifier
	ExternalId *string `json:"external_id"`

	// Id Human-readable user ID
	Id string `json:"id"`

	// ManagerId Manager's user ID
	ManagerId *string `json:"manager_id"`

	// Name User's display name
	Name string `json:"name"`

	// TenantId Tenant identifier
	TenantId openapi_types.UUID `json:"tenant_id"`

	// UpdatedAt Last update timestamp
	UpdatedAt time.Time `json:"updated_at"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// Forbidden defines model for Forbidden.
type Forbidden = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// PostAuthForgotPasswordJSONBody defines parameters for PostAuthForgotPassword.
type PostAuthForgotPasswordJSONBody struct {
	// Email User email address
	Email openapi_types.Email `json:"email"`
}

// PostAuthLoginJSONBody defines parameters for PostAuthLogin.
type PostAuthLoginJSONBody struct {
	// Email User email address
	Email openapi_types.Email `json:"email"`

	// Password User password
	Password string `json:"password"`
}

// PostAuthRefreshJSONBody defines parameters for PostAuthRefresh.
type PostAuthRefreshJSONBody struct {
	// RefreshToken Refresh token
	RefreshToken string `json:"refresh_token"`
}

// PostAuthRegisterJSONBody defines parameters for PostAuthRegister.
type PostAuthRegisterJSONBody struct {
	// Email User's email address
	Email openapi_types.Email `json:"email"`

	// Name User's display name
	Name string `json:"name"`

	// Password User password
	Password string `json:"password"`
}

// PostAuthResetPasswordJSONBody defines parameters for PostAuthResetPassword.
type PostAuthResetPasswordJSONBody struct {
	// Password New password
	Password string `json:"password"`

	// Token Password reset token
	Token string `json:"token"`
}

// GetCacheStatsParams defines parameters for GetCacheStats.
type GetCacheStatsParams struct {
	// TenantId Filter statistics by tenant ID
	TenantId *openapi_types.UUID `form:"tenant_id,omitempty" json:"tenant_id,omitempty"`
}

// GetGroupMembersParams defines parameters for GetGroupMembers.
type GetGroupMembersParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// GroupId Filter by group ID
	GroupId *int `form:"group_id,omitempty" json:"group_id,omitempty"`

	// MemberUserId Filter by member user ID
	MemberUserId *string `form:"member_user_id,omitempty" json:"member_user_id,omitempty"`

	// MemberGroupId Filter by member group ID
	MemberGroupId *int `form:"member_group_id,omitempty" json:"member_group_id,omitempty"`
}

// PostGroupMembersJSONBody defines parameters for PostGroupMembers.
type PostGroupMembersJSONBody struct {
	// GroupId Group ID to add member to
	GroupId *int `json:"group_id,omitempty"`

	// MemberGroupId Group ID to add as member
	MemberGroupId *int `json:"member_group_id"`

	// MemberUserId User ID to add as member
	MemberUserId *string `json:"member_user_id"`
	union        json.RawMessage
}

// PostGroupMembersJSONBody0 defines parameters for PostGroupMembers.
type PostGroupMembersJSONBody0 = interface{}

// PostGroupMembersJSONBody1 defines parameters for PostGroupMembers.
type PostGroupMembersJSONBody1 = interface{}

// PutGroupMembersMemberIdJSONBody defines parameters for PutGroupMembersMemberId.
type PutGroupMembersMemberIdJSONBody struct {
	// GroupId New group ID
	GroupId *int `json:"group_id,omitempty"`

	// MemberGroupId New member group ID
	MemberGroupId *int `json:"member_group_id"`

	// MemberUserId New member user ID
	MemberUserId *string `json:"member_user_id"`
	union        json.RawMessage
}

// PutGroupMembersMemberIdJSONBody0 defines parameters for PutGroupMembersMemberId.
type PutGroupMembersMemberIdJSONBody0 = interface{}

// PutGroupMembersMemberIdJSONBody1 defines parameters for PutGroupMembersMemberId.
type PutGroupMembersMemberIdJSONBody1 = interface{}

// GetGroupsParams defines parameters for GetGroups.
type GetGroupsParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Search Search term for label or api_name
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Type Filter by group type
	Type *GetGroupsParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// GetGroupsParamsType defines parameters for GetGroups.
type GetGroupsParamsType string

// GetGroupsGroupIdMembersParams defines parameters for GetGroupsGroupIdMembers.
type GetGroupsGroupIdMembersParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostGroupsGroupIdMembersJSONBody defines parameters for PostGroupsGroupIdMembers.
type PostGroupsGroupIdMembersJSONBody struct {
	// MemberGroupId Group ID to add as member
	MemberGroupId *int `json:"member_group_id"`

	// MemberUserId User ID to add as member
	MemberUserId *string `json:"member_user_id"`
	union        json.RawMessage
}

// PostGroupsGroupIdMembersJSONBody0 defines parameters for PostGroupsGroupIdMembers.
type PostGroupsGroupIdMembersJSONBody0 = interface{}

// PostGroupsGroupIdMembersJSONBody1 defines parameters for PostGroupsGroupIdMembers.
type PostGroupsGroupIdMembersJSONBody1 = interface{}

// GetIdentitiesParams defines parameters for GetIdentities.
type GetIdentitiesParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// PrincipalId Filter by principal ID
	PrincipalId *int `form:"principal_id,omitempty" json:"principal_id,omitempty"`

	// Kind Filter by identity kind
	Kind *GetIdentitiesParamsKind `form:"kind,omitempty" json:"kind,omitempty"`

	// Idp Filter by identity provider
	Idp *string `form:"idp,omitempty" json:"idp,omitempty"`
}

// GetIdentitiesParamsKind defines parameters for GetIdentities.
type GetIdentitiesParamsKind string

// GetPermissionsCheckParams defines parameters for GetPermissionsCheck.
type GetPermissionsCheckParams struct {
	// UserId User ID to check permissions for
	UserId string `form:"user_id" json:"user_id"`

	// ObjectId Object ID to check permissions for
	ObjectId int `form:"object_id" json:"object_id"`

	// FieldId Field ID for field-level permission check
	FieldId *int `form:"field_id,omitempty" json:"field_id,omitempty"`

	// RowId Row ID for row-level permission check
	RowId *int `form:"row_id,omitempty" json:"row_id,omitempty"`

	// Permission Required permission (1=READ, 2=CREATE, 4=UPDATE, 8=DELETE)
	Permission GetPermissionsCheckParamsPermission `form:"permission" json:"permission"`
}

// GetPermissionsCheckParamsPermission defines parameters for GetPermissionsCheck.
type GetPermissionsCheckParamsPermission int

// GetPermissionsUserUserIdFieldsParams defines parameters for GetPermissionsUserUserIdFields.
type GetPermissionsUserUserIdFieldsParams struct {
	// ObjectId Filter by object ID
	ObjectId *int `form:"object_id,omitempty" json:"object_id,omitempty"`

	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetPermissionsUserUserIdObjectsParams defines parameters for GetPermissionsUserUserIdObjects.
type GetPermissionsUserUserIdObjectsParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetPermissionsUserUserIdRowsParams defines parameters for GetPermissionsUserUserIdRows.
type GetPermissionsUserUserIdRowsParams struct {
	// ObjectId Filter by object ID
	ObjectId *int `form:"object_id,omitempty" json:"object_id,omitempty"`

	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetPrincipalsParams defines parameters for GetPrincipals.
type GetPrincipalsParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Kind Filter by principal kind
	Kind *GetPrincipalsParamsKind `form:"kind,omitempty" json:"kind,omitempty"`

	// IsActive Filter by active status
	IsActive *bool `form:"is_active,omitempty" json:"is_active,omitempty"`

	// SubjectId Filter by subject ID
	SubjectId *int `form:"subject_id,omitempty" json:"subject_id,omitempty"`
}

// GetPrincipalsParamsKind defines parameters for GetPrincipals.
type GetPrincipalsParamsKind string

// GetPrincipalsPrincipalIdIdentitiesParams defines parameters for GetPrincipalsPrincipalIdIdentities.
type GetPrincipalsPrincipalIdIdentitiesParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PutPrincipalsPrincipalIdStatusJSONBody defines parameters for PutPrincipalsPrincipalIdStatus.
type PutPrincipalsPrincipalIdStatusJSONBody struct {
	// IsActive New active status
	IsActive bool `json:"is_active"`
}

// GetRolesParams defines parameters for GetRoles.
type GetRolesParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Search Search term for label or api_name
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// ParentId Filter by parent role ID
	ParentId *int `form:"parent_id,omitempty" json:"parent_id,omitempty"`
}

// GetRolesRoleIdChildrenParams defines parameters for GetRolesRoleIdChildren.
type GetRolesRoleIdChildrenParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PutRolesRoleIdParentJSONBody defines parameters for PutRolesRoleIdParent.
type PutRolesRoleIdParentJSONBody struct {
	// ParentId Parent role ID (null to remove parent)
	ParentId *int `json:"parent_id"`
}

// GetSecurityObjectsParams defines parameters for GetSecurityObjects.
type GetSecurityObjectsParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Search Search term for api_name
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// GetSecurityObjectsObjectIdFieldsParams defines parameters for GetSecurityObjectsObjectIdFields.
type GetSecurityObjectsObjectIdFieldsParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetSecurityPermissionSetsParams defines parameters for GetSecurityPermissionSets.
type GetSecurityPermissionSetsParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Search Search term for api_name or label
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// GroupId Filter by group ID
	GroupId *int `form:"group_id,omitempty" json:"group_id,omitempty"`
}

// GetSecurityPermissionSetsPermissionSetIdFieldPermissionsParams defines parameters for GetSecurityPermissionSetsPermissionSetIdFieldPermissions.
type GetSecurityPermissionSetsPermissionSetIdFieldPermissionsParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetSecurityPermissionSetsPermissionSetIdObjectPermissionsParams defines parameters for GetSecurityPermissionSetsPermissionSetIdObjectPermissions.
type GetSecurityPermissionSetsPermissionSetIdObjectPermissionsParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetTerritoriesParams defines parameters for GetTerritories.
type GetTerritoriesParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Search Search term for label or api_name
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// ParentId Filter by parent territory ID
	ParentId *int `form:"parent_id,omitempty" json:"parent_id,omitempty"`
}

// GetTerritoriesTerritoryIdChildrenParams defines parameters for GetTerritoriesTerritoryIdChildren.
type GetTerritoriesTerritoryIdChildrenParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PutTerritoriesTerritoryIdParentJSONBody defines parameters for PutTerritoriesTerritoryIdParent.
type PutTerritoriesTerritoryIdParentJSONBody struct {
	// ParentId Parent territory ID (null to remove parent)
	ParentId *int `json:"parent_id"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Search Search term for name or email
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// ManagerId Filter by manager ID
	ManagerId *string `form:"manager_id,omitempty" json:"manager_id,omitempty"`
}

// PutUsersUserIdManagerJSONBody defines parameters for PutUsersUserIdManager.
type PutUsersUserIdManagerJSONBody struct {
	// ManagerId Manager's user ID (null to remove manager)
	ManagerId *string `json:"manager_id"`
}

// GetUsersUserIdSubordinatesParams defines parameters for GetUsersUserIdSubordinates.
type GetUsersUserIdSubordinatesParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostAuthForgotPasswordJSONRequestBody defines body for PostAuthForgotPassword for application/json ContentType.
type PostAuthForgotPasswordJSONRequestBody PostAuthForgotPasswordJSONBody

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody PostAuthLoginJSONBody

// PostAuthRefreshJSONRequestBody defines body for PostAuthRefresh for application/json ContentType.
type PostAuthRefreshJSONRequestBody PostAuthRefreshJSONBody

// PostAuthRegisterJSONRequestBody defines body for PostAuthRegister for application/json ContentType.
type PostAuthRegisterJSONRequestBody PostAuthRegisterJSONBody

// PostAuthResetPasswordJSONRequestBody defines body for PostAuthResetPassword for application/json ContentType.
type PostAuthResetPasswordJSONRequestBody PostAuthResetPasswordJSONBody

// PostGroupMembersJSONRequestBody defines body for PostGroupMembers for application/json ContentType.
type PostGroupMembersJSONRequestBody PostGroupMembersJSONBody

// PutGroupMembersMemberIdJSONRequestBody defines body for PutGroupMembersMemberId for application/json ContentType.
type PutGroupMembersMemberIdJSONRequestBody PutGroupMembersMemberIdJSONBody

// PostGroupsJSONRequestBody defines body for PostGroups for application/json ContentType.
type PostGroupsJSONRequestBody = CreateGroupRequest

// PutGroupsGroupIdJSONRequestBody defines body for PutGroupsGroupId for application/json ContentType.
type PutGroupsGroupIdJSONRequestBody = UpdateGroupRequest

// PostGroupsGroupIdMembersJSONRequestBody defines body for PostGroupsGroupIdMembers for application/json ContentType.
type PostGroupsGroupIdMembersJSONRequestBody PostGroupsGroupIdMembersJSONBody

// PostIdentitiesJSONRequestBody defines body for PostIdentities for application/json ContentType.
type PostIdentitiesJSONRequestBody = CreateIdentityRequest

// PutIdentitiesIdentityIdJSONRequestBody defines body for PutIdentitiesIdentityId for application/json ContentType.
type PutIdentitiesIdentityIdJSONRequestBody = UpdateIdentityRequest

// PostPrincipalsJSONRequestBody defines body for PostPrincipals for application/json ContentType.
type PostPrincipalsJSONRequestBody = CreatePrincipalRequest

// PutPrincipalsPrincipalIdJSONRequestBody defines body for PutPrincipalsPrincipalId for application/json ContentType.
type PutPrincipalsPrincipalIdJSONRequestBody = UpdatePrincipalRequest

// PutPrincipalsPrincipalIdStatusJSONRequestBody defines body for PutPrincipalsPrincipalIdStatus for application/json ContentType.
type PutPrincipalsPrincipalIdStatusJSONRequestBody PutPrincipalsPrincipalIdStatusJSONBody

// PostRolesJSONRequestBody defines body for PostRoles for application/json ContentType.
type PostRolesJSONRequestBody = CreateRoleRequest

// PutRolesRoleIdJSONRequestBody defines body for PutRolesRoleId for application/json ContentType.
type PutRolesRoleIdJSONRequestBody = UpdateRoleRequest

// PutRolesRoleIdParentJSONRequestBody defines body for PutRolesRoleIdParent for application/json ContentType.
type PutRolesRoleIdParentJSONRequestBody PutRolesRoleIdParentJSONBody

// PutSecurityFieldPermissionsPermissionIdJSONRequestBody defines body for PutSecurityFieldPermissionsPermissionId for application/json ContentType.
type PutSecurityFieldPermissionsPermissionIdJSONRequestBody = UpdateFieldPermissionRequest

// PutSecurityFieldsFieldIdJSONRequestBody defines body for PutSecurityFieldsFieldId for application/json ContentType.
type PutSecurityFieldsFieldIdJSONRequestBody = UpdateSecurityFieldRequest

// PutSecurityObjectPermissionsPermissionIdJSONRequestBody defines body for PutSecurityObjectPermissionsPermissionId for application/json ContentType.
type PutSecurityObjectPermissionsPermissionIdJSONRequestBody = UpdateObjectPermissionRequest

// PostSecurityObjectsJSONRequestBody defines body for PostSecurityObjects for application/json ContentType.
type PostSecurityObjectsJSONRequestBody = CreateSecurityObjectRequest

// PutSecurityObjectsObjectIdJSONRequestBody defines body for PutSecurityObjectsObjectId for application/json ContentType.
type PutSecurityObjectsObjectIdJSONRequestBody = UpdateSecurityObjectRequest

// PostSecurityObjectsObjectIdFieldsJSONRequestBody defines body for PostSecurityObjectsObjectIdFields for application/json ContentType.
type PostSecurityObjectsObjectIdFieldsJSONRequestBody = CreateSecurityFieldRequest

// PostSecurityPermissionSetsJSONRequestBody defines body for PostSecurityPermissionSets for application/json ContentType.
type PostSecurityPermissionSetsJSONRequestBody = CreatePermissionSetRequest

// PutSecurityPermissionSetsPermissionSetIdJSONRequestBody defines body for PutSecurityPermissionSetsPermissionSetId for application/json ContentType.
type PutSecurityPermissionSetsPermissionSetIdJSONRequestBody = UpdatePermissionSetRequest

// PostSecurityPermissionSetsPermissionSetIdFieldPermissionsJSONRequestBody defines body for PostSecurityPermissionSetsPermissionSetIdFieldPermissions for application/json ContentType.
type PostSecurityPermissionSetsPermissionSetIdFieldPermissionsJSONRequestBody = CreateFieldPermissionRequest

// PostSecurityPermissionSetsPermissionSetIdObjectPermissionsJSONRequestBody defines body for PostSecurityPermissionSetsPermissionSetIdObjectPermissions for application/json ContentType.
type PostSecurityPermissionSetsPermissionSetIdObjectPermissionsJSONRequestBody = CreateObjectPermissionRequest

// PostTerritoriesJSONRequestBody defines body for PostTerritories for application/json ContentType.
type PostTerritoriesJSONRequestBody = CreateTerritoryRequest

// PutTerritoriesTerritoryIdJSONRequestBody defines body for PutTerritoriesTerritoryId for application/json ContentType.
type PutTerritoriesTerritoryIdJSONRequestBody = UpdateTerritoryRequest

// PutTerritoriesTerritoryIdParentJSONRequestBody defines body for PutTerritoriesTerritoryIdParent for application/json ContentType.
type PutTerritoriesTerritoryIdParentJSONRequestBody PutTerritoriesTerritoryIdParentJSONBody

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = CreateUserRequest

// PutUsersUserIdJSONRequestBody defines body for PutUsersUserId for application/json ContentType.
type PutUsersUserIdJSONRequestBody = UpdateUserRequest

// PutUsersUserIdManagerJSONRequestBody defines body for PutUsersUserIdManager for application/json ContentType.
type PutUsersUserIdManagerJSONRequestBody PutUsersUserIdManagerJSONBody

// AsCreateFieldPermissionRequest0 returns the union data inside the CreateFieldPermissionRequest as a CreateFieldPermissionRequest0
func (t CreateFieldPermissionRequest) AsCreateFieldPermissionRequest0() (CreateFieldPermissionRequest0, error) {
	var body CreateFieldPermissionRequest0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateFieldPermissionRequest0 overwrites any union data inside the CreateFieldPermissionRequest as the provided CreateFieldPermissionRequest0
func (t *CreateFieldPermissionRequest) FromCreateFieldPermissionRequest0(v CreateFieldPermissionRequest0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateFieldPermissionRequest0 performs a merge with any union data inside the CreateFieldPermissionRequest, using the provided CreateFieldPermissionRequest0
func (t *CreateFieldPermissionRequest) MergeCreateFieldPermissionRequest0(v CreateFieldPermissionRequest0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateFieldPermissionRequest1 returns the union data inside the CreateFieldPermissionRequest as a CreateFieldPermissionRequest1
func (t CreateFieldPermissionRequest) AsCreateFieldPermissionRequest1() (CreateFieldPermissionRequest1, error) {
	var body CreateFieldPermissionRequest1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateFieldPermissionRequest1 overwrites any union data inside the CreateFieldPermissionRequest as the provided CreateFieldPermissionRequest1
func (t *CreateFieldPermissionRequest) FromCreateFieldPermissionRequest1(v CreateFieldPermissionRequest1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateFieldPermissionRequest1 performs a merge with any union data inside the CreateFieldPermissionRequest, using the provided CreateFieldPermissionRequest1
func (t *CreateFieldPermissionRequest) MergeCreateFieldPermissionRequest1(v CreateFieldPermissionRequest1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateFieldPermissionRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["field_id"], err = json.Marshal(t.FieldId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'field_id': %w", err)
	}

	if t.Permissions != nil {
		object["permissions"], err = json.Marshal(t.Permissions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'permissions': %w", err)
		}
	}

	if t.PermissionsDetail != nil {
		object["permissions_detail"], err = json.Marshal(t.PermissionsDetail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'permissions_detail': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *CreateFieldPermissionRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["field_id"]; found {
		err = json.Unmarshal(raw, &t.FieldId)
		if err != nil {
			return fmt.Errorf("error reading 'field_id': %w", err)
		}
	}

	if raw, found := object["permissions"]; found {
		err = json.Unmarshal(raw, &t.Permissions)
		if err != nil {
			return fmt.Errorf("error reading 'permissions': %w", err)
		}
	}

	if raw, found := object["permissions_detail"]; found {
		err = json.Unmarshal(raw, &t.PermissionsDetail)
		if err != nil {
			return fmt.Errorf("error reading 'permissions_detail': %w", err)
		}
	}

	return err
}

// AsCreateObjectPermissionRequest0 returns the union data inside the CreateObjectPermissionRequest as a CreateObjectPermissionRequest0
func (t CreateObjectPermissionRequest) AsCreateObjectPermissionRequest0() (CreateObjectPermissionRequest0, error) {
	var body CreateObjectPermissionRequest0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateObjectPermissionRequest0 overwrites any union data inside the CreateObjectPermissionRequest as the provided CreateObjectPermissionRequest0
func (t *CreateObjectPermissionRequest) FromCreateObjectPermissionRequest0(v CreateObjectPermissionRequest0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateObjectPermissionRequest0 performs a merge with any union data inside the CreateObjectPermissionRequest, using the provided CreateObjectPermissionRequest0
func (t *CreateObjectPermissionRequest) MergeCreateObjectPermissionRequest0(v CreateObjectPermissionRequest0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateObjectPermissionRequest1 returns the union data inside the CreateObjectPermissionRequest as a CreateObjectPermissionRequest1
func (t CreateObjectPermissionRequest) AsCreateObjectPermissionRequest1() (CreateObjectPermissionRequest1, error) {
	var body CreateObjectPermissionRequest1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateObjectPermissionRequest1 overwrites any union data inside the CreateObjectPermissionRequest as the provided CreateObjectPermissionRequest1
func (t *CreateObjectPermissionRequest) FromCreateObjectPermissionRequest1(v CreateObjectPermissionRequest1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateObjectPermissionRequest1 performs a merge with any union data inside the CreateObjectPermissionRequest, using the provided CreateObjectPermissionRequest1
func (t *CreateObjectPermissionRequest) MergeCreateObjectPermissionRequest1(v CreateObjectPermissionRequest1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateObjectPermissionRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["object_id"], err = json.Marshal(t.ObjectId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'object_id': %w", err)
	}

	if t.Permissions != nil {
		object["permissions"], err = json.Marshal(t.Permissions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'permissions': %w", err)
		}
	}

	if t.PermissionsDetail != nil {
		object["permissions_detail"], err = json.Marshal(t.PermissionsDetail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'permissions_detail': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *CreateObjectPermissionRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["object_id"]; found {
		err = json.Unmarshal(raw, &t.ObjectId)
		if err != nil {
			return fmt.Errorf("error reading 'object_id': %w", err)
		}
	}

	if raw, found := object["permissions"]; found {
		err = json.Unmarshal(raw, &t.Permissions)
		if err != nil {
			return fmt.Errorf("error reading 'permissions': %w", err)
		}
	}

	if raw, found := object["permissions_detail"]; found {
		err = json.Unmarshal(raw, &t.PermissionsDetail)
		if err != nil {
			return fmt.Errorf("error reading 'permissions_detail': %w", err)
		}
	}

	return err
}

// AsUpdateFieldPermissionRequest0 returns the union data inside the UpdateFieldPermissionRequest as a UpdateFieldPermissionRequest0
func (t UpdateFieldPermissionRequest) AsUpdateFieldPermissionRequest0() (UpdateFieldPermissionRequest0, error) {
	var body UpdateFieldPermissionRequest0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateFieldPermissionRequest0 overwrites any union data inside the UpdateFieldPermissionRequest as the provided UpdateFieldPermissionRequest0
func (t *UpdateFieldPermissionRequest) FromUpdateFieldPermissionRequest0(v UpdateFieldPermissionRequest0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateFieldPermissionRequest0 performs a merge with any union data inside the UpdateFieldPermissionRequest, using the provided UpdateFieldPermissionRequest0
func (t *UpdateFieldPermissionRequest) MergeUpdateFieldPermissionRequest0(v UpdateFieldPermissionRequest0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateFieldPermissionRequest1 returns the union data inside the UpdateFieldPermissionRequest as a UpdateFieldPermissionRequest1
func (t UpdateFieldPermissionRequest) AsUpdateFieldPermissionRequest1() (UpdateFieldPermissionRequest1, error) {
	var body UpdateFieldPermissionRequest1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateFieldPermissionRequest1 overwrites any union data inside the UpdateFieldPermissionRequest as the provided UpdateFieldPermissionRequest1
func (t *UpdateFieldPermissionRequest) FromUpdateFieldPermissionRequest1(v UpdateFieldPermissionRequest1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateFieldPermissionRequest1 performs a merge with any union data inside the UpdateFieldPermissionRequest, using the provided UpdateFieldPermissionRequest1
func (t *UpdateFieldPermissionRequest) MergeUpdateFieldPermissionRequest1(v UpdateFieldPermissionRequest1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpdateFieldPermissionRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Permissions != nil {
		object["permissions"], err = json.Marshal(t.Permissions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'permissions': %w", err)
		}
	}

	if t.PermissionsDetail != nil {
		object["permissions_detail"], err = json.Marshal(t.PermissionsDetail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'permissions_detail': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *UpdateFieldPermissionRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["permissions"]; found {
		err = json.Unmarshal(raw, &t.Permissions)
		if err != nil {
			return fmt.Errorf("error reading 'permissions': %w", err)
		}
	}

	if raw, found := object["permissions_detail"]; found {
		err = json.Unmarshal(raw, &t.PermissionsDetail)
		if err != nil {
			return fmt.Errorf("error reading 'permissions_detail': %w", err)
		}
	}

	return err
}

// AsUpdateObjectPermissionRequest0 returns the union data inside the UpdateObjectPermissionRequest as a UpdateObjectPermissionRequest0
func (t UpdateObjectPermissionRequest) AsUpdateObjectPermissionRequest0() (UpdateObjectPermissionRequest0, error) {
	var body UpdateObjectPermissionRequest0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateObjectPermissionRequest0 overwrites any union data inside the UpdateObjectPermissionRequest as the provided UpdateObjectPermissionRequest0
func (t *UpdateObjectPermissionRequest) FromUpdateObjectPermissionRequest0(v UpdateObjectPermissionRequest0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateObjectPermissionRequest0 performs a merge with any union data inside the UpdateObjectPermissionRequest, using the provided UpdateObjectPermissionRequest0
func (t *UpdateObjectPermissionRequest) MergeUpdateObjectPermissionRequest0(v UpdateObjectPermissionRequest0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateObjectPermissionRequest1 returns the union data inside the UpdateObjectPermissionRequest as a UpdateObjectPermissionRequest1
func (t UpdateObjectPermissionRequest) AsUpdateObjectPermissionRequest1() (UpdateObjectPermissionRequest1, error) {
	var body UpdateObjectPermissionRequest1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateObjectPermissionRequest1 overwrites any union data inside the UpdateObjectPermissionRequest as the provided UpdateObjectPermissionRequest1
func (t *UpdateObjectPermissionRequest) FromUpdateObjectPermissionRequest1(v UpdateObjectPermissionRequest1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateObjectPermissionRequest1 performs a merge with any union data inside the UpdateObjectPermissionRequest, using the provided UpdateObjectPermissionRequest1
func (t *UpdateObjectPermissionRequest) MergeUpdateObjectPermissionRequest1(v UpdateObjectPermissionRequest1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpdateObjectPermissionRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Permissions != nil {
		object["permissions"], err = json.Marshal(t.Permissions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'permissions': %w", err)
		}
	}

	if t.PermissionsDetail != nil {
		object["permissions_detail"], err = json.Marshal(t.PermissionsDetail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'permissions_detail': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *UpdateObjectPermissionRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["permissions"]; found {
		err = json.Unmarshal(raw, &t.Permissions)
		if err != nil {
			return fmt.Errorf("error reading 'permissions': %w", err)
		}
	}

	if raw, found := object["permissions_detail"]; found {
		err = json.Unmarshal(raw, &t.PermissionsDetail)
		if err != nil {
			return fmt.Errorf("error reading 'permissions_detail': %w", err)
		}
	}

	return err
}
