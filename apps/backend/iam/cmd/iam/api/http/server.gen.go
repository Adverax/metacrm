// Package httpApi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package httpApi

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Request password reset
	// (POST /auth/forgot-password)
	PostAuthForgotPassword(c *gin.Context)
	// User login
	// (POST /auth/login)
	PostAuthLogin(c *gin.Context)
	// User logout
	// (POST /auth/logout)
	PostAuthLogout(c *gin.Context)
	// Get current user info
	// (GET /auth/me)
	GetAuthMe(c *gin.Context)
	// Refresh token
	// (POST /auth/refresh)
	PostAuthRefresh(c *gin.Context)
	// Register new user
	// (POST /auth/register)
	PostAuthRegister(c *gin.Context)
	// Reset password
	// (POST /auth/reset-password)
	PostAuthResetPassword(c *gin.Context)
	// Cleanup expired cache
	// (POST /cache/cleanup)
	PostCacheCleanup(c *gin.Context)
	// Invalidate group cache
	// (POST /cache/invalidate/group/{group_id})
	PostCacheInvalidateGroupGroupId(c *gin.Context, groupId int)
	// Invalidate object cache
	// (POST /cache/invalidate/object/{object_id})
	PostCacheInvalidateObjectObjectId(c *gin.Context, objectId int)
	// Invalidate user cache
	// (POST /cache/invalidate/user/{user_id})
	PostCacheInvalidateUserUserId(c *gin.Context, userId string)
	// Get cache statistics
	// (GET /cache/stats)
	GetCacheStats(c *gin.Context, params GetCacheStatsParams)
	// Get list of group memberships
	// (GET /group-members)
	GetGroupMembers(c *gin.Context, params GetGroupMembersParams)
	// Create group membership
	// (POST /group-members)
	PostGroupMembers(c *gin.Context)
	// Delete group membership
	// (DELETE /group-members/{member_id})
	DeleteGroupMembersMemberId(c *gin.Context, memberId string)
	// Get group membership by ID
	// (GET /group-members/{member_id})
	GetGroupMembersMemberId(c *gin.Context, memberId string)
	// Update group membership
	// (PUT /group-members/{member_id})
	PutGroupMembersMemberId(c *gin.Context, memberId string)
	// Get list of groups
	// (GET /groups)
	GetGroups(c *gin.Context, params GetGroupsParams)
	// Create a new group
	// (POST /groups)
	PostGroups(c *gin.Context)
	// Delete group
	// (DELETE /groups/{group_id})
	DeleteGroupsGroupId(c *gin.Context, groupId int)
	// Get group by ID
	// (GET /groups/{group_id})
	GetGroupsGroupId(c *gin.Context, groupId int)
	// Update group
	// (PUT /groups/{group_id})
	PutGroupsGroupId(c *gin.Context, groupId int)
	// Get group members
	// (GET /groups/{group_id}/members)
	GetGroupsGroupIdMembers(c *gin.Context, groupId int, params GetGroupsGroupIdMembersParams)
	// Add member to group
	// (POST /groups/{group_id}/members)
	PostGroupsGroupIdMembers(c *gin.Context, groupId int)
	// Remove member from group
	// (DELETE /groups/{group_id}/members/{member_id})
	DeleteGroupsGroupIdMembersMemberId(c *gin.Context, groupId int, memberId string)
	// Get list of identities
	// (GET /identities)
	GetIdentities(c *gin.Context, params GetIdentitiesParams)
	// Create a new identity
	// (POST /identities)
	PostIdentities(c *gin.Context)
	// Delete identity
	// (DELETE /identities/{identity_id})
	DeleteIdentitiesIdentityId(c *gin.Context, identityId int)
	// Get identity by ID
	// (GET /identities/{identity_id})
	GetIdentitiesIdentityId(c *gin.Context, identityId int)
	// Update identity
	// (PUT /identities/{identity_id})
	PutIdentitiesIdentityId(c *gin.Context, identityId int)
	// Check user permissions
	// (GET /permissions/check)
	GetPermissionsCheck(c *gin.Context, params GetPermissionsCheckParams)
	// Get user field permissions
	// (GET /permissions/user/{user_id}/fields)
	GetPermissionsUserUserIdFields(c *gin.Context, userId string, params GetPermissionsUserUserIdFieldsParams)
	// Get user object permissions
	// (GET /permissions/user/{user_id}/objects)
	GetPermissionsUserUserIdObjects(c *gin.Context, userId string, params GetPermissionsUserUserIdObjectsParams)
	// Get user row permissions
	// (GET /permissions/user/{user_id}/rows)
	GetPermissionsUserUserIdRows(c *gin.Context, userId string, params GetPermissionsUserUserIdRowsParams)
	// Get list of principals
	// (GET /principals)
	GetPrincipals(c *gin.Context, params GetPrincipalsParams)
	// Create a new principal
	// (POST /principals)
	PostPrincipals(c *gin.Context)
	// Get principal by ID
	// (GET /principals/{principal_id})
	GetPrincipalsPrincipalId(c *gin.Context, principalId int)
	// Update principal
	// (PUT /principals/{principal_id})
	PutPrincipalsPrincipalId(c *gin.Context, principalId int)
	// Get principal identities
	// (GET /principals/{principal_id}/identities)
	GetPrincipalsPrincipalIdIdentities(c *gin.Context, principalId int, params GetPrincipalsPrincipalIdIdentitiesParams)
	// Change principal status
	// (PUT /principals/{principal_id}/status)
	PutPrincipalsPrincipalIdStatus(c *gin.Context, principalId int)
	// Get list of roles
	// (GET /roles)
	GetRoles(c *gin.Context, params GetRolesParams)
	// Create a new role
	// (POST /roles)
	PostRoles(c *gin.Context)
	// Delete role
	// (DELETE /roles/{role_id})
	DeleteRolesRoleId(c *gin.Context, roleId int)
	// Get role by ID
	// (GET /roles/{role_id})
	GetRolesRoleId(c *gin.Context, roleId int)
	// Update role
	// (PUT /roles/{role_id})
	PutRolesRoleId(c *gin.Context, roleId int)
	// Get child roles
	// (GET /roles/{role_id}/children)
	GetRolesRoleIdChildren(c *gin.Context, roleId int, params GetRolesRoleIdChildrenParams)
	// Set parent role
	// (PUT /roles/{role_id}/parent)
	PutRolesRoleIdParent(c *gin.Context, roleId int)
	// Delete field permissions
	// (DELETE /security/field-permissions/{permission_id})
	DeleteSecurityFieldPermissionsPermissionId(c *gin.Context, permissionId int)
	// Update field permissions
	// (PUT /security/field-permissions/{permission_id})
	PutSecurityFieldPermissionsPermissionId(c *gin.Context, permissionId int)
	// Delete security field
	// (DELETE /security/fields/{field_id})
	DeleteSecurityFieldsFieldId(c *gin.Context, fieldId int)
	// Get security field by ID
	// (GET /security/fields/{field_id})
	GetSecurityFieldsFieldId(c *gin.Context, fieldId int)
	// Update security field
	// (PUT /security/fields/{field_id})
	PutSecurityFieldsFieldId(c *gin.Context, fieldId int)
	// Delete object permissions
	// (DELETE /security/object-permissions/{permission_id})
	DeleteSecurityObjectPermissionsPermissionId(c *gin.Context, permissionId int)
	// Update object permissions
	// (PUT /security/object-permissions/{permission_id})
	PutSecurityObjectPermissionsPermissionId(c *gin.Context, permissionId int)
	// Get list of security objects
	// (GET /security/objects)
	GetSecurityObjects(c *gin.Context, params GetSecurityObjectsParams)
	// Create a new security object
	// (POST /security/objects)
	PostSecurityObjects(c *gin.Context)
	// Delete security object
	// (DELETE /security/objects/{object_id})
	DeleteSecurityObjectsObjectId(c *gin.Context, objectId int)
	// Get security object by ID
	// (GET /security/objects/{object_id})
	GetSecurityObjectsObjectId(c *gin.Context, objectId int)
	// Update security object
	// (PUT /security/objects/{object_id})
	PutSecurityObjectsObjectId(c *gin.Context, objectId int)
	// Get security object fields
	// (GET /security/objects/{object_id}/fields)
	GetSecurityObjectsObjectIdFields(c *gin.Context, objectId int, params GetSecurityObjectsObjectIdFieldsParams)
	// Create a new security field
	// (POST /security/objects/{object_id}/fields)
	PostSecurityObjectsObjectIdFields(c *gin.Context, objectId int)
	// Get list of permission sets
	// (GET /security/permission-sets)
	GetSecurityPermissionSets(c *gin.Context, params GetSecurityPermissionSetsParams)
	// Create a new permission set
	// (POST /security/permission-sets)
	PostSecurityPermissionSets(c *gin.Context)
	// Delete permission set
	// (DELETE /security/permission-sets/{permission_set_id})
	DeleteSecurityPermissionSetsPermissionSetId(c *gin.Context, permissionSetId int)
	// Get permission set by ID
	// (GET /security/permission-sets/{permission_set_id})
	GetSecurityPermissionSetsPermissionSetId(c *gin.Context, permissionSetId int)
	// Update permission set
	// (PUT /security/permission-sets/{permission_set_id})
	PutSecurityPermissionSetsPermissionSetId(c *gin.Context, permissionSetId int)
	// Get permission set field permissions
	// (GET /security/permission-sets/{permission_set_id}/field-permissions)
	GetSecurityPermissionSetsPermissionSetIdFieldPermissions(c *gin.Context, permissionSetId int, params GetSecurityPermissionSetsPermissionSetIdFieldPermissionsParams)
	// Assign field permissions to permission set
	// (POST /security/permission-sets/{permission_set_id}/field-permissions)
	PostSecurityPermissionSetsPermissionSetIdFieldPermissions(c *gin.Context, permissionSetId int)
	// Get permission set object permissions
	// (GET /security/permission-sets/{permission_set_id}/object-permissions)
	GetSecurityPermissionSetsPermissionSetIdObjectPermissions(c *gin.Context, permissionSetId int, params GetSecurityPermissionSetsPermissionSetIdObjectPermissionsParams)
	// Assign object permissions to permission set
	// (POST /security/permission-sets/{permission_set_id}/object-permissions)
	PostSecurityPermissionSetsPermissionSetIdObjectPermissions(c *gin.Context, permissionSetId int)
	// Get list of territories
	// (GET /territories)
	GetTerritories(c *gin.Context, params GetTerritoriesParams)
	// Create a new territory
	// (POST /territories)
	PostTerritories(c *gin.Context)
	// Delete territory
	// (DELETE /territories/{territory_id})
	DeleteTerritoriesTerritoryId(c *gin.Context, territoryId int)
	// Get territory by ID
	// (GET /territories/{territory_id})
	GetTerritoriesTerritoryId(c *gin.Context, territoryId int)
	// Update territory
	// (PUT /territories/{territory_id})
	PutTerritoriesTerritoryId(c *gin.Context, territoryId int)
	// Get child territories
	// (GET /territories/{territory_id}/children)
	GetTerritoriesTerritoryIdChildren(c *gin.Context, territoryId int, params GetTerritoriesTerritoryIdChildrenParams)
	// Set parent territory
	// (PUT /territories/{territory_id}/parent)
	PutTerritoriesTerritoryIdParent(c *gin.Context, territoryId int)
	// Get list of users
	// (GET /users)
	GetUsers(c *gin.Context, params GetUsersParams)
	// Create a new user
	// (POST /users)
	PostUsers(c *gin.Context)
	// Delete user
	// (DELETE /users/{user_id})
	DeleteUsersUserId(c *gin.Context, userId string)
	// Get user by ID
	// (GET /users/{user_id})
	GetUsersUserId(c *gin.Context, userId string)
	// Update user
	// (PUT /users/{user_id})
	PutUsersUserId(c *gin.Context, userId string)
	// Get user's manager
	// (GET /users/{user_id}/manager)
	GetUsersUserIdManager(c *gin.Context, userId string)
	// Assign manager to user
	// (PUT /users/{user_id}/manager)
	PutUsersUserIdManager(c *gin.Context, userId string)
	// Get user's subordinates
	// (GET /users/{user_id}/subordinates)
	GetUsersUserIdSubordinates(c *gin.Context, userId string, params GetUsersUserIdSubordinatesParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostAuthForgotPassword operation middleware
func (siw *ServerInterfaceWrapper) PostAuthForgotPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthForgotPassword(c)
}

// PostAuthLogin operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthLogin(c)
}

// PostAuthLogout operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogout(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthLogout(c)
}

// GetAuthMe operation middleware
func (siw *ServerInterfaceWrapper) GetAuthMe(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAuthMe(c)
}

// PostAuthRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRefresh(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthRefresh(c)
}

// PostAuthRegister operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRegister(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthRegister(c)
}

// PostAuthResetPassword operation middleware
func (siw *ServerInterfaceWrapper) PostAuthResetPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthResetPassword(c)
}

// PostCacheCleanup operation middleware
func (siw *ServerInterfaceWrapper) PostCacheCleanup(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCacheCleanup(c)
}

// PostCacheInvalidateGroupGroupId operation middleware
func (siw *ServerInterfaceWrapper) PostCacheInvalidateGroupGroupId(c *gin.Context) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupId int

	err = runtime.BindStyledParameterWithOptions("simple", "group_id", c.Param("group_id"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter group_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCacheInvalidateGroupGroupId(c, groupId)
}

// PostCacheInvalidateObjectObjectId operation middleware
func (siw *ServerInterfaceWrapper) PostCacheInvalidateObjectObjectId(c *gin.Context) {

	var err error

	// ------------- Path parameter "object_id" -------------
	var objectId int

	err = runtime.BindStyledParameterWithOptions("simple", "object_id", c.Param("object_id"), &objectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter object_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCacheInvalidateObjectObjectId(c, objectId)
}

// PostCacheInvalidateUserUserId operation middleware
func (siw *ServerInterfaceWrapper) PostCacheInvalidateUserUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCacheInvalidateUserUserId(c, userId)
}

// GetCacheStats operation middleware
func (siw *ServerInterfaceWrapper) GetCacheStats(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCacheStatsParams

	// ------------- Optional query parameter "tenant_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant_id", c.Request.URL.Query(), &params.TenantId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenant_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCacheStats(c, params)
}

// GetGroupMembers operation middleware
func (siw *ServerInterfaceWrapper) GetGroupMembers(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupMembersParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "group_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "group_id", c.Request.URL.Query(), &params.GroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter group_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "member_user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "member_user_id", c.Request.URL.Query(), &params.MemberUserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter member_user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "member_group_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "member_group_id", c.Request.URL.Query(), &params.MemberGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter member_group_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupMembers(c, params)
}

// PostGroupMembers operation middleware
func (siw *ServerInterfaceWrapper) PostGroupMembers(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostGroupMembers(c)
}

// DeleteGroupMembersMemberId operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroupMembersMemberId(c *gin.Context) {

	var err error

	// ------------- Path parameter "member_id" -------------
	var memberId string

	err = runtime.BindStyledParameterWithOptions("simple", "member_id", c.Param("member_id"), &memberId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter member_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteGroupMembersMemberId(c, memberId)
}

// GetGroupMembersMemberId operation middleware
func (siw *ServerInterfaceWrapper) GetGroupMembersMemberId(c *gin.Context) {

	var err error

	// ------------- Path parameter "member_id" -------------
	var memberId string

	err = runtime.BindStyledParameterWithOptions("simple", "member_id", c.Param("member_id"), &memberId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter member_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupMembersMemberId(c, memberId)
}

// PutGroupMembersMemberId operation middleware
func (siw *ServerInterfaceWrapper) PutGroupMembersMemberId(c *gin.Context) {

	var err error

	// ------------- Path parameter "member_id" -------------
	var memberId string

	err = runtime.BindStyledParameterWithOptions("simple", "member_id", c.Param("member_id"), &memberId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter member_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutGroupMembersMemberId(c, memberId)
}

// GetGroups operation middleware
func (siw *ServerInterfaceWrapper) GetGroups(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", c.Request.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter search: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroups(c, params)
}

// PostGroups operation middleware
func (siw *ServerInterfaceWrapper) PostGroups(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostGroups(c)
}

// DeleteGroupsGroupId operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroupsGroupId(c *gin.Context) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupId int

	err = runtime.BindStyledParameterWithOptions("simple", "group_id", c.Param("group_id"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter group_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteGroupsGroupId(c, groupId)
}

// GetGroupsGroupId operation middleware
func (siw *ServerInterfaceWrapper) GetGroupsGroupId(c *gin.Context) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupId int

	err = runtime.BindStyledParameterWithOptions("simple", "group_id", c.Param("group_id"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter group_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupsGroupId(c, groupId)
}

// PutGroupsGroupId operation middleware
func (siw *ServerInterfaceWrapper) PutGroupsGroupId(c *gin.Context) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupId int

	err = runtime.BindStyledParameterWithOptions("simple", "group_id", c.Param("group_id"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter group_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutGroupsGroupId(c, groupId)
}

// GetGroupsGroupIdMembers operation middleware
func (siw *ServerInterfaceWrapper) GetGroupsGroupIdMembers(c *gin.Context) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupId int

	err = runtime.BindStyledParameterWithOptions("simple", "group_id", c.Param("group_id"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter group_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupsGroupIdMembersParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupsGroupIdMembers(c, groupId, params)
}

// PostGroupsGroupIdMembers operation middleware
func (siw *ServerInterfaceWrapper) PostGroupsGroupIdMembers(c *gin.Context) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupId int

	err = runtime.BindStyledParameterWithOptions("simple", "group_id", c.Param("group_id"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter group_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostGroupsGroupIdMembers(c, groupId)
}

// DeleteGroupsGroupIdMembersMemberId operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroupsGroupIdMembersMemberId(c *gin.Context) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupId int

	err = runtime.BindStyledParameterWithOptions("simple", "group_id", c.Param("group_id"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter group_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "member_id" -------------
	var memberId string

	err = runtime.BindStyledParameterWithOptions("simple", "member_id", c.Param("member_id"), &memberId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter member_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteGroupsGroupIdMembersMemberId(c, groupId, memberId)
}

// GetIdentities operation middleware
func (siw *ServerInterfaceWrapper) GetIdentities(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdentitiesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "principal_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "principal_id", c.Request.URL.Query(), &params.PrincipalId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter principal_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "kind" -------------

	err = runtime.BindQueryParameter("form", true, false, "kind", c.Request.URL.Query(), &params.Kind)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter kind: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "idp" -------------

	err = runtime.BindQueryParameter("form", true, false, "idp", c.Request.URL.Query(), &params.Idp)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter idp: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetIdentities(c, params)
}

// PostIdentities operation middleware
func (siw *ServerInterfaceWrapper) PostIdentities(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostIdentities(c)
}

// DeleteIdentitiesIdentityId operation middleware
func (siw *ServerInterfaceWrapper) DeleteIdentitiesIdentityId(c *gin.Context) {

	var err error

	// ------------- Path parameter "identity_id" -------------
	var identityId int

	err = runtime.BindStyledParameterWithOptions("simple", "identity_id", c.Param("identity_id"), &identityId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter identity_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIdentitiesIdentityId(c, identityId)
}

// GetIdentitiesIdentityId operation middleware
func (siw *ServerInterfaceWrapper) GetIdentitiesIdentityId(c *gin.Context) {

	var err error

	// ------------- Path parameter "identity_id" -------------
	var identityId int

	err = runtime.BindStyledParameterWithOptions("simple", "identity_id", c.Param("identity_id"), &identityId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter identity_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetIdentitiesIdentityId(c, identityId)
}

// PutIdentitiesIdentityId operation middleware
func (siw *ServerInterfaceWrapper) PutIdentitiesIdentityId(c *gin.Context) {

	var err error

	// ------------- Path parameter "identity_id" -------------
	var identityId int

	err = runtime.BindStyledParameterWithOptions("simple", "identity_id", c.Param("identity_id"), &identityId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter identity_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutIdentitiesIdentityId(c, identityId)
}

// GetPermissionsCheck operation middleware
func (siw *ServerInterfaceWrapper) GetPermissionsCheck(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPermissionsCheckParams

	// ------------- Required query parameter "user_id" -------------

	if paramValue := c.Query("user_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument user_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "object_id" -------------

	if paramValue := c.Query("object_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument object_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "object_id", c.Request.URL.Query(), &params.ObjectId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter object_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "field_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "field_id", c.Request.URL.Query(), &params.FieldId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter field_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "row_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "row_id", c.Request.URL.Query(), &params.RowId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter row_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "permission" -------------

	if paramValue := c.Query("permission"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument permission is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "permission", c.Request.URL.Query(), &params.Permission)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter permission: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPermissionsCheck(c, params)
}

// GetPermissionsUserUserIdFields operation middleware
func (siw *ServerInterfaceWrapper) GetPermissionsUserUserIdFields(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPermissionsUserUserIdFieldsParams

	// ------------- Optional query parameter "object_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "object_id", c.Request.URL.Query(), &params.ObjectId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter object_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPermissionsUserUserIdFields(c, userId, params)
}

// GetPermissionsUserUserIdObjects operation middleware
func (siw *ServerInterfaceWrapper) GetPermissionsUserUserIdObjects(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPermissionsUserUserIdObjectsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPermissionsUserUserIdObjects(c, userId, params)
}

// GetPermissionsUserUserIdRows operation middleware
func (siw *ServerInterfaceWrapper) GetPermissionsUserUserIdRows(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPermissionsUserUserIdRowsParams

	// ------------- Optional query parameter "object_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "object_id", c.Request.URL.Query(), &params.ObjectId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter object_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPermissionsUserUserIdRows(c, userId, params)
}

// GetPrincipals operation middleware
func (siw *ServerInterfaceWrapper) GetPrincipals(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPrincipalsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "kind" -------------

	err = runtime.BindQueryParameter("form", true, false, "kind", c.Request.URL.Query(), &params.Kind)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter kind: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "is_active" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_active", c.Request.URL.Query(), &params.IsActive)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter is_active: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "subject_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject_id", c.Request.URL.Query(), &params.SubjectId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subject_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPrincipals(c, params)
}

// PostPrincipals operation middleware
func (siw *ServerInterfaceWrapper) PostPrincipals(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostPrincipals(c)
}

// GetPrincipalsPrincipalId operation middleware
func (siw *ServerInterfaceWrapper) GetPrincipalsPrincipalId(c *gin.Context) {

	var err error

	// ------------- Path parameter "principal_id" -------------
	var principalId int

	err = runtime.BindStyledParameterWithOptions("simple", "principal_id", c.Param("principal_id"), &principalId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter principal_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPrincipalsPrincipalId(c, principalId)
}

// PutPrincipalsPrincipalId operation middleware
func (siw *ServerInterfaceWrapper) PutPrincipalsPrincipalId(c *gin.Context) {

	var err error

	// ------------- Path parameter "principal_id" -------------
	var principalId int

	err = runtime.BindStyledParameterWithOptions("simple", "principal_id", c.Param("principal_id"), &principalId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter principal_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutPrincipalsPrincipalId(c, principalId)
}

// GetPrincipalsPrincipalIdIdentities operation middleware
func (siw *ServerInterfaceWrapper) GetPrincipalsPrincipalIdIdentities(c *gin.Context) {

	var err error

	// ------------- Path parameter "principal_id" -------------
	var principalId int

	err = runtime.BindStyledParameterWithOptions("simple", "principal_id", c.Param("principal_id"), &principalId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter principal_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPrincipalsPrincipalIdIdentitiesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPrincipalsPrincipalIdIdentities(c, principalId, params)
}

// PutPrincipalsPrincipalIdStatus operation middleware
func (siw *ServerInterfaceWrapper) PutPrincipalsPrincipalIdStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "principal_id" -------------
	var principalId int

	err = runtime.BindStyledParameterWithOptions("simple", "principal_id", c.Param("principal_id"), &principalId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter principal_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutPrincipalsPrincipalIdStatus(c, principalId)
}

// GetRoles operation middleware
func (siw *ServerInterfaceWrapper) GetRoles(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRolesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", c.Request.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter search: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "parent_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "parent_id", c.Request.URL.Query(), &params.ParentId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter parent_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRoles(c, params)
}

// PostRoles operation middleware
func (siw *ServerInterfaceWrapper) PostRoles(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostRoles(c)
}

// DeleteRolesRoleId operation middleware
func (siw *ServerInterfaceWrapper) DeleteRolesRoleId(c *gin.Context) {

	var err error

	// ------------- Path parameter "role_id" -------------
	var roleId int

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", c.Param("role_id"), &roleId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter role_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRolesRoleId(c, roleId)
}

// GetRolesRoleId operation middleware
func (siw *ServerInterfaceWrapper) GetRolesRoleId(c *gin.Context) {

	var err error

	// ------------- Path parameter "role_id" -------------
	var roleId int

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", c.Param("role_id"), &roleId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter role_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRolesRoleId(c, roleId)
}

// PutRolesRoleId operation middleware
func (siw *ServerInterfaceWrapper) PutRolesRoleId(c *gin.Context) {

	var err error

	// ------------- Path parameter "role_id" -------------
	var roleId int

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", c.Param("role_id"), &roleId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter role_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutRolesRoleId(c, roleId)
}

// GetRolesRoleIdChildren operation middleware
func (siw *ServerInterfaceWrapper) GetRolesRoleIdChildren(c *gin.Context) {

	var err error

	// ------------- Path parameter "role_id" -------------
	var roleId int

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", c.Param("role_id"), &roleId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter role_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRolesRoleIdChildrenParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRolesRoleIdChildren(c, roleId, params)
}

// PutRolesRoleIdParent operation middleware
func (siw *ServerInterfaceWrapper) PutRolesRoleIdParent(c *gin.Context) {

	var err error

	// ------------- Path parameter "role_id" -------------
	var roleId int

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", c.Param("role_id"), &roleId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter role_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutRolesRoleIdParent(c, roleId)
}

// DeleteSecurityFieldPermissionsPermissionId operation middleware
func (siw *ServerInterfaceWrapper) DeleteSecurityFieldPermissionsPermissionId(c *gin.Context) {

	var err error

	// ------------- Path parameter "permission_id" -------------
	var permissionId int

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", c.Param("permission_id"), &permissionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter permission_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteSecurityFieldPermissionsPermissionId(c, permissionId)
}

// PutSecurityFieldPermissionsPermissionId operation middleware
func (siw *ServerInterfaceWrapper) PutSecurityFieldPermissionsPermissionId(c *gin.Context) {

	var err error

	// ------------- Path parameter "permission_id" -------------
	var permissionId int

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", c.Param("permission_id"), &permissionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter permission_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutSecurityFieldPermissionsPermissionId(c, permissionId)
}

// DeleteSecurityFieldsFieldId operation middleware
func (siw *ServerInterfaceWrapper) DeleteSecurityFieldsFieldId(c *gin.Context) {

	var err error

	// ------------- Path parameter "field_id" -------------
	var fieldId int

	err = runtime.BindStyledParameterWithOptions("simple", "field_id", c.Param("field_id"), &fieldId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter field_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteSecurityFieldsFieldId(c, fieldId)
}

// GetSecurityFieldsFieldId operation middleware
func (siw *ServerInterfaceWrapper) GetSecurityFieldsFieldId(c *gin.Context) {

	var err error

	// ------------- Path parameter "field_id" -------------
	var fieldId int

	err = runtime.BindStyledParameterWithOptions("simple", "field_id", c.Param("field_id"), &fieldId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter field_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSecurityFieldsFieldId(c, fieldId)
}

// PutSecurityFieldsFieldId operation middleware
func (siw *ServerInterfaceWrapper) PutSecurityFieldsFieldId(c *gin.Context) {

	var err error

	// ------------- Path parameter "field_id" -------------
	var fieldId int

	err = runtime.BindStyledParameterWithOptions("simple", "field_id", c.Param("field_id"), &fieldId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter field_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutSecurityFieldsFieldId(c, fieldId)
}

// DeleteSecurityObjectPermissionsPermissionId operation middleware
func (siw *ServerInterfaceWrapper) DeleteSecurityObjectPermissionsPermissionId(c *gin.Context) {

	var err error

	// ------------- Path parameter "permission_id" -------------
	var permissionId int

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", c.Param("permission_id"), &permissionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter permission_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteSecurityObjectPermissionsPermissionId(c, permissionId)
}

// PutSecurityObjectPermissionsPermissionId operation middleware
func (siw *ServerInterfaceWrapper) PutSecurityObjectPermissionsPermissionId(c *gin.Context) {

	var err error

	// ------------- Path parameter "permission_id" -------------
	var permissionId int

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", c.Param("permission_id"), &permissionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter permission_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutSecurityObjectPermissionsPermissionId(c, permissionId)
}

// GetSecurityObjects operation middleware
func (siw *ServerInterfaceWrapper) GetSecurityObjects(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSecurityObjectsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", c.Request.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter search: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSecurityObjects(c, params)
}

// PostSecurityObjects operation middleware
func (siw *ServerInterfaceWrapper) PostSecurityObjects(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSecurityObjects(c)
}

// DeleteSecurityObjectsObjectId operation middleware
func (siw *ServerInterfaceWrapper) DeleteSecurityObjectsObjectId(c *gin.Context) {

	var err error

	// ------------- Path parameter "object_id" -------------
	var objectId int

	err = runtime.BindStyledParameterWithOptions("simple", "object_id", c.Param("object_id"), &objectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter object_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteSecurityObjectsObjectId(c, objectId)
}

// GetSecurityObjectsObjectId operation middleware
func (siw *ServerInterfaceWrapper) GetSecurityObjectsObjectId(c *gin.Context) {

	var err error

	// ------------- Path parameter "object_id" -------------
	var objectId int

	err = runtime.BindStyledParameterWithOptions("simple", "object_id", c.Param("object_id"), &objectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter object_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSecurityObjectsObjectId(c, objectId)
}

// PutSecurityObjectsObjectId operation middleware
func (siw *ServerInterfaceWrapper) PutSecurityObjectsObjectId(c *gin.Context) {

	var err error

	// ------------- Path parameter "object_id" -------------
	var objectId int

	err = runtime.BindStyledParameterWithOptions("simple", "object_id", c.Param("object_id"), &objectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter object_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutSecurityObjectsObjectId(c, objectId)
}

// GetSecurityObjectsObjectIdFields operation middleware
func (siw *ServerInterfaceWrapper) GetSecurityObjectsObjectIdFields(c *gin.Context) {

	var err error

	// ------------- Path parameter "object_id" -------------
	var objectId int

	err = runtime.BindStyledParameterWithOptions("simple", "object_id", c.Param("object_id"), &objectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter object_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSecurityObjectsObjectIdFieldsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSecurityObjectsObjectIdFields(c, objectId, params)
}

// PostSecurityObjectsObjectIdFields operation middleware
func (siw *ServerInterfaceWrapper) PostSecurityObjectsObjectIdFields(c *gin.Context) {

	var err error

	// ------------- Path parameter "object_id" -------------
	var objectId int

	err = runtime.BindStyledParameterWithOptions("simple", "object_id", c.Param("object_id"), &objectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter object_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSecurityObjectsObjectIdFields(c, objectId)
}

// GetSecurityPermissionSets operation middleware
func (siw *ServerInterfaceWrapper) GetSecurityPermissionSets(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSecurityPermissionSetsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", c.Request.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter search: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "group_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "group_id", c.Request.URL.Query(), &params.GroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter group_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSecurityPermissionSets(c, params)
}

// PostSecurityPermissionSets operation middleware
func (siw *ServerInterfaceWrapper) PostSecurityPermissionSets(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSecurityPermissionSets(c)
}

// DeleteSecurityPermissionSetsPermissionSetId operation middleware
func (siw *ServerInterfaceWrapper) DeleteSecurityPermissionSetsPermissionSetId(c *gin.Context) {

	var err error

	// ------------- Path parameter "permission_set_id" -------------
	var permissionSetId int

	err = runtime.BindStyledParameterWithOptions("simple", "permission_set_id", c.Param("permission_set_id"), &permissionSetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter permission_set_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteSecurityPermissionSetsPermissionSetId(c, permissionSetId)
}

// GetSecurityPermissionSetsPermissionSetId operation middleware
func (siw *ServerInterfaceWrapper) GetSecurityPermissionSetsPermissionSetId(c *gin.Context) {

	var err error

	// ------------- Path parameter "permission_set_id" -------------
	var permissionSetId int

	err = runtime.BindStyledParameterWithOptions("simple", "permission_set_id", c.Param("permission_set_id"), &permissionSetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter permission_set_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSecurityPermissionSetsPermissionSetId(c, permissionSetId)
}

// PutSecurityPermissionSetsPermissionSetId operation middleware
func (siw *ServerInterfaceWrapper) PutSecurityPermissionSetsPermissionSetId(c *gin.Context) {

	var err error

	// ------------- Path parameter "permission_set_id" -------------
	var permissionSetId int

	err = runtime.BindStyledParameterWithOptions("simple", "permission_set_id", c.Param("permission_set_id"), &permissionSetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter permission_set_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutSecurityPermissionSetsPermissionSetId(c, permissionSetId)
}

// GetSecurityPermissionSetsPermissionSetIdFieldPermissions operation middleware
func (siw *ServerInterfaceWrapper) GetSecurityPermissionSetsPermissionSetIdFieldPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "permission_set_id" -------------
	var permissionSetId int

	err = runtime.BindStyledParameterWithOptions("simple", "permission_set_id", c.Param("permission_set_id"), &permissionSetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter permission_set_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSecurityPermissionSetsPermissionSetIdFieldPermissionsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSecurityPermissionSetsPermissionSetIdFieldPermissions(c, permissionSetId, params)
}

// PostSecurityPermissionSetsPermissionSetIdFieldPermissions operation middleware
func (siw *ServerInterfaceWrapper) PostSecurityPermissionSetsPermissionSetIdFieldPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "permission_set_id" -------------
	var permissionSetId int

	err = runtime.BindStyledParameterWithOptions("simple", "permission_set_id", c.Param("permission_set_id"), &permissionSetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter permission_set_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSecurityPermissionSetsPermissionSetIdFieldPermissions(c, permissionSetId)
}

// GetSecurityPermissionSetsPermissionSetIdObjectPermissions operation middleware
func (siw *ServerInterfaceWrapper) GetSecurityPermissionSetsPermissionSetIdObjectPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "permission_set_id" -------------
	var permissionSetId int

	err = runtime.BindStyledParameterWithOptions("simple", "permission_set_id", c.Param("permission_set_id"), &permissionSetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter permission_set_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSecurityPermissionSetsPermissionSetIdObjectPermissionsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSecurityPermissionSetsPermissionSetIdObjectPermissions(c, permissionSetId, params)
}

// PostSecurityPermissionSetsPermissionSetIdObjectPermissions operation middleware
func (siw *ServerInterfaceWrapper) PostSecurityPermissionSetsPermissionSetIdObjectPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "permission_set_id" -------------
	var permissionSetId int

	err = runtime.BindStyledParameterWithOptions("simple", "permission_set_id", c.Param("permission_set_id"), &permissionSetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter permission_set_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSecurityPermissionSetsPermissionSetIdObjectPermissions(c, permissionSetId)
}

// GetTerritories operation middleware
func (siw *ServerInterfaceWrapper) GetTerritories(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTerritoriesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", c.Request.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter search: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "parent_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "parent_id", c.Request.URL.Query(), &params.ParentId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter parent_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTerritories(c, params)
}

// PostTerritories operation middleware
func (siw *ServerInterfaceWrapper) PostTerritories(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostTerritories(c)
}

// DeleteTerritoriesTerritoryId operation middleware
func (siw *ServerInterfaceWrapper) DeleteTerritoriesTerritoryId(c *gin.Context) {

	var err error

	// ------------- Path parameter "territory_id" -------------
	var territoryId int

	err = runtime.BindStyledParameterWithOptions("simple", "territory_id", c.Param("territory_id"), &territoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter territory_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTerritoriesTerritoryId(c, territoryId)
}

// GetTerritoriesTerritoryId operation middleware
func (siw *ServerInterfaceWrapper) GetTerritoriesTerritoryId(c *gin.Context) {

	var err error

	// ------------- Path parameter "territory_id" -------------
	var territoryId int

	err = runtime.BindStyledParameterWithOptions("simple", "territory_id", c.Param("territory_id"), &territoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter territory_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTerritoriesTerritoryId(c, territoryId)
}

// PutTerritoriesTerritoryId operation middleware
func (siw *ServerInterfaceWrapper) PutTerritoriesTerritoryId(c *gin.Context) {

	var err error

	// ------------- Path parameter "territory_id" -------------
	var territoryId int

	err = runtime.BindStyledParameterWithOptions("simple", "territory_id", c.Param("territory_id"), &territoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter territory_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutTerritoriesTerritoryId(c, territoryId)
}

// GetTerritoriesTerritoryIdChildren operation middleware
func (siw *ServerInterfaceWrapper) GetTerritoriesTerritoryIdChildren(c *gin.Context) {

	var err error

	// ------------- Path parameter "territory_id" -------------
	var territoryId int

	err = runtime.BindStyledParameterWithOptions("simple", "territory_id", c.Param("territory_id"), &territoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter territory_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTerritoriesTerritoryIdChildrenParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTerritoriesTerritoryIdChildren(c, territoryId, params)
}

// PutTerritoriesTerritoryIdParent operation middleware
func (siw *ServerInterfaceWrapper) PutTerritoriesTerritoryIdParent(c *gin.Context) {

	var err error

	// ------------- Path parameter "territory_id" -------------
	var territoryId int

	err = runtime.BindStyledParameterWithOptions("simple", "territory_id", c.Param("territory_id"), &territoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter territory_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutTerritoriesTerritoryIdParent(c, territoryId)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", c.Request.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter search: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "manager_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "manager_id", c.Request.URL.Query(), &params.ManagerId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter manager_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsers(c, params)
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUsers(c)
}

// DeleteUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUsersUserId(c, userId)
}

// GetUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersUserId(c, userId)
}

// PutUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) PutUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutUsersUserId(c, userId)
}

// GetUsersUserIdManager operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserIdManager(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersUserIdManager(c, userId)
}

// PutUsersUserIdManager operation middleware
func (siw *ServerInterfaceWrapper) PutUsersUserIdManager(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutUsersUserIdManager(c, userId)
}

// GetUsersUserIdSubordinates operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserIdSubordinates(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersUserIdSubordinatesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersUserIdSubordinates(c, userId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/forgot-password", wrapper.PostAuthForgotPassword)
	router.POST(options.BaseURL+"/auth/login", wrapper.PostAuthLogin)
	router.POST(options.BaseURL+"/auth/logout", wrapper.PostAuthLogout)
	router.GET(options.BaseURL+"/auth/me", wrapper.GetAuthMe)
	router.POST(options.BaseURL+"/auth/refresh", wrapper.PostAuthRefresh)
	router.POST(options.BaseURL+"/auth/register", wrapper.PostAuthRegister)
	router.POST(options.BaseURL+"/auth/reset-password", wrapper.PostAuthResetPassword)
	router.POST(options.BaseURL+"/cache/cleanup", wrapper.PostCacheCleanup)
	router.POST(options.BaseURL+"/cache/invalidate/group/:group_id", wrapper.PostCacheInvalidateGroupGroupId)
	router.POST(options.BaseURL+"/cache/invalidate/object/:object_id", wrapper.PostCacheInvalidateObjectObjectId)
	router.POST(options.BaseURL+"/cache/invalidate/user/:user_id", wrapper.PostCacheInvalidateUserUserId)
	router.GET(options.BaseURL+"/cache/stats", wrapper.GetCacheStats)
	router.GET(options.BaseURL+"/group-members", wrapper.GetGroupMembers)
	router.POST(options.BaseURL+"/group-members", wrapper.PostGroupMembers)
	router.DELETE(options.BaseURL+"/group-members/:member_id", wrapper.DeleteGroupMembersMemberId)
	router.GET(options.BaseURL+"/group-members/:member_id", wrapper.GetGroupMembersMemberId)
	router.PUT(options.BaseURL+"/group-members/:member_id", wrapper.PutGroupMembersMemberId)
	router.GET(options.BaseURL+"/groups", wrapper.GetGroups)
	router.POST(options.BaseURL+"/groups", wrapper.PostGroups)
	router.DELETE(options.BaseURL+"/groups/:group_id", wrapper.DeleteGroupsGroupId)
	router.GET(options.BaseURL+"/groups/:group_id", wrapper.GetGroupsGroupId)
	router.PUT(options.BaseURL+"/groups/:group_id", wrapper.PutGroupsGroupId)
	router.GET(options.BaseURL+"/groups/:group_id/members", wrapper.GetGroupsGroupIdMembers)
	router.POST(options.BaseURL+"/groups/:group_id/members", wrapper.PostGroupsGroupIdMembers)
	router.DELETE(options.BaseURL+"/groups/:group_id/members/:member_id", wrapper.DeleteGroupsGroupIdMembersMemberId)
	router.GET(options.BaseURL+"/identities", wrapper.GetIdentities)
	router.POST(options.BaseURL+"/identities", wrapper.PostIdentities)
	router.DELETE(options.BaseURL+"/identities/:identity_id", wrapper.DeleteIdentitiesIdentityId)
	router.GET(options.BaseURL+"/identities/:identity_id", wrapper.GetIdentitiesIdentityId)
	router.PUT(options.BaseURL+"/identities/:identity_id", wrapper.PutIdentitiesIdentityId)
	router.GET(options.BaseURL+"/permissions/check", wrapper.GetPermissionsCheck)
	router.GET(options.BaseURL+"/permissions/user/:user_id/fields", wrapper.GetPermissionsUserUserIdFields)
	router.GET(options.BaseURL+"/permissions/user/:user_id/objects", wrapper.GetPermissionsUserUserIdObjects)
	router.GET(options.BaseURL+"/permissions/user/:user_id/rows", wrapper.GetPermissionsUserUserIdRows)
	router.GET(options.BaseURL+"/principals", wrapper.GetPrincipals)
	router.POST(options.BaseURL+"/principals", wrapper.PostPrincipals)
	router.GET(options.BaseURL+"/principals/:principal_id", wrapper.GetPrincipalsPrincipalId)
	router.PUT(options.BaseURL+"/principals/:principal_id", wrapper.PutPrincipalsPrincipalId)
	router.GET(options.BaseURL+"/principals/:principal_id/identities", wrapper.GetPrincipalsPrincipalIdIdentities)
	router.PUT(options.BaseURL+"/principals/:principal_id/status", wrapper.PutPrincipalsPrincipalIdStatus)
	router.GET(options.BaseURL+"/roles", wrapper.GetRoles)
	router.POST(options.BaseURL+"/roles", wrapper.PostRoles)
	router.DELETE(options.BaseURL+"/roles/:role_id", wrapper.DeleteRolesRoleId)
	router.GET(options.BaseURL+"/roles/:role_id", wrapper.GetRolesRoleId)
	router.PUT(options.BaseURL+"/roles/:role_id", wrapper.PutRolesRoleId)
	router.GET(options.BaseURL+"/roles/:role_id/children", wrapper.GetRolesRoleIdChildren)
	router.PUT(options.BaseURL+"/roles/:role_id/parent", wrapper.PutRolesRoleIdParent)
	router.DELETE(options.BaseURL+"/security/field-permissions/:permission_id", wrapper.DeleteSecurityFieldPermissionsPermissionId)
	router.PUT(options.BaseURL+"/security/field-permissions/:permission_id", wrapper.PutSecurityFieldPermissionsPermissionId)
	router.DELETE(options.BaseURL+"/security/fields/:field_id", wrapper.DeleteSecurityFieldsFieldId)
	router.GET(options.BaseURL+"/security/fields/:field_id", wrapper.GetSecurityFieldsFieldId)
	router.PUT(options.BaseURL+"/security/fields/:field_id", wrapper.PutSecurityFieldsFieldId)
	router.DELETE(options.BaseURL+"/security/object-permissions/:permission_id", wrapper.DeleteSecurityObjectPermissionsPermissionId)
	router.PUT(options.BaseURL+"/security/object-permissions/:permission_id", wrapper.PutSecurityObjectPermissionsPermissionId)
	router.GET(options.BaseURL+"/security/objects", wrapper.GetSecurityObjects)
	router.POST(options.BaseURL+"/security/objects", wrapper.PostSecurityObjects)
	router.DELETE(options.BaseURL+"/security/objects/:object_id", wrapper.DeleteSecurityObjectsObjectId)
	router.GET(options.BaseURL+"/security/objects/:object_id", wrapper.GetSecurityObjectsObjectId)
	router.PUT(options.BaseURL+"/security/objects/:object_id", wrapper.PutSecurityObjectsObjectId)
	router.GET(options.BaseURL+"/security/objects/:object_id/fields", wrapper.GetSecurityObjectsObjectIdFields)
	router.POST(options.BaseURL+"/security/objects/:object_id/fields", wrapper.PostSecurityObjectsObjectIdFields)
	router.GET(options.BaseURL+"/security/permission-sets", wrapper.GetSecurityPermissionSets)
	router.POST(options.BaseURL+"/security/permission-sets", wrapper.PostSecurityPermissionSets)
	router.DELETE(options.BaseURL+"/security/permission-sets/:permission_set_id", wrapper.DeleteSecurityPermissionSetsPermissionSetId)
	router.GET(options.BaseURL+"/security/permission-sets/:permission_set_id", wrapper.GetSecurityPermissionSetsPermissionSetId)
	router.PUT(options.BaseURL+"/security/permission-sets/:permission_set_id", wrapper.PutSecurityPermissionSetsPermissionSetId)
	router.GET(options.BaseURL+"/security/permission-sets/:permission_set_id/field-permissions", wrapper.GetSecurityPermissionSetsPermissionSetIdFieldPermissions)
	router.POST(options.BaseURL+"/security/permission-sets/:permission_set_id/field-permissions", wrapper.PostSecurityPermissionSetsPermissionSetIdFieldPermissions)
	router.GET(options.BaseURL+"/security/permission-sets/:permission_set_id/object-permissions", wrapper.GetSecurityPermissionSetsPermissionSetIdObjectPermissions)
	router.POST(options.BaseURL+"/security/permission-sets/:permission_set_id/object-permissions", wrapper.PostSecurityPermissionSetsPermissionSetIdObjectPermissions)
	router.GET(options.BaseURL+"/territories", wrapper.GetTerritories)
	router.POST(options.BaseURL+"/territories", wrapper.PostTerritories)
	router.DELETE(options.BaseURL+"/territories/:territory_id", wrapper.DeleteTerritoriesTerritoryId)
	router.GET(options.BaseURL+"/territories/:territory_id", wrapper.GetTerritoriesTerritoryId)
	router.PUT(options.BaseURL+"/territories/:territory_id", wrapper.PutTerritoriesTerritoryId)
	router.GET(options.BaseURL+"/territories/:territory_id/children", wrapper.GetTerritoriesTerritoryIdChildren)
	router.PUT(options.BaseURL+"/territories/:territory_id/parent", wrapper.PutTerritoriesTerritoryIdParent)
	router.GET(options.BaseURL+"/users", wrapper.GetUsers)
	router.POST(options.BaseURL+"/users", wrapper.PostUsers)
	router.DELETE(options.BaseURL+"/users/:user_id", wrapper.DeleteUsersUserId)
	router.GET(options.BaseURL+"/users/:user_id", wrapper.GetUsersUserId)
	router.PUT(options.BaseURL+"/users/:user_id", wrapper.PutUsersUserId)
	router.GET(options.BaseURL+"/users/:user_id/manager", wrapper.GetUsersUserIdManager)
	router.PUT(options.BaseURL+"/users/:user_id/manager", wrapper.PutUsersUserIdManager)
	router.GET(options.BaseURL+"/users/:user_id/subordinates", wrapper.GetUsersUserIdSubordinates)
}
