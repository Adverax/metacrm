// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.7
// source: iam-permissions-sync.proto

package contracts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PermissionSyncService_GetUserPermissionsSnapshot_FullMethodName    = "/iam.permissions.sync.v1.PermissionSyncService/GetUserPermissionsSnapshot"
	PermissionSyncService_GetUserPermissionsChanges_FullMethodName     = "/iam.permissions.sync.v1.PermissionSyncService/GetUserPermissionsChanges"
	PermissionSyncService_GetBulkUserPermissions_FullMethodName        = "/iam.permissions.sync.v1.PermissionSyncService/GetBulkUserPermissions"
	PermissionSyncService_GetGroupMembershipPermissions_FullMethodName = "/iam.permissions.sync.v1.PermissionSyncService/GetGroupMembershipPermissions"
	PermissionSyncService_CheckUserPermissionsChanged_FullMethodName   = "/iam.permissions.sync.v1.PermissionSyncService/CheckUserPermissionsChanged"
	PermissionSyncService_SyncGroupPermissions_FullMethodName          = "/iam.permissions.sync.v1.PermissionSyncService/SyncGroupPermissions"
	PermissionSyncService_GetPermissionSyncStats_FullMethodName        = "/iam.permissions.sync.v1.PermissionSyncService/GetPermissionSyncStats"
)

// PermissionSyncServiceClient is the client API for PermissionSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionSyncServiceClient interface {
	// Get complete user permissions snapshot for caching
	GetUserPermissionsSnapshot(ctx context.Context, in *GetUserPermissionsSnapshotRequest, opts ...grpc.CallOption) (*GetUserPermissionsSnapshotResponse, error)
	// Get user permissions changes since last sync
	GetUserPermissionsChanges(ctx context.Context, in *GetUserPermissionsChangesRequest, opts ...grpc.CallOption) (*GetUserPermissionsChangesResponse, error)
	// Bulk get permissions for multiple users (for batch processing)
	GetBulkUserPermissions(ctx context.Context, in *GetBulkUserPermissionsRequest, opts ...grpc.CallOption) (*GetBulkUserPermissionsResponse, error)
	// Get permissions for users affected by group membership changes
	GetGroupMembershipPermissions(ctx context.Context, in *GetGroupMembershipPermissionsRequest, opts ...grpc.CallOption) (*GetGroupMembershipPermissionsResponse, error)
	// Check if user permissions have changed since timestamp
	CheckUserPermissionsChanged(ctx context.Context, in *CheckUserPermissionsChangedRequest, opts ...grpc.CallOption) (*CheckUserPermissionsChangedResponse, error)
	// Sync permissions for users in a specific group
	SyncGroupPermissions(ctx context.Context, in *SyncGroupPermissionsRequest, opts ...grpc.CallOption) (*SyncGroupPermissionsResponse, error)
	// Get permission sync statistics for monitoring
	GetPermissionSyncStats(ctx context.Context, in *GetPermissionSyncStatsRequest, opts ...grpc.CallOption) (*GetPermissionSyncStatsResponse, error)
}

type permissionSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionSyncServiceClient(cc grpc.ClientConnInterface) PermissionSyncServiceClient {
	return &permissionSyncServiceClient{cc}
}

func (c *permissionSyncServiceClient) GetUserPermissionsSnapshot(ctx context.Context, in *GetUserPermissionsSnapshotRequest, opts ...grpc.CallOption) (*GetUserPermissionsSnapshotResponse, error) {
	out := new(GetUserPermissionsSnapshotResponse)
	err := c.cc.Invoke(ctx, PermissionSyncService_GetUserPermissionsSnapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionSyncServiceClient) GetUserPermissionsChanges(ctx context.Context, in *GetUserPermissionsChangesRequest, opts ...grpc.CallOption) (*GetUserPermissionsChangesResponse, error) {
	out := new(GetUserPermissionsChangesResponse)
	err := c.cc.Invoke(ctx, PermissionSyncService_GetUserPermissionsChanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionSyncServiceClient) GetBulkUserPermissions(ctx context.Context, in *GetBulkUserPermissionsRequest, opts ...grpc.CallOption) (*GetBulkUserPermissionsResponse, error) {
	out := new(GetBulkUserPermissionsResponse)
	err := c.cc.Invoke(ctx, PermissionSyncService_GetBulkUserPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionSyncServiceClient) GetGroupMembershipPermissions(ctx context.Context, in *GetGroupMembershipPermissionsRequest, opts ...grpc.CallOption) (*GetGroupMembershipPermissionsResponse, error) {
	out := new(GetGroupMembershipPermissionsResponse)
	err := c.cc.Invoke(ctx, PermissionSyncService_GetGroupMembershipPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionSyncServiceClient) CheckUserPermissionsChanged(ctx context.Context, in *CheckUserPermissionsChangedRequest, opts ...grpc.CallOption) (*CheckUserPermissionsChangedResponse, error) {
	out := new(CheckUserPermissionsChangedResponse)
	err := c.cc.Invoke(ctx, PermissionSyncService_CheckUserPermissionsChanged_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionSyncServiceClient) SyncGroupPermissions(ctx context.Context, in *SyncGroupPermissionsRequest, opts ...grpc.CallOption) (*SyncGroupPermissionsResponse, error) {
	out := new(SyncGroupPermissionsResponse)
	err := c.cc.Invoke(ctx, PermissionSyncService_SyncGroupPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionSyncServiceClient) GetPermissionSyncStats(ctx context.Context, in *GetPermissionSyncStatsRequest, opts ...grpc.CallOption) (*GetPermissionSyncStatsResponse, error) {
	out := new(GetPermissionSyncStatsResponse)
	err := c.cc.Invoke(ctx, PermissionSyncService_GetPermissionSyncStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionSyncServiceServer is the server API for PermissionSyncService service.
// All implementations must embed UnimplementedPermissionSyncServiceServer
// for forward compatibility
type PermissionSyncServiceServer interface {
	// Get complete user permissions snapshot for caching
	GetUserPermissionsSnapshot(context.Context, *GetUserPermissionsSnapshotRequest) (*GetUserPermissionsSnapshotResponse, error)
	// Get user permissions changes since last sync
	GetUserPermissionsChanges(context.Context, *GetUserPermissionsChangesRequest) (*GetUserPermissionsChangesResponse, error)
	// Bulk get permissions for multiple users (for batch processing)
	GetBulkUserPermissions(context.Context, *GetBulkUserPermissionsRequest) (*GetBulkUserPermissionsResponse, error)
	// Get permissions for users affected by group membership changes
	GetGroupMembershipPermissions(context.Context, *GetGroupMembershipPermissionsRequest) (*GetGroupMembershipPermissionsResponse, error)
	// Check if user permissions have changed since timestamp
	CheckUserPermissionsChanged(context.Context, *CheckUserPermissionsChangedRequest) (*CheckUserPermissionsChangedResponse, error)
	// Sync permissions for users in a specific group
	SyncGroupPermissions(context.Context, *SyncGroupPermissionsRequest) (*SyncGroupPermissionsResponse, error)
	// Get permission sync statistics for monitoring
	GetPermissionSyncStats(context.Context, *GetPermissionSyncStatsRequest) (*GetPermissionSyncStatsResponse, error)
	mustEmbedUnimplementedPermissionSyncServiceServer()
}

// UnimplementedPermissionSyncServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPermissionSyncServiceServer struct {
}

func (UnimplementedPermissionSyncServiceServer) GetUserPermissionsSnapshot(context.Context, *GetUserPermissionsSnapshotRequest) (*GetUserPermissionsSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissionsSnapshot not implemented")
}
func (UnimplementedPermissionSyncServiceServer) GetUserPermissionsChanges(context.Context, *GetUserPermissionsChangesRequest) (*GetUserPermissionsChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissionsChanges not implemented")
}
func (UnimplementedPermissionSyncServiceServer) GetBulkUserPermissions(context.Context, *GetBulkUserPermissionsRequest) (*GetBulkUserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulkUserPermissions not implemented")
}
func (UnimplementedPermissionSyncServiceServer) GetGroupMembershipPermissions(context.Context, *GetGroupMembershipPermissionsRequest) (*GetGroupMembershipPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMembershipPermissions not implemented")
}
func (UnimplementedPermissionSyncServiceServer) CheckUserPermissionsChanged(context.Context, *CheckUserPermissionsChangedRequest) (*CheckUserPermissionsChangedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserPermissionsChanged not implemented")
}
func (UnimplementedPermissionSyncServiceServer) SyncGroupPermissions(context.Context, *SyncGroupPermissionsRequest) (*SyncGroupPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncGroupPermissions not implemented")
}
func (UnimplementedPermissionSyncServiceServer) GetPermissionSyncStats(context.Context, *GetPermissionSyncStatsRequest) (*GetPermissionSyncStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionSyncStats not implemented")
}
func (UnimplementedPermissionSyncServiceServer) mustEmbedUnimplementedPermissionSyncServiceServer() {}

// UnsafePermissionSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionSyncServiceServer will
// result in compilation errors.
type UnsafePermissionSyncServiceServer interface {
	mustEmbedUnimplementedPermissionSyncServiceServer()
}

func RegisterPermissionSyncServiceServer(s grpc.ServiceRegistrar, srv PermissionSyncServiceServer) {
	s.RegisterService(&PermissionSyncService_ServiceDesc, srv)
}

func _PermissionSyncService_GetUserPermissionsSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermissionsSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionSyncServiceServer).GetUserPermissionsSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionSyncService_GetUserPermissionsSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionSyncServiceServer).GetUserPermissionsSnapshot(ctx, req.(*GetUserPermissionsSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionSyncService_GetUserPermissionsChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermissionsChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionSyncServiceServer).GetUserPermissionsChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionSyncService_GetUserPermissionsChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionSyncServiceServer).GetUserPermissionsChanges(ctx, req.(*GetUserPermissionsChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionSyncService_GetBulkUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBulkUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionSyncServiceServer).GetBulkUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionSyncService_GetBulkUserPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionSyncServiceServer).GetBulkUserPermissions(ctx, req.(*GetBulkUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionSyncService_GetGroupMembershipPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMembershipPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionSyncServiceServer).GetGroupMembershipPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionSyncService_GetGroupMembershipPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionSyncServiceServer).GetGroupMembershipPermissions(ctx, req.(*GetGroupMembershipPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionSyncService_CheckUserPermissionsChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserPermissionsChangedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionSyncServiceServer).CheckUserPermissionsChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionSyncService_CheckUserPermissionsChanged_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionSyncServiceServer).CheckUserPermissionsChanged(ctx, req.(*CheckUserPermissionsChangedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionSyncService_SyncGroupPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncGroupPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionSyncServiceServer).SyncGroupPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionSyncService_SyncGroupPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionSyncServiceServer).SyncGroupPermissions(ctx, req.(*SyncGroupPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionSyncService_GetPermissionSyncStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionSyncStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionSyncServiceServer).GetPermissionSyncStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionSyncService_GetPermissionSyncStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionSyncServiceServer).GetPermissionSyncStats(ctx, req.(*GetPermissionSyncStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PermissionSyncService_ServiceDesc is the grpc.ServiceDesc for PermissionSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermissionSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iam.permissions.sync.v1.PermissionSyncService",
	HandlerType: (*PermissionSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserPermissionsSnapshot",
			Handler:    _PermissionSyncService_GetUserPermissionsSnapshot_Handler,
		},
		{
			MethodName: "GetUserPermissionsChanges",
			Handler:    _PermissionSyncService_GetUserPermissionsChanges_Handler,
		},
		{
			MethodName: "GetBulkUserPermissions",
			Handler:    _PermissionSyncService_GetBulkUserPermissions_Handler,
		},
		{
			MethodName: "GetGroupMembershipPermissions",
			Handler:    _PermissionSyncService_GetGroupMembershipPermissions_Handler,
		},
		{
			MethodName: "CheckUserPermissionsChanged",
			Handler:    _PermissionSyncService_CheckUserPermissionsChanged_Handler,
		},
		{
			MethodName: "SyncGroupPermissions",
			Handler:    _PermissionSyncService_SyncGroupPermissions_Handler,
		},
		{
			MethodName: "GetPermissionSyncStats",
			Handler:    _PermissionSyncService_GetPermissionSyncStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iam-permissions-sync.proto",
}
