// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.7
// source: iam-permissions.proto

package contracts

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PermissionType int32

const (
	PermissionType_PERMISSION_TYPE_UNSPECIFIED PermissionType = 0
	PermissionType_PERMISSION_TYPE_READ        PermissionType = 1 // Read permission (bit 0)
	PermissionType_PERMISSION_TYPE_CREATE      PermissionType = 2 // Create permission (bit 1)
	PermissionType_PERMISSION_TYPE_UPDATE      PermissionType = 4 // Update permission (bit 2)
	PermissionType_PERMISSION_TYPE_DELETE      PermissionType = 8 // Delete permission (bit 3)
)

// Enum value maps for PermissionType.
var (
	PermissionType_name = map[int32]string{
		0: "PERMISSION_TYPE_UNSPECIFIED",
		1: "PERMISSION_TYPE_READ",
		2: "PERMISSION_TYPE_CREATE",
		4: "PERMISSION_TYPE_UPDATE",
		8: "PERMISSION_TYPE_DELETE",
	}
	PermissionType_value = map[string]int32{
		"PERMISSION_TYPE_UNSPECIFIED": 0,
		"PERMISSION_TYPE_READ":        1,
		"PERMISSION_TYPE_CREATE":      2,
		"PERMISSION_TYPE_UPDATE":      4,
		"PERMISSION_TYPE_DELETE":      8,
	}
)

func (x PermissionType) Enum() *PermissionType {
	p := new(PermissionType)
	*p = x
	return p
}

func (x PermissionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionType) Descriptor() protoreflect.EnumDescriptor {
	return file_iam_permissions_proto_enumTypes[0].Descriptor()
}

func (PermissionType) Type() protoreflect.EnumType {
	return &file_iam_permissions_proto_enumTypes[0]
}

func (x PermissionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionType.Descriptor instead.
func (PermissionType) EnumDescriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{0}
}

type GroupType int32

const (
	GroupType_GROUP_TYPE_UNSPECIFIED     GroupType = 0
	GroupType_GROUP_TYPE_ROLE_BASED      GroupType = 1 // Role-based group
	GroupType_GROUP_TYPE_TERRITORY_BASED GroupType = 2 // Territory-based group
	GroupType_GROUP_TYPE_MANUAL          GroupType = 3 // Manually managed group
	GroupType_GROUP_TYPE_DYNAMIC         GroupType = 4 // Dynamically managed group
)

// Enum value maps for GroupType.
var (
	GroupType_name = map[int32]string{
		0: "GROUP_TYPE_UNSPECIFIED",
		1: "GROUP_TYPE_ROLE_BASED",
		2: "GROUP_TYPE_TERRITORY_BASED",
		3: "GROUP_TYPE_MANUAL",
		4: "GROUP_TYPE_DYNAMIC",
	}
	GroupType_value = map[string]int32{
		"GROUP_TYPE_UNSPECIFIED":     0,
		"GROUP_TYPE_ROLE_BASED":      1,
		"GROUP_TYPE_TERRITORY_BASED": 2,
		"GROUP_TYPE_MANUAL":          3,
		"GROUP_TYPE_DYNAMIC":         4,
	}
)

func (x GroupType) Enum() *GroupType {
	p := new(GroupType)
	*p = x
	return p
}

func (x GroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_iam_permissions_proto_enumTypes[1].Descriptor()
}

func (GroupType) Type() protoreflect.EnumType {
	return &file_iam_permissions_proto_enumTypes[1]
}

func (x GroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupType.Descriptor instead.
func (GroupType) EnumDescriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{1}
}

type MembershipType int32

const (
	MembershipType_MEMBERSHIP_TYPE_UNSPECIFIED MembershipType = 0
	MembershipType_MEMBERSHIP_TYPE_DIRECT      MembershipType = 1 // Direct membership
	MembershipType_MEMBERSHIP_TYPE_INHERITED   MembershipType = 2 // Inherited through role
	MembershipType_MEMBERSHIP_TYPE_AUTOMATIC   MembershipType = 3 // Automatic through group type
)

// Enum value maps for MembershipType.
var (
	MembershipType_name = map[int32]string{
		0: "MEMBERSHIP_TYPE_UNSPECIFIED",
		1: "MEMBERSHIP_TYPE_DIRECT",
		2: "MEMBERSHIP_TYPE_INHERITED",
		3: "MEMBERSHIP_TYPE_AUTOMATIC",
	}
	MembershipType_value = map[string]int32{
		"MEMBERSHIP_TYPE_UNSPECIFIED": 0,
		"MEMBERSHIP_TYPE_DIRECT":      1,
		"MEMBERSHIP_TYPE_INHERITED":   2,
		"MEMBERSHIP_TYPE_AUTOMATIC":   3,
	}
)

func (x MembershipType) Enum() *MembershipType {
	p := new(MembershipType)
	*p = x
	return p
}

func (x MembershipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MembershipType) Descriptor() protoreflect.EnumDescriptor {
	return file_iam_permissions_proto_enumTypes[2].Descriptor()
}

func (MembershipType) Type() protoreflect.EnumType {
	return &file_iam_permissions_proto_enumTypes[2]
}

func (x MembershipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MembershipType.Descriptor instead.
func (MembershipType) EnumDescriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{2}
}

type SourceType int32

const (
	SourceType_SOURCE_TYPE_UNSPECIFIED SourceType = 0
	SourceType_SOURCE_TYPE_GROUP       SourceType = 1 // Permission from group membership
	SourceType_SOURCE_TYPE_ROLE        SourceType = 2 // Permission from role
	SourceType_SOURCE_TYPE_DIRECT      SourceType = 3 // Direct permission assignment
	SourceType_SOURCE_TYPE_TERRITORY   SourceType = 4 // Permission from territory
)

// Enum value maps for SourceType.
var (
	SourceType_name = map[int32]string{
		0: "SOURCE_TYPE_UNSPECIFIED",
		1: "SOURCE_TYPE_GROUP",
		2: "SOURCE_TYPE_ROLE",
		3: "SOURCE_TYPE_DIRECT",
		4: "SOURCE_TYPE_TERRITORY",
	}
	SourceType_value = map[string]int32{
		"SOURCE_TYPE_UNSPECIFIED": 0,
		"SOURCE_TYPE_GROUP":       1,
		"SOURCE_TYPE_ROLE":        2,
		"SOURCE_TYPE_DIRECT":      3,
		"SOURCE_TYPE_TERRITORY":   4,
	}
)

func (x SourceType) Enum() *SourceType {
	p := new(SourceType)
	*p = x
	return p
}

func (x SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_iam_permissions_proto_enumTypes[3].Descriptor()
}

func (SourceType) Type() protoreflect.EnumType {
	return &file_iam_permissions_proto_enumTypes[3]
}

func (x SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceType.Descriptor instead.
func (SourceType) EnumDescriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{3}
}

// Error codes for gRPC status
type ErrorCode int32

const (
	ErrorCode_ERROR_CODE_UNSPECIFIED       ErrorCode = 0
	ErrorCode_ERROR_CODE_USER_NOT_FOUND    ErrorCode = 1
	ErrorCode_ERROR_CODE_OBJECT_NOT_FOUND  ErrorCode = 2
	ErrorCode_ERROR_CODE_FIELD_NOT_FOUND   ErrorCode = 3
	ErrorCode_ERROR_CODE_GROUP_NOT_FOUND   ErrorCode = 4
	ErrorCode_ERROR_CODE_INVALID_TENANT    ErrorCode = 5
	ErrorCode_ERROR_CODE_PERMISSION_DENIED ErrorCode = 6
	ErrorCode_ERROR_CODE_CACHE_ERROR       ErrorCode = 7
	ErrorCode_ERROR_CODE_INVALID_REQUEST   ErrorCode = 8
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "ERROR_CODE_UNSPECIFIED",
		1: "ERROR_CODE_USER_NOT_FOUND",
		2: "ERROR_CODE_OBJECT_NOT_FOUND",
		3: "ERROR_CODE_FIELD_NOT_FOUND",
		4: "ERROR_CODE_GROUP_NOT_FOUND",
		5: "ERROR_CODE_INVALID_TENANT",
		6: "ERROR_CODE_PERMISSION_DENIED",
		7: "ERROR_CODE_CACHE_ERROR",
		8: "ERROR_CODE_INVALID_REQUEST",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_CODE_UNSPECIFIED":       0,
		"ERROR_CODE_USER_NOT_FOUND":    1,
		"ERROR_CODE_OBJECT_NOT_FOUND":  2,
		"ERROR_CODE_FIELD_NOT_FOUND":   3,
		"ERROR_CODE_GROUP_NOT_FOUND":   4,
		"ERROR_CODE_INVALID_TENANT":    5,
		"ERROR_CODE_PERMISSION_DENIED": 6,
		"ERROR_CODE_CACHE_ERROR":       7,
		"ERROR_CODE_INVALID_REQUEST":   8,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_iam_permissions_proto_enumTypes[4].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_iam_permissions_proto_enumTypes[4]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{4}
}

type GetUserObjectPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId      string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                  // Tenant identifier (UUID)
	UserId        string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                        // User record ID (e.g., "usr_a1b2c3d4e5f67890")
	ObjectApiName string `protobuf:"bytes,3,opt,name=object_api_name,json=objectApiName,proto3" json:"object_api_name,omitempty"` // Object API name (e.g., "user", "order", "product")
	TtlSeconds    *int32 `protobuf:"varint,4,opt,name=ttl_seconds,json=ttlSeconds,proto3,oneof" json:"ttl_seconds,omitempty"`     // Cache TTL in seconds (default: 3600)
}

func (x *GetUserObjectPermissionsRequest) Reset() {
	*x = GetUserObjectPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserObjectPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserObjectPermissionsRequest) ProtoMessage() {}

func (x *GetUserObjectPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserObjectPermissionsRequest.ProtoReflect.Descriptor instead.
func (*GetUserObjectPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{0}
}

func (x *GetUserObjectPermissionsRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *GetUserObjectPermissionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserObjectPermissionsRequest) GetObjectApiName() string {
	if x != nil {
		return x.ObjectApiName
	}
	return ""
}

func (x *GetUserObjectPermissionsRequest) GetTtlSeconds() int32 {
	if x != nil && x.TtlSeconds != nil {
		return *x.TtlSeconds
	}
	return 0
}

type GetUserFieldPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId      string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                  // Tenant identifier (UUID)
	UserId        string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                        // User record ID (e.g., "usr_a1b2c3d4e5f67890")
	ObjectApiName string `protobuf:"bytes,3,opt,name=object_api_name,json=objectApiName,proto3" json:"object_api_name,omitempty"` // Object API name (e.g., "user", "order")
	FieldApiName  string `protobuf:"bytes,4,opt,name=field_api_name,json=fieldApiName,proto3" json:"field_api_name,omitempty"`    // Field API name (e.g., "email", "salary")
	TtlSeconds    *int32 `protobuf:"varint,5,opt,name=ttl_seconds,json=ttlSeconds,proto3,oneof" json:"ttl_seconds,omitempty"`     // Cache TTL in seconds (default: 3600)
}

func (x *GetUserFieldPermissionsRequest) Reset() {
	*x = GetUserFieldPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserFieldPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFieldPermissionsRequest) ProtoMessage() {}

func (x *GetUserFieldPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFieldPermissionsRequest.ProtoReflect.Descriptor instead.
func (*GetUserFieldPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{1}
}

func (x *GetUserFieldPermissionsRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *GetUserFieldPermissionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserFieldPermissionsRequest) GetObjectApiName() string {
	if x != nil {
		return x.ObjectApiName
	}
	return ""
}

func (x *GetUserFieldPermissionsRequest) GetFieldApiName() string {
	if x != nil {
		return x.FieldApiName
	}
	return ""
}

func (x *GetUserFieldPermissionsRequest) GetTtlSeconds() int32 {
	if x != nil && x.TtlSeconds != nil {
		return *x.TtlSeconds
	}
	return 0
}

type GetUserGroupMembershipsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId         string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                                // Tenant identifier (UUID)
	UserId           string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                      // User record ID (e.g., "usr_a1b2c3d4e5f67890")
	IncludeInherited *bool  `protobuf:"varint,3,opt,name=include_inherited,json=includeInherited,proto3,oneof" json:"include_inherited,omitempty"` // Include inherited memberships (default: true)
	IncludeNested    *bool  `protobuf:"varint,4,opt,name=include_nested,json=includeNested,proto3,oneof" json:"include_nested,omitempty"`          // Include nested group memberships (default: true)
}

func (x *GetUserGroupMembershipsRequest) Reset() {
	*x = GetUserGroupMembershipsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserGroupMembershipsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserGroupMembershipsRequest) ProtoMessage() {}

func (x *GetUserGroupMembershipsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserGroupMembershipsRequest.ProtoReflect.Descriptor instead.
func (*GetUserGroupMembershipsRequest) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{2}
}

func (x *GetUserGroupMembershipsRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *GetUserGroupMembershipsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserGroupMembershipsRequest) GetIncludeInherited() bool {
	if x != nil && x.IncludeInherited != nil {
		return *x.IncludeInherited
	}
	return false
}

func (x *GetUserGroupMembershipsRequest) GetIncludeNested() bool {
	if x != nil && x.IncludeNested != nil {
		return *x.IncludeNested
	}
	return false
}

type GetAllUserObjectPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId   string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`              // Tenant identifier (UUID)
	UserId     string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                    // User record ID (e.g., "usr_a1b2c3d4e5f67890")
	TtlSeconds *int32 `protobuf:"varint,3,opt,name=ttl_seconds,json=ttlSeconds,proto3,oneof" json:"ttl_seconds,omitempty"` // Cache TTL in seconds (default: 3600)
}

func (x *GetAllUserObjectPermissionsRequest) Reset() {
	*x = GetAllUserObjectPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllUserObjectPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllUserObjectPermissionsRequest) ProtoMessage() {}

func (x *GetAllUserObjectPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllUserObjectPermissionsRequest.ProtoReflect.Descriptor instead.
func (*GetAllUserObjectPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{3}
}

func (x *GetAllUserObjectPermissionsRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *GetAllUserObjectPermissionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetAllUserObjectPermissionsRequest) GetTtlSeconds() int32 {
	if x != nil && x.TtlSeconds != nil {
		return *x.TtlSeconds
	}
	return 0
}

type GetAllUserFieldPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId      string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                  // Tenant identifier (UUID)
	UserId        string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                        // User record ID (e.g., "usr_a1b2c3d4e5f67890")
	ObjectApiName string `protobuf:"bytes,3,opt,name=object_api_name,json=objectApiName,proto3" json:"object_api_name,omitempty"` // Object API name (e.g., "user", "order")
	TtlSeconds    *int32 `protobuf:"varint,4,opt,name=ttl_seconds,json=ttlSeconds,proto3,oneof" json:"ttl_seconds,omitempty"`     // Cache TTL in seconds (default: 3600)
}

func (x *GetAllUserFieldPermissionsRequest) Reset() {
	*x = GetAllUserFieldPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllUserFieldPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllUserFieldPermissionsRequest) ProtoMessage() {}

func (x *GetAllUserFieldPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllUserFieldPermissionsRequest.ProtoReflect.Descriptor instead.
func (*GetAllUserFieldPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{4}
}

func (x *GetAllUserFieldPermissionsRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *GetAllUserFieldPermissionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetAllUserFieldPermissionsRequest) GetObjectApiName() string {
	if x != nil {
		return x.ObjectApiName
	}
	return ""
}

func (x *GetAllUserFieldPermissionsRequest) GetTtlSeconds() int32 {
	if x != nil && x.TtlSeconds != nil {
		return *x.TtlSeconds
	}
	return 0
}

type CheckUserObjectPermissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId      string         `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                             // Tenant identifier (UUID)
	UserId        string         `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                   // User record ID (e.g., "usr_a1b2c3d4e5f67890")
	ObjectApiName string         `protobuf:"bytes,3,opt,name=object_api_name,json=objectApiName,proto3" json:"object_api_name,omitempty"`            // Object API name (e.g., "user", "order")
	Permission    PermissionType `protobuf:"varint,4,opt,name=permission,proto3,enum=iam.permissions.v1.PermissionType" json:"permission,omitempty"` // Required permission type
	TtlSeconds    *int32         `protobuf:"varint,5,opt,name=ttl_seconds,json=ttlSeconds,proto3,oneof" json:"ttl_seconds,omitempty"`                // Cache TTL in seconds (default: 3600)
}

func (x *CheckUserObjectPermissionRequest) Reset() {
	*x = CheckUserObjectPermissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserObjectPermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserObjectPermissionRequest) ProtoMessage() {}

func (x *CheckUserObjectPermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserObjectPermissionRequest.ProtoReflect.Descriptor instead.
func (*CheckUserObjectPermissionRequest) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{5}
}

func (x *CheckUserObjectPermissionRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CheckUserObjectPermissionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CheckUserObjectPermissionRequest) GetObjectApiName() string {
	if x != nil {
		return x.ObjectApiName
	}
	return ""
}

func (x *CheckUserObjectPermissionRequest) GetPermission() PermissionType {
	if x != nil {
		return x.Permission
	}
	return PermissionType_PERMISSION_TYPE_UNSPECIFIED
}

func (x *CheckUserObjectPermissionRequest) GetTtlSeconds() int32 {
	if x != nil && x.TtlSeconds != nil {
		return *x.TtlSeconds
	}
	return 0
}

type CheckUserFieldPermissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId      string         `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                             // Tenant identifier (UUID)
	UserId        string         `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                   // User record ID (e.g., "usr_a1b2c3d4e5f67890")
	ObjectApiName string         `protobuf:"bytes,3,opt,name=object_api_name,json=objectApiName,proto3" json:"object_api_name,omitempty"`            // Object API name (e.g., "user", "order")
	FieldApiName  string         `protobuf:"bytes,4,opt,name=field_api_name,json=fieldApiName,proto3" json:"field_api_name,omitempty"`               // Field API name (e.g., "email", "salary")
	Permission    PermissionType `protobuf:"varint,5,opt,name=permission,proto3,enum=iam.permissions.v1.PermissionType" json:"permission,omitempty"` // Required permission type
	TtlSeconds    *int32         `protobuf:"varint,6,opt,name=ttl_seconds,json=ttlSeconds,proto3,oneof" json:"ttl_seconds,omitempty"`                // Cache TTL in seconds (default: 3600)
}

func (x *CheckUserFieldPermissionRequest) Reset() {
	*x = CheckUserFieldPermissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserFieldPermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserFieldPermissionRequest) ProtoMessage() {}

func (x *CheckUserFieldPermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserFieldPermissionRequest.ProtoReflect.Descriptor instead.
func (*CheckUserFieldPermissionRequest) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{6}
}

func (x *CheckUserFieldPermissionRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CheckUserFieldPermissionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CheckUserFieldPermissionRequest) GetObjectApiName() string {
	if x != nil {
		return x.ObjectApiName
	}
	return ""
}

func (x *CheckUserFieldPermissionRequest) GetFieldApiName() string {
	if x != nil {
		return x.FieldApiName
	}
	return ""
}

func (x *CheckUserFieldPermissionRequest) GetPermission() PermissionType {
	if x != nil {
		return x.Permission
	}
	return PermissionType_PERMISSION_TYPE_UNSPECIFIED
}

func (x *CheckUserFieldPermissionRequest) GetTtlSeconds() int32 {
	if x != nil && x.TtlSeconds != nil {
		return *x.TtlSeconds
	}
	return 0
}

type GetBulkObjectPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId       string   `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                     // Tenant identifier (UUID)
	UserId         string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                           // User record ID (e.g., "usr_a1b2c3d4e5f67890")
	ObjectApiNames []string `protobuf:"bytes,3,rep,name=object_api_names,json=objectApiNames,proto3" json:"object_api_names,omitempty"` // List of object API names
	TtlSeconds     *int32   `protobuf:"varint,4,opt,name=ttl_seconds,json=ttlSeconds,proto3,oneof" json:"ttl_seconds,omitempty"`        // Cache TTL in seconds (default: 3600)
}

func (x *GetBulkObjectPermissionsRequest) Reset() {
	*x = GetBulkObjectPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBulkObjectPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBulkObjectPermissionsRequest) ProtoMessage() {}

func (x *GetBulkObjectPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBulkObjectPermissionsRequest.ProtoReflect.Descriptor instead.
func (*GetBulkObjectPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{7}
}

func (x *GetBulkObjectPermissionsRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *GetBulkObjectPermissionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetBulkObjectPermissionsRequest) GetObjectApiNames() []string {
	if x != nil {
		return x.ObjectApiNames
	}
	return nil
}

func (x *GetBulkObjectPermissionsRequest) GetTtlSeconds() int32 {
	if x != nil && x.TtlSeconds != nil {
		return *x.TtlSeconds
	}
	return 0
}

type GetBulkFieldPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId      string   `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                  // Tenant identifier (UUID)
	UserId        string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                        // User record ID (e.g., "usr_a1b2c3d4e5f67890")
	ObjectApiName string   `protobuf:"bytes,3,opt,name=object_api_name,json=objectApiName,proto3" json:"object_api_name,omitempty"` // Object API name (e.g., "user", "order")
	FieldApiNames []string `protobuf:"bytes,4,rep,name=field_api_names,json=fieldApiNames,proto3" json:"field_api_names,omitempty"` // List of field API names
	TtlSeconds    *int32   `protobuf:"varint,5,opt,name=ttl_seconds,json=ttlSeconds,proto3,oneof" json:"ttl_seconds,omitempty"`     // Cache TTL in seconds (default: 3600)
}

func (x *GetBulkFieldPermissionsRequest) Reset() {
	*x = GetBulkFieldPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBulkFieldPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBulkFieldPermissionsRequest) ProtoMessage() {}

func (x *GetBulkFieldPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBulkFieldPermissionsRequest.ProtoReflect.Descriptor instead.
func (*GetBulkFieldPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{8}
}

func (x *GetBulkFieldPermissionsRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *GetBulkFieldPermissionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetBulkFieldPermissionsRequest) GetObjectApiName() string {
	if x != nil {
		return x.ObjectApiName
	}
	return ""
}

func (x *GetBulkFieldPermissionsRequest) GetFieldApiNames() []string {
	if x != nil {
		return x.FieldApiNames
	}
	return nil
}

func (x *GetBulkFieldPermissionsRequest) GetTtlSeconds() int32 {
	if x != nil && x.TtlSeconds != nil {
		return *x.TtlSeconds
	}
	return 0
}

type GetUserObjectPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permission *ObjectPermission `protobuf:"bytes,1,opt,name=permission,proto3" json:"permission,omitempty"`
	CacheInfo  *CacheInfo        `protobuf:"bytes,2,opt,name=cache_info,json=cacheInfo,proto3" json:"cache_info,omitempty"`
}

func (x *GetUserObjectPermissionsResponse) Reset() {
	*x = GetUserObjectPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserObjectPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserObjectPermissionsResponse) ProtoMessage() {}

func (x *GetUserObjectPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserObjectPermissionsResponse.ProtoReflect.Descriptor instead.
func (*GetUserObjectPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{9}
}

func (x *GetUserObjectPermissionsResponse) GetPermission() *ObjectPermission {
	if x != nil {
		return x.Permission
	}
	return nil
}

func (x *GetUserObjectPermissionsResponse) GetCacheInfo() *CacheInfo {
	if x != nil {
		return x.CacheInfo
	}
	return nil
}

type GetUserFieldPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permission *FieldPermission `protobuf:"bytes,1,opt,name=permission,proto3" json:"permission,omitempty"`
	CacheInfo  *CacheInfo       `protobuf:"bytes,2,opt,name=cache_info,json=cacheInfo,proto3" json:"cache_info,omitempty"`
}

func (x *GetUserFieldPermissionsResponse) Reset() {
	*x = GetUserFieldPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserFieldPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFieldPermissionsResponse) ProtoMessage() {}

func (x *GetUserFieldPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFieldPermissionsResponse.ProtoReflect.Descriptor instead.
func (*GetUserFieldPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{10}
}

func (x *GetUserFieldPermissionsResponse) GetPermission() *FieldPermission {
	if x != nil {
		return x.Permission
	}
	return nil
}

func (x *GetUserFieldPermissionsResponse) GetCacheInfo() *CacheInfo {
	if x != nil {
		return x.CacheInfo
	}
	return nil
}

type GetUserGroupMembershipsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memberships []*GroupMembership `protobuf:"bytes,1,rep,name=memberships,proto3" json:"memberships,omitempty"`
	TotalCount  int32              `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *GetUserGroupMembershipsResponse) Reset() {
	*x = GetUserGroupMembershipsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserGroupMembershipsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserGroupMembershipsResponse) ProtoMessage() {}

func (x *GetUserGroupMembershipsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserGroupMembershipsResponse.ProtoReflect.Descriptor instead.
func (*GetUserGroupMembershipsResponse) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{11}
}

func (x *GetUserGroupMembershipsResponse) GetMemberships() []*GroupMembership {
	if x != nil {
		return x.Memberships
	}
	return nil
}

func (x *GetUserGroupMembershipsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type GetAllUserObjectPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions []*ObjectPermission `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
	TotalCount  int32               `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	CacheInfo   *CacheInfo          `protobuf:"bytes,3,opt,name=cache_info,json=cacheInfo,proto3" json:"cache_info,omitempty"`
}

func (x *GetAllUserObjectPermissionsResponse) Reset() {
	*x = GetAllUserObjectPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllUserObjectPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllUserObjectPermissionsResponse) ProtoMessage() {}

func (x *GetAllUserObjectPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllUserObjectPermissionsResponse.ProtoReflect.Descriptor instead.
func (*GetAllUserObjectPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{12}
}

func (x *GetAllUserObjectPermissionsResponse) GetPermissions() []*ObjectPermission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *GetAllUserObjectPermissionsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetAllUserObjectPermissionsResponse) GetCacheInfo() *CacheInfo {
	if x != nil {
		return x.CacheInfo
	}
	return nil
}

type GetAllUserFieldPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions []*FieldPermission `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
	TotalCount  int32              `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	CacheInfo   *CacheInfo         `protobuf:"bytes,3,opt,name=cache_info,json=cacheInfo,proto3" json:"cache_info,omitempty"`
}

func (x *GetAllUserFieldPermissionsResponse) Reset() {
	*x = GetAllUserFieldPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllUserFieldPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllUserFieldPermissionsResponse) ProtoMessage() {}

func (x *GetAllUserFieldPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllUserFieldPermissionsResponse.ProtoReflect.Descriptor instead.
func (*GetAllUserFieldPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{13}
}

func (x *GetAllUserFieldPermissionsResponse) GetPermissions() []*FieldPermission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *GetAllUserFieldPermissionsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetAllUserFieldPermissionsResponse) GetCacheInfo() *CacheInfo {
	if x != nil {
		return x.CacheInfo
	}
	return nil
}

type CheckUserObjectPermissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasPermission      bool           `protobuf:"varint,1,opt,name=has_permission,json=hasPermission,proto3" json:"has_permission,omitempty"`
	RequiredPermission PermissionType `protobuf:"varint,2,opt,name=required_permission,json=requiredPermission,proto3,enum=iam.permissions.v1.PermissionType" json:"required_permission,omitempty"`
	ActualPermission   PermissionType `protobuf:"varint,3,opt,name=actual_permission,json=actualPermission,proto3,enum=iam.permissions.v1.PermissionType" json:"actual_permission,omitempty"`
	CacheInfo          *CacheInfo     `protobuf:"bytes,4,opt,name=cache_info,json=cacheInfo,proto3" json:"cache_info,omitempty"`
}

func (x *CheckUserObjectPermissionResponse) Reset() {
	*x = CheckUserObjectPermissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserObjectPermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserObjectPermissionResponse) ProtoMessage() {}

func (x *CheckUserObjectPermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserObjectPermissionResponse.ProtoReflect.Descriptor instead.
func (*CheckUserObjectPermissionResponse) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{14}
}

func (x *CheckUserObjectPermissionResponse) GetHasPermission() bool {
	if x != nil {
		return x.HasPermission
	}
	return false
}

func (x *CheckUserObjectPermissionResponse) GetRequiredPermission() PermissionType {
	if x != nil {
		return x.RequiredPermission
	}
	return PermissionType_PERMISSION_TYPE_UNSPECIFIED
}

func (x *CheckUserObjectPermissionResponse) GetActualPermission() PermissionType {
	if x != nil {
		return x.ActualPermission
	}
	return PermissionType_PERMISSION_TYPE_UNSPECIFIED
}

func (x *CheckUserObjectPermissionResponse) GetCacheInfo() *CacheInfo {
	if x != nil {
		return x.CacheInfo
	}
	return nil
}

type CheckUserFieldPermissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasPermission      bool           `protobuf:"varint,1,opt,name=has_permission,json=hasPermission,proto3" json:"has_permission,omitempty"`
	RequiredPermission PermissionType `protobuf:"varint,2,opt,name=required_permission,json=requiredPermission,proto3,enum=iam.permissions.v1.PermissionType" json:"required_permission,omitempty"`
	ActualPermission   PermissionType `protobuf:"varint,3,opt,name=actual_permission,json=actualPermission,proto3,enum=iam.permissions.v1.PermissionType" json:"actual_permission,omitempty"`
	CacheInfo          *CacheInfo     `protobuf:"bytes,4,opt,name=cache_info,json=cacheInfo,proto3" json:"cache_info,omitempty"`
}

func (x *CheckUserFieldPermissionResponse) Reset() {
	*x = CheckUserFieldPermissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserFieldPermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserFieldPermissionResponse) ProtoMessage() {}

func (x *CheckUserFieldPermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserFieldPermissionResponse.ProtoReflect.Descriptor instead.
func (*CheckUserFieldPermissionResponse) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{15}
}

func (x *CheckUserFieldPermissionResponse) GetHasPermission() bool {
	if x != nil {
		return x.HasPermission
	}
	return false
}

func (x *CheckUserFieldPermissionResponse) GetRequiredPermission() PermissionType {
	if x != nil {
		return x.RequiredPermission
	}
	return PermissionType_PERMISSION_TYPE_UNSPECIFIED
}

func (x *CheckUserFieldPermissionResponse) GetActualPermission() PermissionType {
	if x != nil {
		return x.ActualPermission
	}
	return PermissionType_PERMISSION_TYPE_UNSPECIFIED
}

func (x *CheckUserFieldPermissionResponse) GetCacheInfo() *CacheInfo {
	if x != nil {
		return x.CacheInfo
	}
	return nil
}

type GetBulkObjectPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions []*ObjectPermission `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
	TotalCount  int32               `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	CacheInfo   *CacheInfo          `protobuf:"bytes,3,opt,name=cache_info,json=cacheInfo,proto3" json:"cache_info,omitempty"`
}

func (x *GetBulkObjectPermissionsResponse) Reset() {
	*x = GetBulkObjectPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBulkObjectPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBulkObjectPermissionsResponse) ProtoMessage() {}

func (x *GetBulkObjectPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBulkObjectPermissionsResponse.ProtoReflect.Descriptor instead.
func (*GetBulkObjectPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{16}
}

func (x *GetBulkObjectPermissionsResponse) GetPermissions() []*ObjectPermission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *GetBulkObjectPermissionsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetBulkObjectPermissionsResponse) GetCacheInfo() *CacheInfo {
	if x != nil {
		return x.CacheInfo
	}
	return nil
}

type GetBulkFieldPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions []*FieldPermission `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
	TotalCount  int32              `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	CacheInfo   *CacheInfo         `protobuf:"bytes,3,opt,name=cache_info,json=cacheInfo,proto3" json:"cache_info,omitempty"`
}

func (x *GetBulkFieldPermissionsResponse) Reset() {
	*x = GetBulkFieldPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBulkFieldPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBulkFieldPermissionsResponse) ProtoMessage() {}

func (x *GetBulkFieldPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBulkFieldPermissionsResponse.ProtoReflect.Descriptor instead.
func (*GetBulkFieldPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{17}
}

func (x *GetBulkFieldPermissionsResponse) GetPermissions() []*FieldPermission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *GetBulkFieldPermissionsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetBulkFieldPermissionsResponse) GetCacheInfo() *CacheInfo {
	if x != nil {
		return x.CacheInfo
	}
	return nil
}

type ObjectPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectApiName string                 `protobuf:"bytes,1,opt,name=object_api_name,json=objectApiName,proto3" json:"object_api_name,omitempty"` // Object API name (e.g., "user", "order")
	ObjectId      int64                  `protobuf:"varint,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`                 // Internal object ID
	Permissions   *PermissionBitmask     `protobuf:"bytes,3,opt,name=permissions,proto3" json:"permissions,omitempty"`                            // Combined permission bitmask
	Sources       []*PermissionSource    `protobuf:"bytes,4,rep,name=sources,proto3" json:"sources,omitempty"`                                    // Sources of permissions (groups, roles, direct)
	ComputedAt    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=computed_at,json=computedAt,proto3" json:"computed_at,omitempty"`            // When permissions were computed
}

func (x *ObjectPermission) Reset() {
	*x = ObjectPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectPermission) ProtoMessage() {}

func (x *ObjectPermission) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectPermission.ProtoReflect.Descriptor instead.
func (*ObjectPermission) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{18}
}

func (x *ObjectPermission) GetObjectApiName() string {
	if x != nil {
		return x.ObjectApiName
	}
	return ""
}

func (x *ObjectPermission) GetObjectId() int64 {
	if x != nil {
		return x.ObjectId
	}
	return 0
}

func (x *ObjectPermission) GetPermissions() *PermissionBitmask {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *ObjectPermission) GetSources() []*PermissionSource {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *ObjectPermission) GetComputedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ComputedAt
	}
	return nil
}

type FieldPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectApiName string                 `protobuf:"bytes,1,opt,name=object_api_name,json=objectApiName,proto3" json:"object_api_name,omitempty"` // Object API name (e.g., "user", "order")
	FieldApiName  string                 `protobuf:"bytes,2,opt,name=field_api_name,json=fieldApiName,proto3" json:"field_api_name,omitempty"`    // Field API name (e.g., "email", "salary")
	ObjectId      int64                  `protobuf:"varint,3,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`                 // Internal object ID
	FieldId       int64                  `protobuf:"varint,4,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`                    // Internal field ID
	Permissions   *PermissionBitmask     `protobuf:"bytes,5,opt,name=permissions,proto3" json:"permissions,omitempty"`                            // Combined permission bitmask
	Sources       []*PermissionSource    `protobuf:"bytes,6,rep,name=sources,proto3" json:"sources,omitempty"`                                    // Sources of permissions (groups, roles, direct)
	ComputedAt    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=computed_at,json=computedAt,proto3" json:"computed_at,omitempty"`            // When permissions were computed
}

func (x *FieldPermission) Reset() {
	*x = FieldPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldPermission) ProtoMessage() {}

func (x *FieldPermission) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldPermission.ProtoReflect.Descriptor instead.
func (*FieldPermission) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{19}
}

func (x *FieldPermission) GetObjectApiName() string {
	if x != nil {
		return x.ObjectApiName
	}
	return ""
}

func (x *FieldPermission) GetFieldApiName() string {
	if x != nil {
		return x.FieldApiName
	}
	return ""
}

func (x *FieldPermission) GetObjectId() int64 {
	if x != nil {
		return x.ObjectId
	}
	return 0
}

func (x *FieldPermission) GetFieldId() int64 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (x *FieldPermission) GetPermissions() *PermissionBitmask {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *FieldPermission) GetSources() []*PermissionSource {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *FieldPermission) GetComputedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ComputedAt
	}
	return nil
}

type GroupMembership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupRecordId   string                 `protobuf:"bytes,1,opt,name=group_record_id,json=groupRecordId,proto3" json:"group_record_id,omitempty"`                                          // Group record ID (e.g., "grp_a1b2c3d4e5f67890")
	GroupLabel      string                 `protobuf:"bytes,2,opt,name=group_label,json=groupLabel,proto3" json:"group_label,omitempty"`                                                     // Group display name
	GroupApiName    string                 `protobuf:"bytes,3,opt,name=group_api_name,json=groupApiName,proto3" json:"group_api_name,omitempty"`                                             // Group API name
	GroupType       GroupType              `protobuf:"varint,4,opt,name=group_type,json=groupType,proto3,enum=iam.permissions.v1.GroupType" json:"group_type,omitempty"`                     // Type of group
	MembershipType  MembershipType         `protobuf:"varint,5,opt,name=membership_type,json=membershipType,proto3,enum=iam.permissions.v1.MembershipType" json:"membership_type,omitempty"` // How user became a member
	RelatedEntityId string                 `protobuf:"bytes,6,opt,name=related_entity_id,json=relatedEntityId,proto3" json:"related_entity_id,omitempty"`                                    // Related entity (role or territory) if applicable
	JoinedAt        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty"`                                                           // When user joined the group
	ExpiresAt       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`                                                        // When membership expires (if applicable)
}

func (x *GroupMembership) Reset() {
	*x = GroupMembership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMembership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMembership) ProtoMessage() {}

func (x *GroupMembership) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMembership.ProtoReflect.Descriptor instead.
func (*GroupMembership) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{20}
}

func (x *GroupMembership) GetGroupRecordId() string {
	if x != nil {
		return x.GroupRecordId
	}
	return ""
}

func (x *GroupMembership) GetGroupLabel() string {
	if x != nil {
		return x.GroupLabel
	}
	return ""
}

func (x *GroupMembership) GetGroupApiName() string {
	if x != nil {
		return x.GroupApiName
	}
	return ""
}

func (x *GroupMembership) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_GROUP_TYPE_UNSPECIFIED
}

func (x *GroupMembership) GetMembershipType() MembershipType {
	if x != nil {
		return x.MembershipType
	}
	return MembershipType_MEMBERSHIP_TYPE_UNSPECIFIED
}

func (x *GroupMembership) GetRelatedEntityId() string {
	if x != nil {
		return x.RelatedEntityId
	}
	return ""
}

func (x *GroupMembership) GetJoinedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinedAt
	}
	return nil
}

func (x *GroupMembership) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

type PermissionSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceType  SourceType         `protobuf:"varint,1,opt,name=source_type,json=sourceType,proto3,enum=iam.permissions.v1.SourceType" json:"source_type,omitempty"` // Type of source (group, role, direct)
	SourceId    string             `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`                                           // ID of the source
	SourceName  string             `protobuf:"bytes,3,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`                                     // Name of the source
	Permissions *PermissionBitmask `protobuf:"bytes,4,opt,name=permissions,proto3" json:"permissions,omitempty"`                                                     // Permissions from this source
	Priority    int32              `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`                                                          // Priority of this source (higher = more important)
}

func (x *PermissionSource) Reset() {
	*x = PermissionSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionSource) ProtoMessage() {}

func (x *PermissionSource) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionSource.ProtoReflect.Descriptor instead.
func (*PermissionSource) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{21}
}

func (x *PermissionSource) GetSourceType() SourceType {
	if x != nil {
		return x.SourceType
	}
	return SourceType_SOURCE_TYPE_UNSPECIFIED
}

func (x *PermissionSource) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *PermissionSource) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *PermissionSource) GetPermissions() *PermissionBitmask {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *PermissionSource) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type PermissionBitmask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value           int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`                                           // Raw bitmask value
	CanRead         bool     `protobuf:"varint,2,opt,name=can_read,json=canRead,proto3" json:"can_read,omitempty"`                        // READ permission (bit 0, value 1)
	CanUpdate       bool     `protobuf:"varint,3,opt,name=can_update,json=canUpdate,proto3" json:"can_update,omitempty"`                  // UPDATE permission (bit 1, value 2)
	CanCreate       bool     `protobuf:"varint,4,opt,name=can_create,json=canCreate,proto3" json:"can_create,omitempty"`                  // CREATE permission (bit 2, value 4)
	CanDelete       bool     `protobuf:"varint,5,opt,name=can_delete,json=canDelete,proto3" json:"can_delete,omitempty"`                  // DELETE permission (bit 3, value 8)
	PermissionNames []string `protobuf:"bytes,6,rep,name=permission_names,json=permissionNames,proto3" json:"permission_names,omitempty"` // Human-readable permission names
}

func (x *PermissionBitmask) Reset() {
	*x = PermissionBitmask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionBitmask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionBitmask) ProtoMessage() {}

func (x *PermissionBitmask) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionBitmask.ProtoReflect.Descriptor instead.
func (*PermissionBitmask) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{22}
}

func (x *PermissionBitmask) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *PermissionBitmask) GetCanRead() bool {
	if x != nil {
		return x.CanRead
	}
	return false
}

func (x *PermissionBitmask) GetCanUpdate() bool {
	if x != nil {
		return x.CanUpdate
	}
	return false
}

func (x *PermissionBitmask) GetCanCreate() bool {
	if x != nil {
		return x.CanCreate
	}
	return false
}

func (x *PermissionBitmask) GetCanDelete() bool {
	if x != nil {
		return x.CanDelete
	}
	return false
}

func (x *PermissionBitmask) GetPermissionNames() []string {
	if x != nil {
		return x.PermissionNames
	}
	return nil
}

type CacheInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromCache  bool                   `protobuf:"varint,1,opt,name=from_cache,json=fromCache,proto3" json:"from_cache,omitempty"`    // Whether data came from cache
	CachedAt   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=cached_at,json=cachedAt,proto3" json:"cached_at,omitempty"`        // When data was cached
	ExpiresAt  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`     // When cache expires
	TtlSeconds int32                  `protobuf:"varint,4,opt,name=ttl_seconds,json=ttlSeconds,proto3" json:"ttl_seconds,omitempty"` // Cache TTL in seconds
}

func (x *CacheInfo) Reset() {
	*x = CacheInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_permissions_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheInfo) ProtoMessage() {}

func (x *CacheInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iam_permissions_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheInfo.ProtoReflect.Descriptor instead.
func (*CacheInfo) Descriptor() ([]byte, []int) {
	return file_iam_permissions_proto_rawDescGZIP(), []int{23}
}

func (x *CacheInfo) GetFromCache() bool {
	if x != nil {
		return x.FromCache
	}
	return false
}

func (x *CacheInfo) GetCachedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CachedAt
	}
	return nil
}

func (x *CacheInfo) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *CacheInfo) GetTtlSeconds() int32 {
	if x != nil {
		return x.TtlSeconds
	}
	return 0
}

var File_iam_permissions_proto protoreflect.FileDescriptor

var file_iam_permissions_proto_rawDesc = []byte{
	0x0a, 0x15, 0x69, 0x61, 0x6d, 0x2d, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x01, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0b, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70,
	0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x41, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x74,
	0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x0a, 0x74, 0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x22, 0xdd, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x11, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x22, 0x90, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0b, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x74, 0x6c, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x0a, 0x74, 0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xfa,
	0x01, 0x0a, 0x20, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x69, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x74,
	0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x9f, 0x02, 0x0a, 0x1f,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x70, 0x69, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x74, 0x6c, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a,
	0x74, 0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xb7, 0x01,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x74, 0x6c, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x74, 0x6c, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x6c, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x0b, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xa4, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0xca, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xae,
	0x02, 0x0a, 0x21, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61,
	0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x13, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4f, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x10, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xad, 0x02, 0x0a, 0x20, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61,
	0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x13, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4f, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x10, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xc9, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a,
	0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xc7, 0x01, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9d, 0x02, 0x0a, 0x10, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x69, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x47, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x52, 0x0b, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xdd, 0x02, 0x0a, 0x0f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x69, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x41, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x47, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x52, 0x0b, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xab, 0x03, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x41, 0x74, 0x22, 0xf6, 0x01, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x6d,
	0x61, 0x73, 0x6b, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xcc, 0x01, 0x0a,
	0x11, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x6d, 0x61,
	0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x09,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2a, 0x9f, 0x01,
	0x0a, 0x0e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x08, 0x2a,
	0x91, 0x01, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x16, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x42, 0x41, 0x53,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x45, 0x52, 0x52, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x53,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49,
	0x43, 0x10, 0x04, 0x2a, 0x8b, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x53, 0x48, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x48, 0x45, 0x52, 0x49, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x10,
	0x03, 0x2a, 0x89, 0x01, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x45, 0x52, 0x52, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x04, 0x2a, 0xa4, 0x02,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x45,
	0x4e, 0x41, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x08, 0x32, 0xe4, 0x09, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x12, 0x32, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x19,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x75,
	0x6c, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x32, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x6c, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x26, 0x5a, 0x24, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x61,
	0x78, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x63, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_iam_permissions_proto_rawDescOnce sync.Once
	file_iam_permissions_proto_rawDescData = file_iam_permissions_proto_rawDesc
)

func file_iam_permissions_proto_rawDescGZIP() []byte {
	file_iam_permissions_proto_rawDescOnce.Do(func() {
		file_iam_permissions_proto_rawDescData = protoimpl.X.CompressGZIP(file_iam_permissions_proto_rawDescData)
	})
	return file_iam_permissions_proto_rawDescData
}

var file_iam_permissions_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_iam_permissions_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_iam_permissions_proto_goTypes = []interface{}{
	(PermissionType)(0),                         // 0: iam.permissions.v1.PermissionType
	(GroupType)(0),                              // 1: iam.permissions.v1.GroupType
	(MembershipType)(0),                         // 2: iam.permissions.v1.MembershipType
	(SourceType)(0),                             // 3: iam.permissions.v1.SourceType
	(ErrorCode)(0),                              // 4: iam.permissions.v1.ErrorCode
	(*GetUserObjectPermissionsRequest)(nil),     // 5: iam.permissions.v1.GetUserObjectPermissionsRequest
	(*GetUserFieldPermissionsRequest)(nil),      // 6: iam.permissions.v1.GetUserFieldPermissionsRequest
	(*GetUserGroupMembershipsRequest)(nil),      // 7: iam.permissions.v1.GetUserGroupMembershipsRequest
	(*GetAllUserObjectPermissionsRequest)(nil),  // 8: iam.permissions.v1.GetAllUserObjectPermissionsRequest
	(*GetAllUserFieldPermissionsRequest)(nil),   // 9: iam.permissions.v1.GetAllUserFieldPermissionsRequest
	(*CheckUserObjectPermissionRequest)(nil),    // 10: iam.permissions.v1.CheckUserObjectPermissionRequest
	(*CheckUserFieldPermissionRequest)(nil),     // 11: iam.permissions.v1.CheckUserFieldPermissionRequest
	(*GetBulkObjectPermissionsRequest)(nil),     // 12: iam.permissions.v1.GetBulkObjectPermissionsRequest
	(*GetBulkFieldPermissionsRequest)(nil),      // 13: iam.permissions.v1.GetBulkFieldPermissionsRequest
	(*GetUserObjectPermissionsResponse)(nil),    // 14: iam.permissions.v1.GetUserObjectPermissionsResponse
	(*GetUserFieldPermissionsResponse)(nil),     // 15: iam.permissions.v1.GetUserFieldPermissionsResponse
	(*GetUserGroupMembershipsResponse)(nil),     // 16: iam.permissions.v1.GetUserGroupMembershipsResponse
	(*GetAllUserObjectPermissionsResponse)(nil), // 17: iam.permissions.v1.GetAllUserObjectPermissionsResponse
	(*GetAllUserFieldPermissionsResponse)(nil),  // 18: iam.permissions.v1.GetAllUserFieldPermissionsResponse
	(*CheckUserObjectPermissionResponse)(nil),   // 19: iam.permissions.v1.CheckUserObjectPermissionResponse
	(*CheckUserFieldPermissionResponse)(nil),    // 20: iam.permissions.v1.CheckUserFieldPermissionResponse
	(*GetBulkObjectPermissionsResponse)(nil),    // 21: iam.permissions.v1.GetBulkObjectPermissionsResponse
	(*GetBulkFieldPermissionsResponse)(nil),     // 22: iam.permissions.v1.GetBulkFieldPermissionsResponse
	(*ObjectPermission)(nil),                    // 23: iam.permissions.v1.ObjectPermission
	(*FieldPermission)(nil),                     // 24: iam.permissions.v1.FieldPermission
	(*GroupMembership)(nil),                     // 25: iam.permissions.v1.GroupMembership
	(*PermissionSource)(nil),                    // 26: iam.permissions.v1.PermissionSource
	(*PermissionBitmask)(nil),                   // 27: iam.permissions.v1.PermissionBitmask
	(*CacheInfo)(nil),                           // 28: iam.permissions.v1.CacheInfo
	(*timestamppb.Timestamp)(nil),               // 29: google.protobuf.Timestamp
}
var file_iam_permissions_proto_depIdxs = []int32{
	0,  // 0: iam.permissions.v1.CheckUserObjectPermissionRequest.permission:type_name -> iam.permissions.v1.PermissionType
	0,  // 1: iam.permissions.v1.CheckUserFieldPermissionRequest.permission:type_name -> iam.permissions.v1.PermissionType
	23, // 2: iam.permissions.v1.GetUserObjectPermissionsResponse.permission:type_name -> iam.permissions.v1.ObjectPermission
	28, // 3: iam.permissions.v1.GetUserObjectPermissionsResponse.cache_info:type_name -> iam.permissions.v1.CacheInfo
	24, // 4: iam.permissions.v1.GetUserFieldPermissionsResponse.permission:type_name -> iam.permissions.v1.FieldPermission
	28, // 5: iam.permissions.v1.GetUserFieldPermissionsResponse.cache_info:type_name -> iam.permissions.v1.CacheInfo
	25, // 6: iam.permissions.v1.GetUserGroupMembershipsResponse.memberships:type_name -> iam.permissions.v1.GroupMembership
	23, // 7: iam.permissions.v1.GetAllUserObjectPermissionsResponse.permissions:type_name -> iam.permissions.v1.ObjectPermission
	28, // 8: iam.permissions.v1.GetAllUserObjectPermissionsResponse.cache_info:type_name -> iam.permissions.v1.CacheInfo
	24, // 9: iam.permissions.v1.GetAllUserFieldPermissionsResponse.permissions:type_name -> iam.permissions.v1.FieldPermission
	28, // 10: iam.permissions.v1.GetAllUserFieldPermissionsResponse.cache_info:type_name -> iam.permissions.v1.CacheInfo
	0,  // 11: iam.permissions.v1.CheckUserObjectPermissionResponse.required_permission:type_name -> iam.permissions.v1.PermissionType
	0,  // 12: iam.permissions.v1.CheckUserObjectPermissionResponse.actual_permission:type_name -> iam.permissions.v1.PermissionType
	28, // 13: iam.permissions.v1.CheckUserObjectPermissionResponse.cache_info:type_name -> iam.permissions.v1.CacheInfo
	0,  // 14: iam.permissions.v1.CheckUserFieldPermissionResponse.required_permission:type_name -> iam.permissions.v1.PermissionType
	0,  // 15: iam.permissions.v1.CheckUserFieldPermissionResponse.actual_permission:type_name -> iam.permissions.v1.PermissionType
	28, // 16: iam.permissions.v1.CheckUserFieldPermissionResponse.cache_info:type_name -> iam.permissions.v1.CacheInfo
	23, // 17: iam.permissions.v1.GetBulkObjectPermissionsResponse.permissions:type_name -> iam.permissions.v1.ObjectPermission
	28, // 18: iam.permissions.v1.GetBulkObjectPermissionsResponse.cache_info:type_name -> iam.permissions.v1.CacheInfo
	24, // 19: iam.permissions.v1.GetBulkFieldPermissionsResponse.permissions:type_name -> iam.permissions.v1.FieldPermission
	28, // 20: iam.permissions.v1.GetBulkFieldPermissionsResponse.cache_info:type_name -> iam.permissions.v1.CacheInfo
	27, // 21: iam.permissions.v1.ObjectPermission.permissions:type_name -> iam.permissions.v1.PermissionBitmask
	26, // 22: iam.permissions.v1.ObjectPermission.sources:type_name -> iam.permissions.v1.PermissionSource
	29, // 23: iam.permissions.v1.ObjectPermission.computed_at:type_name -> google.protobuf.Timestamp
	27, // 24: iam.permissions.v1.FieldPermission.permissions:type_name -> iam.permissions.v1.PermissionBitmask
	26, // 25: iam.permissions.v1.FieldPermission.sources:type_name -> iam.permissions.v1.PermissionSource
	29, // 26: iam.permissions.v1.FieldPermission.computed_at:type_name -> google.protobuf.Timestamp
	1,  // 27: iam.permissions.v1.GroupMembership.group_type:type_name -> iam.permissions.v1.GroupType
	2,  // 28: iam.permissions.v1.GroupMembership.membership_type:type_name -> iam.permissions.v1.MembershipType
	29, // 29: iam.permissions.v1.GroupMembership.joined_at:type_name -> google.protobuf.Timestamp
	29, // 30: iam.permissions.v1.GroupMembership.expires_at:type_name -> google.protobuf.Timestamp
	3,  // 31: iam.permissions.v1.PermissionSource.source_type:type_name -> iam.permissions.v1.SourceType
	27, // 32: iam.permissions.v1.PermissionSource.permissions:type_name -> iam.permissions.v1.PermissionBitmask
	29, // 33: iam.permissions.v1.CacheInfo.cached_at:type_name -> google.protobuf.Timestamp
	29, // 34: iam.permissions.v1.CacheInfo.expires_at:type_name -> google.protobuf.Timestamp
	5,  // 35: iam.permissions.v1.PermissionService.GetUserObjectPermissions:input_type -> iam.permissions.v1.GetUserObjectPermissionsRequest
	6,  // 36: iam.permissions.v1.PermissionService.GetUserFieldPermissions:input_type -> iam.permissions.v1.GetUserFieldPermissionsRequest
	7,  // 37: iam.permissions.v1.PermissionService.GetUserGroupMemberships:input_type -> iam.permissions.v1.GetUserGroupMembershipsRequest
	8,  // 38: iam.permissions.v1.PermissionService.GetAllUserObjectPermissions:input_type -> iam.permissions.v1.GetAllUserObjectPermissionsRequest
	9,  // 39: iam.permissions.v1.PermissionService.GetAllUserFieldPermissions:input_type -> iam.permissions.v1.GetAllUserFieldPermissionsRequest
	10, // 40: iam.permissions.v1.PermissionService.CheckUserObjectPermission:input_type -> iam.permissions.v1.CheckUserObjectPermissionRequest
	11, // 41: iam.permissions.v1.PermissionService.CheckUserFieldPermission:input_type -> iam.permissions.v1.CheckUserFieldPermissionRequest
	12, // 42: iam.permissions.v1.PermissionService.GetBulkObjectPermissions:input_type -> iam.permissions.v1.GetBulkObjectPermissionsRequest
	13, // 43: iam.permissions.v1.PermissionService.GetBulkFieldPermissions:input_type -> iam.permissions.v1.GetBulkFieldPermissionsRequest
	14, // 44: iam.permissions.v1.PermissionService.GetUserObjectPermissions:output_type -> iam.permissions.v1.GetUserObjectPermissionsResponse
	15, // 45: iam.permissions.v1.PermissionService.GetUserFieldPermissions:output_type -> iam.permissions.v1.GetUserFieldPermissionsResponse
	16, // 46: iam.permissions.v1.PermissionService.GetUserGroupMemberships:output_type -> iam.permissions.v1.GetUserGroupMembershipsResponse
	17, // 47: iam.permissions.v1.PermissionService.GetAllUserObjectPermissions:output_type -> iam.permissions.v1.GetAllUserObjectPermissionsResponse
	18, // 48: iam.permissions.v1.PermissionService.GetAllUserFieldPermissions:output_type -> iam.permissions.v1.GetAllUserFieldPermissionsResponse
	19, // 49: iam.permissions.v1.PermissionService.CheckUserObjectPermission:output_type -> iam.permissions.v1.CheckUserObjectPermissionResponse
	20, // 50: iam.permissions.v1.PermissionService.CheckUserFieldPermission:output_type -> iam.permissions.v1.CheckUserFieldPermissionResponse
	21, // 51: iam.permissions.v1.PermissionService.GetBulkObjectPermissions:output_type -> iam.permissions.v1.GetBulkObjectPermissionsResponse
	22, // 52: iam.permissions.v1.PermissionService.GetBulkFieldPermissions:output_type -> iam.permissions.v1.GetBulkFieldPermissionsResponse
	44, // [44:53] is the sub-list for method output_type
	35, // [35:44] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_iam_permissions_proto_init() }
func file_iam_permissions_proto_init() {
	if File_iam_permissions_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_iam_permissions_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserObjectPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserFieldPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserGroupMembershipsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllUserObjectPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllUserFieldPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserObjectPermissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserFieldPermissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBulkObjectPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBulkFieldPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserObjectPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserFieldPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserGroupMembershipsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllUserObjectPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllUserFieldPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserObjectPermissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserFieldPermissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBulkObjectPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBulkFieldPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMembership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionBitmask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_permissions_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_iam_permissions_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_iam_permissions_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_iam_permissions_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_iam_permissions_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_iam_permissions_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_iam_permissions_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_iam_permissions_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_iam_permissions_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_iam_permissions_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_iam_permissions_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_iam_permissions_proto_goTypes,
		DependencyIndexes: file_iam_permissions_proto_depIdxs,
		EnumInfos:         file_iam_permissions_proto_enumTypes,
		MessageInfos:      file_iam_permissions_proto_msgTypes,
	}.Build()
	File_iam_permissions_proto = out.File
	file_iam_permissions_proto_rawDesc = nil
	file_iam_permissions_proto_goTypes = nil
	file_iam_permissions_proto_depIdxs = nil
}
