openapi: 3.0.3
info:
  title: IAM Service API
  description: |
    Identity and Access Management (IAM) Service API
    
    This service provides comprehensive identity and access management functionality including:
    - User management with hierarchical organization
    - Role-based access control (RBAC)
    - Territory management for geographical/organizational boundaries
    - Group management with different types (regular, queue, role-based, territory-based)
    - Principal and identity management for authentication
    - Security objects and fields for fine-grained permissions
    - Permission sets for object-level and field-level security
    - Cache management for performance optimization
    
    The service follows Event-Driven Architecture patterns with outbox pattern for reliable event publishing.
  version: 1.0.0
  contact:
    name: IAM Service Team
    email: iam-team@company.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.company.com/iam/v1
    description: Production server
  - url: https://staging-api.company.com/iam/v1
    description: Staging server
  - url: http://localhost:8080/api/v1
    description: Development server

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  # User Management
  /users:
    get:
      tags:
        - Users
      summary: Get list of users
      description: Retrieve a paginated list of users with optional filtering
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          description: Search term for name or email
          schema:
            type: string
        - name: manager_id
          in: query
          description: Filter by manager ID
          schema:
            type: string
            pattern: '^usr_[a-f0-9]{16}$'
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Users
      summary: Create a new user
      description: Create a new user in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: User with this email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{user_id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            pattern: '^usr_[a-f0-9]{16}$'
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Users
      summary: Update user
      description: Update an existing user
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            pattern: '^usr_[a-f0-9]{16}$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Users
      summary: Delete user
      description: Soft delete a user (mark as deleted)
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            pattern: '^usr_[a-f0-9]{16}$'
      responses:
        '204':
          description: User deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{user_id}/manager:
    get:
      tags:
        - Users
      summary: Get user's manager
      description: Retrieve the manager of a specific user
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            pattern: '^usr_[a-f0-9]{16}$'
      responses:
        '200':
          description: Manager retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '204':
          description: User has no manager
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Users
      summary: Assign manager to user
      description: Assign or update the manager for a specific user
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            pattern: '^usr_[a-f0-9]{16}$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                manager_id:
                  type: string
                  pattern: '^usr_[a-f0-9]{16}$'
                  description: Manager's user ID (null to remove manager)
                  nullable: true
              required:
                - manager_id
      responses:
        '200':
          description: Manager assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{user_id}/subordinates:
    get:
      tags:
        - Users
      summary: Get user's subordinates
      description: Retrieve all subordinates of a specific user
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            pattern: '^usr_[a-f0-9]{16}$'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Subordinates retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Role Management
  /roles:
    get:
      tags:
        - Roles
      summary: Get list of roles
      description: Retrieve a paginated list of roles with optional filtering
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          description: Search term for label or api_name
          schema:
            type: string
        - name: parent_id
          in: query
          description: Filter by parent role ID
          schema:
            type: integer
      responses:
        '200':
          description: List of roles retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Roles
      summary: Create a new role
      description: Create a new role in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleRequest'
      responses:
        '201':
          description: Role created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: Role with this api_name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /roles/{role_id}:
    get:
      tags:
        - Roles
      summary: Get role by ID
      description: Retrieve a specific role by its ID
      parameters:
        - name: role_id
          in: path
          required: true
          description: Role ID
          schema:
            type: integer
      responses:
        '200':
          description: Role retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Roles
      summary: Update role
      description: Update an existing role
      parameters:
        - name: role_id
          in: path
          required: true
          description: Role ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleRequest'
      responses:
        '200':
          description: Role updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Roles
      summary: Delete role
      description: Soft delete a role (mark as deleted)
      parameters:
        - name: role_id
          in: path
          required: true
          description: Role ID
          schema:
            type: integer
      responses:
        '204':
          description: Role deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /roles/{role_id}/children:
    get:
      tags:
        - Roles
      summary: Get child roles
      description: Retrieve all child roles of a specific role
      parameters:
        - name: role_id
          in: path
          required: true
          description: Role ID
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Child roles retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /roles/{role_id}/parent:
    put:
      tags:
        - Roles
      summary: Set parent role
      description: Set or update the parent role for a specific role
      parameters:
        - name: role_id
          in: path
          required: true
          description: Role ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                parent_id:
                  type: integer
                  description: Parent role ID (null to remove parent)
                  nullable: true
              required:
                - parent_id
      responses:
        '200':
          description: Parent role set successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Territory Management
  /territories:
    get:
      tags:
        - Territories
      summary: Get list of territories
      description: Retrieve a paginated list of territories with optional filtering
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          description: Search term for label or api_name
          schema:
            type: string
        - name: parent_id
          in: query
          description: Filter by parent territory ID
          schema:
            type: integer
      responses:
        '200':
          description: List of territories retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Territory'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Territories
      summary: Create a new territory
      description: Create a new territory in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTerritoryRequest'
      responses:
        '201':
          description: Territory created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Territory'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: Territory with this api_name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /territories/{territory_id}:
    get:
      tags:
        - Territories
      summary: Get territory by ID
      description: Retrieve a specific territory by its ID
      parameters:
        - name: territory_id
          in: path
          required: true
          description: Territory ID
          schema:
            type: integer
      responses:
        '200':
          description: Territory retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Territory'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Territories
      summary: Update territory
      description: Update an existing territory
      parameters:
        - name: territory_id
          in: path
          required: true
          description: Territory ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTerritoryRequest'
      responses:
        '200':
          description: Territory updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Territory'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Territories
      summary: Delete territory
      description: Soft delete a territory (mark as deleted)
      parameters:
        - name: territory_id
          in: path
          required: true
          description: Territory ID
          schema:
            type: integer
      responses:
        '204':
          description: Territory deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /territories/{territory_id}/children:
    get:
      tags:
        - Territories
      summary: Get child territories
      description: Retrieve all child territories of a specific territory
      parameters:
        - name: territory_id
          in: path
          required: true
          description: Territory ID
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Child territories retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Territory'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /territories/{territory_id}/parent:
    put:
      tags:
        - Territories
      summary: Set parent territory
      description: Set or update the parent territory for a specific territory
      parameters:
        - name: territory_id
          in: path
          required: true
          description: Territory ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                parent_id:
                  type: integer
                  description: Parent territory ID (null to remove parent)
                  nullable: true
              required:
                - parent_id
      responses:
        '200':
          description: Parent territory set successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Territory'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Group Management
  /groups:
    get:
      tags:
        - Groups
      summary: Get list of groups
      description: Retrieve a paginated list of groups with optional filtering
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          description: Search term for label or api_name
          schema:
            type: string
        - name: type
          in: query
          description: Filter by group type
          schema:
            type: string
            enum: [regular, queue, role, role_and_subordinates, territory, territory_and_subordinates]
      responses:
        '200':
          description: List of groups retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Groups
      summary: Create a new group
      description: Create a new group in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
      responses:
        '201':
          description: Group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: Group with this api_name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /groups/{group_id}:
    get:
      tags:
        - Groups
      summary: Get group by ID
      description: Retrieve a specific group by its ID
      parameters:
        - name: group_id
          in: path
          required: true
          description: Group ID
          schema:
            type: integer
      responses:
        '200':
          description: Group retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Groups
      summary: Update group
      description: Update an existing group
      parameters:
        - name: group_id
          in: path
          required: true
          description: Group ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupRequest'
      responses:
        '200':
          description: Group updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Groups
      summary: Delete group
      description: Soft delete a group (mark as deleted)
      parameters:
        - name: group_id
          in: path
          required: true
          description: Group ID
          schema:
            type: integer
      responses:
        '204':
          description: Group deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /groups/{group_id}/members:
    get:
      tags:
        - Groups
      summary: Get group members
      description: Retrieve all members of a specific group
      parameters:
        - name: group_id
          in: path
          required: true
          description: Group ID
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Group members retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupMember'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Groups
      summary: Add member to group
      description: Add a user or group as a member to a specific group
      parameters:
        - name: group_id
          in: path
          required: true
          description: Group ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                member_user_id:
                  type: string
                  pattern: '^usr_[a-f0-9]{16}$'
                  description: User ID to add as member
                  nullable: true
                member_group_id:
                  type: integer
                  description: Group ID to add as member
                  nullable: true
              oneOf:
                - required: [member_user_id]
                - required: [member_group_id]
      responses:
        '201':
          description: Member added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMember'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Member already exists in group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /groups/{group_id}/members/{member_id}:
    delete:
      tags:
        - Groups
      summary: Remove member from group
      description: Remove a member from a specific group
      parameters:
        - name: group_id
          in: path
          required: true
          description: Group ID
          schema:
            type: integer
        - name: member_id
          in: path
          required: true
          description: Group member ID
          schema:
            type: string
            pattern: '^grm_[a-f0-9]{16}$'
      responses:
        '204':
          description: Member removed successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Group Members Management
  /group-members:
    get:
      tags:
        - Group Members
      summary: Get list of group memberships
      description: Retrieve a paginated list of group memberships with optional filtering
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: group_id
          in: query
          description: Filter by group ID
          schema:
            type: integer
        - name: member_user_id
          in: query
          description: Filter by member user ID
          schema:
            type: string
            pattern: '^usr_[a-f0-9]{16}$'
        - name: member_group_id
          in: query
          description: Filter by member group ID
          schema:
            type: integer
      responses:
        '200':
          description: List of group memberships retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupMember'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Group Members
      summary: Create group membership
      description: Create a new group membership (add user or group to a group)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                group_id:
                  type: integer
                  description: Group ID to add member to
                  example: 123
                member_user_id:
                  type: string
                  pattern: '^usr_[a-f0-9]{16}$'
                  description: User ID to add as member
                  nullable: true
                  example: "usr_a1b2c3d4e5f67890"
                member_group_id:
                  type: integer
                  description: Group ID to add as member
                  nullable: true
                  example: 456
              oneOf:
                - required: [group_id, member_user_id]
                - required: [group_id, member_group_id]
      responses:
        '201':
          description: Group membership created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMember'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: Member already exists in group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /group-members/{member_id}:
    get:
      tags:
        - Group Members
      summary: Get group membership by ID
      description: Retrieve a specific group membership by its ID
      parameters:
        - name: member_id
          in: path
          required: true
          description: Group member ID
          schema:
            type: string
            pattern: '^grm_[a-f0-9]{16}$'
      responses:
        '200':
          description: Group membership retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMember'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Group Members
      summary: Update group membership
      description: Update an existing group membership
      parameters:
        - name: member_id
          in: path
          required: true
          description: Group member ID
          schema:
            type: string
            pattern: '^grm_[a-f0-9]{16}$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                group_id:
                  type: integer
                  description: New group ID
                  example: 123
                member_user_id:
                  type: string
                  pattern: '^usr_[a-f0-9]{16}$'
                  description: New member user ID
                  nullable: true
                  example: "usr_a1b2c3d4e5f67890"
                member_group_id:
                  type: integer
                  description: New member group ID
                  nullable: true
                  example: 456
              oneOf:
                - required: [group_id, member_user_id]
                - required: [group_id, member_group_id]
      responses:
        '200':
          description: Group membership updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMember'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Group Members
      summary: Delete group membership
      description: Soft delete a group membership (remove member from group)
      parameters:
        - name: member_id
          in: path
          required: true
          description: Group member ID
          schema:
            type: string
            pattern: '^grm_[a-f0-9]{16}$'
      responses:
        '204':
          description: Group membership deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Principals Management
  /principals:
    get:
      tags:
        - Principals
      summary: Get list of principals
      description: Retrieve a paginated list of principals with optional filtering
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: kind
          in: query
          description: Filter by principal kind
          schema:
            type: string
            enum: [user, service, external, system]
        - name: is_active
          in: query
          description: Filter by active status
          schema:
            type: boolean
        - name: subject_id
          in: query
          description: Filter by subject ID
          schema:
            type: integer
      responses:
        '200':
          description: List of principals retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Principal'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Principals
      summary: Create a new principal
      description: Create a new principal in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePrincipalRequest'
      responses:
        '201':
          description: Principal created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Principal'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: Principal with this login already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /principals/{principal_id}:
    get:
      tags:
        - Principals
      summary: Get principal by ID
      description: Retrieve a specific principal by its ID
      parameters:
        - name: principal_id
          in: path
          required: true
          description: Principal ID
          schema:
            type: integer
      responses:
        '200':
          description: Principal retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Principal'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Principals
      summary: Update principal
      description: Update an existing principal
      parameters:
        - name: principal_id
          in: path
          required: true
          description: Principal ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePrincipalRequest'
      responses:
        '200':
          description: Principal updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Principal'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /principals/{principal_id}/status:
    put:
      tags:
        - Principals
      summary: Change principal status
      description: Activate or deactivate a principal
      parameters:
        - name: principal_id
          in: path
          required: true
          description: Principal ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                is_active:
                  type: boolean
                  description: New active status
                  example: false
              required:
                - is_active
      responses:
        '200':
          description: Principal status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Principal'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /principals/{principal_id}/identities:
    get:
      tags:
        - Principals
      summary: Get principal identities
      description: Retrieve all identities for a specific principal
      parameters:
        - name: principal_id
          in: path
          required: true
          description: Principal ID
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Principal identities retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Identity'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Identities Management
  /identities:
    get:
      tags:
        - Identities
      summary: Get list of identities
      description: Retrieve a paginated list of identities with optional filtering
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: principal_id
          in: query
          description: Filter by principal ID
          schema:
            type: integer
        - name: kind
          in: query
          description: Filter by identity kind
          schema:
            type: string
            enum: [password, api_key, oauth]
        - name: idp
          in: query
          description: Filter by identity provider
          schema:
            type: string
      responses:
        '200':
          description: List of identities retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Identity'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Identities
      summary: Create a new identity
      description: Create a new identity for a principal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIdentityRequest'
      responses:
        '201':
          description: Identity created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identity'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: Identity with this IdP and subject already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /identities/{identity_id}:
    get:
      tags:
        - Identities
      summary: Get identity by ID
      description: Retrieve a specific identity by its ID
      parameters:
        - name: identity_id
          in: path
          required: true
          description: Identity ID
          schema:
            type: integer
      responses:
        '200':
          description: Identity retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identity'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Identities
      summary: Update identity
      description: Update an existing identity
      parameters:
        - name: identity_id
          in: path
          required: true
          description: Identity ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateIdentityRequest'
      responses:
        '200':
          description: Identity updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identity'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Identities
      summary: Delete identity
      description: Delete an identity (remove authentication method)
      parameters:
        - name: identity_id
          in: path
          required: true
          description: Identity ID
          schema:
            type: integer
      responses:
        '204':
          description: Identity deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Authentication
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User email address
                  example: "john.doe@company.com"
                password:
                  type: string
                  format: password
                  description: User password
                  example: "securePassword123"
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout user and invalidate token
      responses:
        '204':
          description: Logout successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh token
      description: Refresh access token using refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  description: Refresh token
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              required:
                - refresh_token
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user info
      description: Get information about the currently authenticated user
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Register a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 255
                  description: User's display name
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  maxLength: 255
                  description: User's email address
                  example: "john.doe@company.com"
                password:
                  type: string
                  format: password
                  minLength: 8
                  description: User password
                  example: "securePassword123"
              required:
                - name
                - email
                - password
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: User with this email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Request password reset for user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User email address
                  example: "john.doe@company.com"
              required:
                - email
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset email sent"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password
      description: Reset user password using reset token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Password reset token
                  example: "reset_token_123"
                password:
                  type: string
                  format: password
                  minLength: 8
                  description: New password
                  example: "newSecurePassword123"
              required:
                - token
                - password
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid or expired reset token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Principal Management
  /principals:
    get:
      tags:
        - Principals
      summary: Get list of principals
      description: Retrieve a paginated list of principals with optional filtering
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: kind
          in: query
          description: Filter by principal kind
          schema:
            type: string
            enum: [user, service, external, system]
        - name: is_active
          in: query
          description: Filter by active status
          schema:
            type: boolean
      responses:
        '200':
          description: List of principals retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Principal'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Principals
      summary: Create a new principal
      description: Create a new principal in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePrincipalRequest'
      responses:
        '201':
          description: Principal created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Principal'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: Principal with this login already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /principals/{principal_id}:
    get:
      tags:
        - Principals
      summary: Get principal by ID
      description: Retrieve a specific principal by its ID
      parameters:
        - name: principal_id
          in: path
          required: true
          description: Principal ID
          schema:
            type: integer
      responses:
        '200':
          description: Principal retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Principal'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Principals
      summary: Update principal
      description: Update an existing principal
      parameters:
        - name: principal_id
          in: path
          required: true
          description: Principal ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePrincipalRequest'
      responses:
        '200':
          description: Principal updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Principal'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /principals/{principal_id}/status:
    put:
      tags:
        - Principals
      summary: Change principal status
      description: Activate or deactivate a principal
      parameters:
        - name: principal_id
          in: path
          required: true
          description: Principal ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                is_active:
                  type: boolean
                  description: Active status
                  example: true
              required:
                - is_active
      responses:
        '200':
          description: Principal status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Principal'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /principals/{principal_id}/identities:
    get:
      tags:
        - Principals
      summary: Get principal identities
      description: Retrieve all identities for a specific principal
      parameters:
        - name: principal_id
          in: path
          required: true
          description: Principal ID
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Principal identities retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Identity'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Identity Management
  /identities:
    get:
      tags:
        - Identities
      summary: Get list of identities
      description: Retrieve a paginated list of identities with optional filtering
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: kind
          in: query
          description: Filter by identity kind
          schema:
            type: string
            enum: [password, api_key, oauth]
        - name: idp
          in: query
          description: Filter by identity provider
          schema:
            type: string
      responses:
        '200':
          description: List of identities retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Identity'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Identities
      summary: Create a new identity
      description: Create a new identity for a principal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIdentityRequest'
      responses:
        '201':
          description: Identity created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identity'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: Identity with this idp+subject combination already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /identities/{identity_id}:
    get:
      tags:
        - Identities
      summary: Get identity by ID
      description: Retrieve a specific identity by its ID
      parameters:
        - name: identity_id
          in: path
          required: true
          description: Identity ID
          schema:
            type: integer
      responses:
        '200':
          description: Identity retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identity'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Identities
      summary: Update identity
      description: Update an existing identity
      parameters:
        - name: identity_id
          in: path
          required: true
          description: Identity ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateIdentityRequest'
      responses:
        '200':
          description: Identity updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identity'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Identities
      summary: Delete identity
      description: Delete an identity
      parameters:
        - name: identity_id
          in: path
          required: true
          description: Identity ID
          schema:
            type: integer
      responses:
        '204':
          description: Identity deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Security Objects Management
  /security/objects:
    get:
      tags:
        - Security Objects
      summary: Get list of security objects
      description: Retrieve a paginated list of security objects
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          description: Search term for api_name
          schema:
            type: string
      responses:
        '200':
          description: List of security objects retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SecurityObject'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Security Objects
      summary: Create a new security object
      description: Create a new security object in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSecurityObjectRequest'
      responses:
        '201':
          description: Security object created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: Security object with this api_name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /security/objects/{object_id}:
    get:
      tags:
        - Security Objects
      summary: Get security object by ID
      description: Retrieve a specific security object by its ID
      parameters:
        - name: object_id
          in: path
          required: true
          description: Security object ID
          schema:
            type: integer
      responses:
        '200':
          description: Security object retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Security Objects
      summary: Update security object
      description: Update an existing security object
      parameters:
        - name: object_id
          in: path
          required: true
          description: Security object ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSecurityObjectRequest'
      responses:
        '200':
          description: Security object updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Security Objects
      summary: Delete security object
      description: Delete a security object
      parameters:
        - name: object_id
          in: path
          required: true
          description: Security object ID
          schema:
            type: integer
      responses:
        '204':
          description: Security object deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /security/objects/{object_id}/fields:
    get:
      tags:
        - Security Fields
      summary: Get security object fields
      description: Retrieve all fields for a specific security object
      parameters:
        - name: object_id
          in: path
          required: true
          description: Security object ID
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Security object fields retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SecurityField'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Security Fields
      summary: Create a new security field
      description: Create a new field for a security object
      parameters:
        - name: object_id
          in: path
          required: true
          description: Security object ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSecurityFieldRequest'
      responses:
        '201':
          description: Security field created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityField'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: Security field with this api_name already exists for this object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /security/fields/{field_id}:
    get:
      tags:
        - Security Fields
      summary: Get security field by ID
      description: Retrieve a specific security field by its ID
      parameters:
        - name: field_id
          in: path
          required: true
          description: Security field ID
          schema:
            type: integer
      responses:
        '200':
          description: Security field retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityField'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Security Fields
      summary: Update security field
      description: Update an existing security field
      parameters:
        - name: field_id
          in: path
          required: true
          description: Security field ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSecurityFieldRequest'
      responses:
        '200':
          description: Security field updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityField'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Security Fields
      summary: Delete security field
      description: Delete a security field
      parameters:
        - name: field_id
          in: path
          required: true
          description: Security field ID
          schema:
            type: integer
      responses:
        '204':
          description: Security field deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Permission Sets Management
  /security/permission-sets:
    get:
      tags:
        - Permission Sets
      summary: Get list of permission sets
      description: Retrieve a paginated list of permission sets with optional filtering
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          description: Search term for api_name or label
          schema:
            type: string
        - name: group_id
          in: query
          description: Filter by group ID
          schema:
            type: integer
      responses:
        '200':
          description: List of permission sets retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PermissionSet'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Permission Sets
      summary: Create a new permission set
      description: Create a new permission set in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePermissionSetRequest'
      responses:
        '201':
          description: Permission set created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionSet'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: Permission set with this api_name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /security/permission-sets/{permission_set_id}:
    get:
      tags:
        - Permission Sets
      summary: Get permission set by ID
      description: Retrieve a specific permission set by its ID
      parameters:
        - name: permission_set_id
          in: path
          required: true
          description: Permission set ID
          schema:
            type: integer
      responses:
        '200':
          description: Permission set retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionSet'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Permission Sets
      summary: Update permission set
      description: Update an existing permission set
      parameters:
        - name: permission_set_id
          in: path
          required: true
          description: Permission set ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePermissionSetRequest'
      responses:
        '200':
          description: Permission set updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionSet'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Permission Sets
      summary: Delete permission set
      description: Soft delete a permission set (mark as deleted)
      parameters:
        - name: permission_set_id
          in: path
          required: true
          description: Permission set ID
          schema:
            type: integer
      responses:
        '204':
          description: Permission set deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /security/permission-sets/{permission_set_id}/object-permissions:
    get:
      tags:
        - Object Permissions
      summary: Get permission set object permissions
      description: Retrieve all object permissions for a specific permission set
      parameters:
        - name: permission_set_id
          in: path
          required: true
          description: Permission set ID
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Object permissions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ObjectPermission'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Object Permissions
      summary: Assign object permissions to permission set
      description: Assign object-level permissions to a permission set
      parameters:
        - name: permission_set_id
          in: path
          required: true
          description: Permission set ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateObjectPermissionRequest'
      responses:
        '201':
          description: Object permissions assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectPermission'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Object permissions already exist for this permission set and object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /security/object-permissions/{permission_id}:
    put:
      tags:
        - Object Permissions
      summary: Update object permissions
      description: Update object-level permissions
      parameters:
        - name: permission_id
          in: path
          required: true
          description: Object permission ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateObjectPermissionRequest'
      responses:
        '200':
          description: Object permissions updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectPermission'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Object Permissions
      summary: Delete object permissions
      description: Remove object-level permissions
      parameters:
        - name: permission_id
          in: path
          required: true
          description: Object permission ID
          schema:
            type: integer
      responses:
        '204':
          description: Object permissions deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /security/permission-sets/{permission_set_id}/field-permissions:
    get:
      tags:
        - Field Permissions
      summary: Get permission set field permissions
      description: Retrieve all field permissions for a specific permission set
      parameters:
        - name: permission_set_id
          in: path
          required: true
          description: Permission set ID
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Field permissions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FieldPermission'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Field Permissions
      summary: Assign field permissions to permission set
      description: Assign field-level permissions to a permission set
      parameters:
        - name: permission_set_id
          in: path
          required: true
          description: Permission set ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFieldPermissionRequest'
      responses:
        '201':
          description: Field permissions assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldPermission'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Field permissions already exist for this permission set and field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /security/field-permissions/{permission_id}:
    put:
      tags:
        - Field Permissions
      summary: Update field permissions
      description: Update field-level permissions
      parameters:
        - name: permission_id
          in: path
          required: true
          description: Field permission ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFieldPermissionRequest'
      responses:
        '200':
          description: Field permissions updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldPermission'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Field Permissions
      summary: Delete field permissions
      description: Remove field-level permissions
      parameters:
        - name: permission_id
          in: path
          required: true
          description: Field permission ID
          schema:
            type: integer
      responses:
        '204':
          description: Field permissions deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Permission Checking
  /permissions/check:
    get:
      tags:
        - Permissions
      summary: Check user permissions
      description: Check if user has specific permissions on objects, fields, or rows
      parameters:
        - name: user_id
          in: query
          required: true
          description: User ID to check permissions for
          schema:
            type: string
            pattern: '^usr_[a-f0-9]{16}$'
        - name: object_id
          in: query
          required: true
          description: Object ID to check permissions for
          schema:
            type: integer
        - name: field_id
          in: query
          description: Field ID for field-level permission check
          schema:
            type: integer
        - name: row_id
          in: query
          description: Row ID for row-level permission check
          schema:
            type: integer
        - name: permission
          in: query
          required: true
          description: Required permission (1=READ, 2=CREATE, 4=UPDATE, 8=DELETE)
          schema:
            type: integer
            enum: [1, 2, 4, 8]
      responses:
        '200':
          description: Permission check result
          content:
            application/json:
              schema:
                type: object
                properties:
                  has_permission:
                    type: boolean
                    description: Whether user has the required permission
                    example: true
                  user_id:
                    type: string
                    description: User ID that was checked
                    example: "usr_a1b2c3d4e5f67890"
                  object_id:
                    type: integer
                    description: Object ID that was checked
                    example: 123
                  field_id:
                    type: integer
                    nullable: true
                    description: Field ID that was checked (if applicable)
                    example: 456
                  row_id:
                    type: integer
                    nullable: true
                    description: Row ID that was checked (if applicable)
                    example: 789
                  required_permission:
                    type: integer
                    description: Required permission that was checked
                    example: 1
                  actual_permissions:
                    type: integer
                    description: Actual permissions the user has
                    example: 7
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /permissions/user/{user_id}/objects:
    get:
      tags:
        - Permissions
      summary: Get user object permissions
      description: Get all object-level permissions for a specific user
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            pattern: '^usr_[a-f0-9]{16}$'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: User object permissions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        object_id:
                          type: integer
                          description: Object ID
                          example: 123
                        object_name:
                          type: string
                          description: Object name
                          example: "user"
                        permissions:
                          type: integer
                          description: Permission bitmask (1=READ, 2=CREATE, 4=UPDATE, 8=DELETE)
                          example: 7
                        permission_names:
                          type: array
                          items:
                            type: string
                          description: Human-readable permission names
                          example: ["READ", "CREATE", "UPDATE"]
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /permissions/user/{user_id}/fields:
    get:
      tags:
        - Permissions
      summary: Get user field permissions
      description: Get all field-level permissions for a specific user
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            pattern: '^usr_[a-f0-9]{16}$'
        - name: object_id
          in: query
          description: Filter by object ID
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: User field permissions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        object_id:
                          type: integer
                          description: Object ID
                          example: 123
                        object_name:
                          type: string
                          description: Object name
                          example: "user"
                        field_id:
                          type: integer
                          description: Field ID
                          example: 456
                        field_name:
                          type: string
                          description: Field name
                          example: "email"
                        permissions:
                          type: integer
                          description: Permission bitmask (1=READ, 2=WRITE)
                          example: 1
                        permission_names:
                          type: array
                          items:
                            type: string
                          description: Human-readable permission names
                          example: ["READ"]
                        restrictions:
                          type: integer
                          description: Field restrictions (1=READ restriction, 2=WRITE restriction)
                          example: 2
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /permissions/user/{user_id}/rows:
    get:
      tags:
        - Permissions
      summary: Get user row permissions
      description: Get all row-level permissions for a specific user
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            pattern: '^usr_[a-f0-9]{16}$'
        - name: object_id
          in: query
          description: Filter by object ID
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: User row permissions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        object_id:
                          type: integer
                          description: Object ID
                          example: 123
                        object_name:
                          type: string
                          description: Object name
                          example: "customer"
                        row_id:
                          type: integer
                          description: Row ID
                          example: 789
                        permissions:
                          type: integer
                          description: Permission bitmask (1=READ, 2=CREATE, 4=UPDATE, 8=DELETE)
                          example: 3
                        permission_names:
                          type: array
                          items:
                            type: string
                          description: Human-readable permission names
                          example: ["READ", "CREATE"]
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Cache Management
  /cache/invalidate/user/{user_id}:
    post:
      tags:
        - Cache
      summary: Invalidate user cache
      description: Invalidate all cached permissions for a specific user
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            pattern: '^usr_[a-f0-9]{16}$'
      responses:
        '200':
          description: User cache invalidated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User cache invalidated successfully"
                  user_id:
                    type: string
                    example: "usr_a1b2c3d4e5f67890"
                  invalidated_at:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /cache/invalidate/group/{group_id}:
    post:
      tags:
        - Cache
      summary: Invalidate group cache
      description: Invalidate all cached permissions for a specific group and its members
      parameters:
        - name: group_id
          in: path
          required: true
          description: Group ID
          schema:
            type: integer
      responses:
        '200':
          description: Group cache invalidated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Group cache invalidated successfully"
                  group_id:
                    type: integer
                    example: 123
                  members_affected:
                    type: integer
                    description: Number of group members whose cache was invalidated
                    example: 15
                  invalidated_at:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /cache/invalidate/object/{object_id}:
    post:
      tags:
        - Cache
      summary: Invalidate object cache
      description: Invalidate all cached permissions for a specific object across all users and groups
      parameters:
        - name: object_id
          in: path
          required: true
          description: Object ID
          schema:
            type: integer
      responses:
        '200':
          description: Object cache invalidated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Object cache invalidated successfully"
                  object_id:
                    type: integer
                    example: 123
                  invalidated_at:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /cache/cleanup:
    post:
      tags:
        - Cache
      summary: Cleanup expired cache
      description: Remove all expired cache entries to free up storage space
      responses:
        '200':
          description: Cache cleanup completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cache cleanup completed successfully"
                  entries_removed:
                    type: integer
                    description: Number of expired cache entries removed
                    example: 1250
                  cleanup_duration_ms:
                    type: integer
                    description: Cleanup operation duration in milliseconds
                    example: 150
                  cleaned_at:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /cache/stats:
    get:
      tags:
        - Cache
      summary: Get cache statistics
      description: Get statistics about cache usage and performance
      parameters:
        - name: tenant_id
          in: query
          description: Filter statistics by tenant ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Cache statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  cache_tables:
                    type: array
                    items:
                      type: object
                      properties:
                        table_name:
                          type: string
                          example: "user_object_permissions"
                        total_records:
                          type: integer
                          example: 10000
                        expired_records:
                          type: integer
                          example: 500
                        active_records:
                          type: integer
                          example: 9500
                        cache_hit_ratio:
                          type: number
                          format: float
                          example: 95.0
                  summary:
                    type: object
                    properties:
                      total_records:
                        type: integer
                        example: 50000
                      total_expired:
                        type: integer
                        example: 2500
                      total_active:
                        type: integer
                        example: 47500
                      overall_hit_ratio:
                        type: number
                        format: float
                        example: 95.0
                  generated_at:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication
    
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for service-to-service authentication

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          pattern: '^usr_[a-f0-9]{16}$'
          description: Human-readable user ID
          example: "usr_a1b2c3d4e5f67890"
        tenant_id:
          type: string
          format: uuid
          description: Tenant identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          maxLength: 255
          description: User's display name
          example: "John Doe"
        email:
          type: string
          format: email
          maxLength: 255
          description: User's email address
          example: "john.doe@company.com"
        external_id:
          type: string
          maxLength: 255
          nullable: true
          description: External system identifier
          example: "ldap_user_123"
        manager_id:
          type: string
          pattern: '^usr_[a-f0-9]{16}$'
          nullable: true
          description: Manager's user ID
          example: "usr_b2c3d4e5f678901"
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00Z"
      required:
        - id
        - tenant_id
        - name
        - email
        - created_at
        - updated_at

    CreateUserRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
          description: User's display name
          example: "John Doe"
        email:
          type: string
          format: email
          maxLength: 255
          description: User's email address
          example: "john.doe@company.com"
        external_id:
          type: string
          maxLength: 255
          nullable: true
          description: External system identifier
          example: "ldap_user_123"
        manager_id:
          type: string
          pattern: '^usr_[a-f0-9]{16}$'
          nullable: true
          description: Manager's user ID
          example: "usr_b2c3d4e5f678901"
      required:
        - name
        - email

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
          description: User's display name
          example: "John Doe"
        email:
          type: string
          format: email
          maxLength: 255
          description: User's email address
          example: "john.doe@company.com"
        external_id:
          type: string
          maxLength: 255
          nullable: true
          description: External system identifier
          example: "ldap_user_123"
        manager_id:
          type: string
          pattern: '^usr_[a-f0-9]{16}$'
          nullable: true
          description: Manager's user ID
          example: "usr_b2c3d4e5f678901"

    Role:
      type: object
      properties:
        id:
          type: integer
          description: Internal role ID
          example: 123
        tenant_id:
          type: string
          format: uuid
          description: Tenant identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        label:
          type: string
          maxLength: 255
          description: Human-readable role name
          example: "Administrator"
        api_name:
          type: string
          maxLength: 60
          pattern: '^[a-zA-Z][a-zA-Z0-9_]{0,59}$'
          description: API-friendly role identifier
          example: "admin"
        external_id:
          type: string
          maxLength: 255
          nullable: true
          description: External system identifier
          example: "ldap_role_admin"
        parent_id:
          type: integer
          nullable: true
          description: Parent role ID
          example: 100
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00Z"
        deleted_at:
          type: string
          format: date-time
          nullable: true
          description: Soft delete timestamp
      required:
        - id
        - tenant_id
        - label
        - api_name
        - created_at
        - updated_at

    CreateRoleRequest:
      type: object
      properties:
        label:
          type: string
          maxLength: 255
          description: Human-readable role name
          example: "Administrator"
        api_name:
          type: string
          maxLength: 60
          pattern: '^[a-zA-Z][a-zA-Z0-9_]{0,59}$'
          description: API-friendly role identifier
          example: "admin"
        external_id:
          type: string
          maxLength: 255
          nullable: true
          description: External system identifier
          example: "ldap_role_admin"
        parent_id:
          type: integer
          nullable: true
          description: Parent role ID
          example: 100
      required:
        - label
        - api_name

    UpdateRoleRequest:
      type: object
      properties:
        label:
          type: string
          maxLength: 255
          description: Human-readable role name
          example: "Administrator"
        api_name:
          type: string
          maxLength: 60
          pattern: '^[a-zA-Z][a-zA-Z0-9_]{0,59}$'
          description: API-friendly role identifier
          example: "admin"
        external_id:
          type: string
          maxLength: 255
          nullable: true
          description: External system identifier
          example: "ldap_role_admin"
        parent_id:
          type: integer
          nullable: true
          description: Parent role ID
          example: 100

    Territory:
      type: object
      properties:
        id:
          type: integer
          description: Internal territory ID
          example: 123
        tenant_id:
          type: string
          format: uuid
          description: Tenant identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        label:
          type: string
          maxLength: 255
          description: Human-readable territory name
          example: "North America"
        api_name:
          type: string
          maxLength: 60
          pattern: '^[a-zA-Z][a-zA-Z0-9_]{0,59}$'
          description: API-friendly territory identifier
          example: "north_america"
        parent_id:
          type: integer
          nullable: true
          description: Parent territory ID
          example: 100
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00Z"
        deleted_at:
          type: string
          format: date-time
          nullable: true
          description: Soft delete timestamp
      required:
        - id
        - tenant_id
        - label
        - api_name
        - created_at
        - updated_at

    CreateTerritoryRequest:
      type: object
      properties:
        label:
          type: string
          maxLength: 255
          description: Human-readable territory name
          example: "North America"
        api_name:
          type: string
          maxLength: 60
          pattern: '^[a-zA-Z][a-zA-Z0-9_]{0,59}$'
          description: API-friendly territory identifier
          example: "north_america"
        parent_id:
          type: integer
          nullable: true
          description: Parent territory ID
          example: 100
      required:
        - label
        - api_name

    UpdateTerritoryRequest:
      type: object
      properties:
        label:
          type: string
          maxLength: 255
          description: Human-readable territory name
          example: "North America"
        api_name:
          type: string
          maxLength: 60
          pattern: '^[a-zA-Z][a-zA-Z0-9_]{0,59}$'
          description: API-friendly territory identifier
          example: "north_america"
        parent_id:
          type: integer
          nullable: true
          description: Parent territory ID
          example: 100

    Group:
      type: object
      properties:
        id:
          type: integer
          description: Internal group ID
          example: 123
        tenant_id:
          type: string
          format: uuid
          description: Tenant identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        label:
          type: string
          maxLength: 255
          description: Human-readable group name
          example: "Administrators"
        api_name:
          type: string
          maxLength: 63
          pattern: '^[a-zA-Z0-9_]{1,63}$'
          description: API-friendly group identifier
          example: "admins"
        type:
          type: string
          enum: [regular, queue, role, role_and_subordinates, territory, territory_and_subordinates]
          description: Group type determining behavior and membership rules
          example: "regular"
        email:
          type: string
          format: email
          nullable: true
          description: Group email address
          example: "admins@company.com"
        related_role_id:
          type: integer
          nullable: true
          description: Related role ID for role-based groups
          example: 100
        related_territory_id:
          type: integer
          nullable: true
          description: Related territory ID for territory-based groups
          example: 200
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00Z"
        deleted_at:
          type: string
          format: date-time
          nullable: true
          description: Soft delete timestamp
      required:
        - id
        - tenant_id
        - label
        - api_name
        - type
        - created_at
        - updated_at

    CreateGroupRequest:
      type: object
      properties:
        label:
          type: string
          maxLength: 255
          description: Human-readable group name
          example: "Administrators"
        api_name:
          type: string
          maxLength: 63
          pattern: '^[a-zA-Z0-9_]{1,63}$'
          description: API-friendly group identifier
          example: "admins"
        type:
          type: string
          enum: [regular, queue, role, role_and_subordinates, territory, territory_and_subordinates]
          description: Group type determining behavior and membership rules
          example: "regular"
        email:
          type: string
          format: email
          nullable: true
          description: Group email address
          example: "admins@company.com"
        related_role_id:
          type: integer
          nullable: true
          description: Related role ID for role-based groups
          example: 100
        related_territory_id:
          type: integer
          nullable: true
          description: Related territory ID for territory-based groups
          example: 200
      required:
        - label
        - api_name
        - type

    UpdateGroupRequest:
      type: object
      properties:
        label:
          type: string
          maxLength: 255
          description: Human-readable group name
          example: "Administrators"
        api_name:
          type: string
          maxLength: 63
          pattern: '^[a-zA-Z0-9_]{1,63}$'
          description: API-friendly group identifier
          example: "admins"
        type:
          type: string
          enum: [regular, queue, role, role_and_subordinates, territory, territory_and_subordinates]
          description: Group type determining behavior and membership rules
          example: "regular"
        email:
          type: string
          format: email
          nullable: true
          description: Group email address
          example: "admins@company.com"
        related_role_id:
          type: integer
          nullable: true
          description: Related role ID for role-based groups
          example: 100
        related_territory_id:
          type: integer
          nullable: true
          description: Related territory ID for territory-based groups
          example: 200

    GroupMember:
      type: object
      properties:
        id:
          type: integer
          description: Internal group member ID
          example: 123
        record_id:
          type: string
          pattern: '^grm_[a-f0-9]{16}$'
          description: Human-readable group member ID
          example: "grm_a1b2c3d4e5f67890"
        tenant_id:
          type: string
          format: uuid
          description: Tenant identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        group_id:
          type: integer
          description: Group ID
          example: 456
        member_user_id:
          type: string
          pattern: '^usr_[a-f0-9]{16}$'
          nullable: true
          description: Member user ID (for user membership)
          example: "usr_b2c3d4e5f678901"
        member_group_id:
          type: integer
          nullable: true
          description: Member group ID (for group membership)
          example: 789
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00Z"
        deleted_at:
          type: string
          format: date-time
          nullable: true
          description: Soft delete timestamp
      required:
        - id
        - record_id
        - tenant_id
        - group_id
        - created_at
        - updated_at

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          description: JWT refresh token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        token_type:
          type: string
          description: Token type
          example: "Bearer"
        expires_in:
          type: integer
          description: Token expiration time in seconds
          example: 3600
        user:
          $ref: '#/components/schemas/User'
      required:
        - access_token
        - refresh_token
        - token_type
        - expires_in
        - user

    Principal:
      type: object
      properties:
        id:
          type: integer
          description: Internal principal ID
          example: 123
        tenant_id:
          type: string
          format: uuid
          description: Tenant identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        kind:
          type: string
          enum: [user, service, external, system]
          description: Type of principal
          example: "user"
        subject_id:
          type: integer
          nullable: true
          description: Reference to subject entity (user ID for user principals)
          example: 456
        login:
          type: string
          description: Login identifier for authentication
          example: "john.doe@company.com"
        is_active:
          type: boolean
          description: Active status flag
          example: true
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00Z"
      required:
        - id
        - tenant_id
        - kind
        - login
        - is_active
        - created_at
        - updated_at

    CreatePrincipalRequest:
      type: object
      properties:
        kind:
          type: string
          enum: [user, service, external, system]
          description: Type of principal
          example: "user"
        subject_id:
          type: integer
          nullable: true
          description: Reference to subject entity (user ID for user principals)
          example: 456
        login:
          type: string
          description: Login identifier for authentication
          example: "john.doe@company.com"
        is_active:
          type: boolean
          description: Active status flag
          example: true
      required:
        - kind
        - login

    UpdatePrincipalRequest:
      type: object
      properties:
        kind:
          type: string
          enum: [user, service, external, system]
          description: Type of principal
          example: "user"
        subject_id:
          type: integer
          nullable: true
          description: Reference to subject entity (user ID for user principals)
          example: 456
        login:
          type: string
          description: Login identifier for authentication
          example: "john.doe@company.com"
        is_active:
          type: boolean
          description: Active status flag
          example: true

    Identity:
      type: object
      properties:
        id:
          type: integer
          description: Internal identity ID
          example: 123
        tenant_id:
          type: string
          format: uuid
          description: Tenant identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        principal_id:
          type: integer
          description: Reference to principal
          example: 456
        kind:
          type: string
          enum: [password, api_key, oauth]
          description: Type of authentication method
          example: "password"
        idp:
          type: string
          description: Identity Provider identifier
          example: "local"
        subject:
          type: string
          description: Subject identifier within the IdP
          example: "john.doe@company.com"
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00Z"
      required:
        - id
        - tenant_id
        - principal_id
        - kind
        - idp
        - subject
        - created_at
        - updated_at

    CreateIdentityRequest:
      type: object
      properties:
        principal_id:
          type: integer
          description: Reference to principal
          example: 456
        kind:
          type: string
          enum: [password, api_key, oauth]
          description: Type of authentication method
          example: "password"
        idp:
          type: string
          description: Identity Provider identifier
          example: "local"
        subject:
          type: string
          description: Subject identifier within the IdP
          example: "john.doe@company.com"
      required:
        - principal_id
        - kind
        - idp
        - subject

    UpdateIdentityRequest:
      type: object
      properties:
        principal_id:
          type: integer
          description: Reference to principal
          example: 456
        kind:
          type: string
          enum: [password, api_key, oauth]
          description: Type of authentication method
          example: "password"
        idp:
          type: string
          description: Identity Provider identifier
          example: "local"
        subject:
          type: string
          description: Subject identifier within the IdP
          example: "john.doe@company.com"

    Pagination:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          description: Current page number
          example: 1
        limit:
          type: integer
          minimum: 1
          maximum: 100
          description: Number of items per page
          example: 20
        total:
          type: integer
          minimum: 0
          description: Total number of items
          example: 150
        pages:
          type: integer
          minimum: 0
          description: Total number of pages
          example: 8
      required:
        - page
        - limit
        - total
        - pages

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error code
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: Human-readable error message
          example: "Invalid input data"
        details:
          type: object
          description: Additional error details
          additionalProperties: true
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
          example: "2024-01-15T10:30:00Z"
        request_id:
          type: string
          description: Request identifier for tracing
          example: "req_abc123def456"
      required:
        - error
        - message
        - timestamp

    # Principal Schemas
    Principal:
      type: object
      properties:
        id:
          type: integer
          description: Principal ID
          example: 123
        tenant_id:
          type: string
          format: uuid
          description: Tenant identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        kind:
          type: string
          enum: [user, service, external, system]
          description: Type of principal
          example: "user"
        subject_id:
          type: integer
          nullable: true
          description: Reference to subject entity (user ID for user principals)
          example: 456
        login:
          type: string
          description: Login identifier
          example: "john.doe@company.com"
        is_active:
          type: boolean
          description: Active status
          example: true
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00Z"
      required:
        - id
        - tenant_id
        - kind
        - login
        - is_active
        - created_at
        - updated_at

    CreatePrincipalRequest:
      type: object
      properties:
        kind:
          type: string
          enum: [user, service, external, system]
          description: Type of principal
          example: "user"
        subject_id:
          type: integer
          nullable: true
          description: Reference to subject entity (user ID for user principals)
          example: 456
        login:
          type: string
          description: Login identifier
          example: "john.doe@company.com"
        is_active:
          type: boolean
          description: Active status
          default: true
          example: true
      required:
        - kind
        - login

    UpdatePrincipalRequest:
      type: object
      properties:
        login:
          type: string
          description: Login identifier
          example: "john.doe@company.com"
        is_active:
          type: boolean
          description: Active status
          example: true

    # Identity Schemas
    Identity:
      type: object
      properties:
        id:
          type: integer
          description: Identity ID
          example: 789
        tenant_id:
          type: string
          format: uuid
          description: Tenant identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        principal_id:
          type: integer
          description: Reference to principal
          example: 456
        kind:
          type: string
          enum: [password, api_key, oauth]
          description: Type of authentication method
          example: "password"
        idp:
          type: string
          description: Identity Provider identifier
          example: "local"
        subject:
          type: string
          description: Subject identifier within the IdP
          example: "john.doe@company.com"
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00Z"
      required:
        - id
        - tenant_id
        - principal_id
        - kind
        - idp
        - subject
        - created_at
        - updated_at

    CreateIdentityRequest:
      type: object
      properties:
        principal_id:
          type: integer
          description: Reference to principal
          example: 456
        kind:
          type: string
          enum: [password, api_key, oauth]
          description: Type of authentication method
          example: "password"
        idp:
          type: string
          description: Identity Provider identifier
          example: "local"
        subject:
          type: string
          description: Subject identifier within the IdP
          example: "john.doe@company.com"
      required:
        - principal_id
        - kind
        - idp
        - subject

    UpdateIdentityRequest:
      type: object
      properties:
        idp:
          type: string
          description: Identity Provider identifier
          example: "local"
        subject:
          type: string
          description: Subject identifier within the IdP
          example: "john.doe@company.com"

    # Security Object Schemas
    SecurityObject:
      type: object
      properties:
        id:
          type: integer
          description: Security object ID
          example: 123
        tenant_id:
          type: string
          format: uuid
          description: Tenant identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        api_name:
          type: string
          description: API-friendly object identifier
          pattern: '^[_a-zA-Z][a-zA-Z0-9_]{0,62}$'
          example: "user"
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00Z"
      required:
        - id
        - tenant_id
        - api_name
        - created_at
        - updated_at

    CreateSecurityObjectRequest:
      type: object
      properties:
        api_name:
          type: string
          description: API-friendly object identifier
          pattern: '^[_a-zA-Z][a-zA-Z0-9_]{0,62}$'
          example: "user"
      required:
        - api_name

    UpdateSecurityObjectRequest:
      type: object
      properties:
        api_name:
          type: string
          description: API-friendly object identifier
          pattern: '^[_a-zA-Z][a-zA-Z0-9_]{0,62}$'
          example: "user"

    # Security Field Schemas
    SecurityField:
      type: object
      properties:
        id:
          type: integer
          description: Security field ID
          example: 456
        tenant_id:
          type: string
          format: uuid
          description: Tenant identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        object_id:
          type: integer
          description: Reference to security object
          example: 123
        api_name:
          type: string
          description: API-friendly field identifier
          pattern: '^[_a-zA-Z][a-zA-Z0-9_]{0,62}$'
          example: "email"
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00Z"
      required:
        - id
        - tenant_id
        - object_id
        - api_name
        - created_at
        - updated_at

    CreateSecurityFieldRequest:
      type: object
      properties:
        api_name:
          type: string
          description: API-friendly field identifier
          pattern: '^[_a-zA-Z][a-zA-Z0-9_]{0,62}$'
          example: "email"
      required:
        - api_name

    UpdateSecurityFieldRequest:
      type: object
      properties:
        api_name:
          type: string
          description: API-friendly field identifier
          pattern: '^[_a-zA-Z][a-zA-Z0-9_]{0,62}$'
          example: "email"

    # Permission Set Schemas
    PermissionSet:
      type: object
      properties:
        id:
          type: integer
          description: Permission set ID
          example: 789
        tenant_id:
          type: string
          format: uuid
          description: Tenant identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        api_name:
          type: string
          description: API-friendly permission set identifier
          pattern: '^[_a-zA-Z][a-zA-Z0-9_]{0,62}$'
          example: "admin_permissions"
        label:
          type: string
          description: Human-readable label
          example: "Administrator Permissions"
        description:
          type: string
          nullable: true
          description: Description of the permission set
          example: "Full administrative access to all resources"
        is_deleted:
          type: boolean
          description: Soft delete flag
          example: false
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00Z"
        deleted_at:
          type: string
          format: date-time
          nullable: true
          description: Deletion timestamp (for soft deletes)
          example: null
      required:
        - id
        - tenant_id
        - api_name
        - label
        - is_deleted
        - created_at
        - updated_at

    CreatePermissionSetRequest:
      type: object
      properties:
        api_name:
          type: string
          description: API-friendly permission set identifier
          pattern: '^[_a-zA-Z][a-zA-Z0-9_]{0,62}$'
          example: "admin_permissions"
        label:
          type: string
          description: Human-readable label
          example: "Administrator Permissions"
        description:
          type: string
          nullable: true
          description: Description of the permission set
          example: "Full administrative access to all resources"
      required:
        - api_name
        - label

    UpdatePermissionSetRequest:
      type: object
      properties:
        api_name:
          type: string
          description: API-friendly permission set identifier
          pattern: '^[_a-zA-Z][a-zA-Z0-9_]{0,62}$'
          example: "admin_permissions"
        label:
          type: string
          description: Human-readable label
          example: "Administrator Permissions"
        description:
          type: string
          nullable: true
          description: Description of the permission set
          example: "Full administrative access to all resources"

    # Object Permission Schemas
    ObjectPermission:
      type: object
      properties:
        id:
          type: integer
          description: Object permission ID
          example: 123
        tenant_id:
          type: string
          format: uuid
          description: Tenant identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        permission_set_id:
          type: integer
          description: Reference to permission set
          example: 789
        object_id:
          type: integer
          description: Reference to security object
          example: 456
        permissions:
          type: integer
          description: Permission bitmask (CRUD operations)
          example: 15
        permissions_detail:
          type: object
          description: Detailed permission breakdown
          properties:
            create:
              type: boolean
              example: true
            read:
              type: boolean
              example: true
            update:
              type: boolean
              example: true
            delete:
              type: boolean
              example: true
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00Z"
      required:
        - id
        - tenant_id
        - permission_set_id
        - object_id
        - permissions
        - created_at
        - updated_at

    CreateObjectPermissionRequest:
      type: object
      properties:
        object_id:
          type: integer
          description: Reference to security object
          example: 456
        permissions:
          type: integer
          description: Permission bitmask (CRUD operations)
          example: 15
        permissions_detail:
          type: object
          description: Detailed permission breakdown (alternative to bitmask)
          properties:
            create:
              type: boolean
              example: true
            read:
              type: boolean
              example: true
            update:
              type: boolean
              example: true
            delete:
              type: boolean
              example: true
      required:
        - object_id
      anyOf:
        - required: [permissions]
        - required: [permissions_detail]

    UpdateObjectPermissionRequest:
      type: object
      properties:
        permissions:
          type: integer
          description: Permission bitmask (CRUD operations)
          example: 15
        permissions_detail:
          type: object
          description: Detailed permission breakdown (alternative to bitmask)
          properties:
            create:
              type: boolean
              example: true
            read:
              type: boolean
              example: true
            update:
              type: boolean
              example: true
            delete:
              type: boolean
              example: true
      anyOf:
        - required: [permissions]
        - required: [permissions_detail]

    # Field Permission Schemas
    FieldPermission:
      type: object
      properties:
        id:
          type: integer
          description: Field permission ID
          example: 234
        tenant_id:
          type: string
          format: uuid
          description: Tenant identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        permission_set_id:
          type: integer
          description: Reference to permission set
          example: 789
        field_id:
          type: integer
          description: Reference to security field
          example: 456
        permissions:
          type: integer
          description: Permission bitmask (read/write access)
          example: 3
        permissions_detail:
          type: object
          description: Detailed permission breakdown
          properties:
            read:
              type: boolean
              example: true
            write:
              type: boolean
              example: true
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00Z"
      required:
        - id
        - tenant_id
        - permission_set_id
        - field_id
        - permissions
        - created_at
        - updated_at

    CreateFieldPermissionRequest:
      type: object
      properties:
        field_id:
          type: integer
          description: Reference to security field
          example: 456
        permissions:
          type: integer
          description: Permission bitmask (read/write access)
          example: 3
        permissions_detail:
          type: object
          description: Detailed permission breakdown (alternative to bitmask)
          properties:
            read:
              type: boolean
              example: true
            write:
              type: boolean
              example: true
      required:
        - field_id
      anyOf:
        - required: [permissions]
        - required: [permissions_detail]

    UpdateFieldPermissionRequest:
      type: object
      properties:
        permissions:
          type: integer
          description: Permission bitmask (read/write access)
          example: 3
        permissions_detail:
          type: object
          description: Detailed permission breakdown (alternative to bitmask)
          properties:
            read:
              type: boolean
              example: true
            write:
              type: boolean
              example: true
      anyOf:
        - required: [permissions]
        - required: [permissions_detail]

  responses:
    BadRequest:
      description: Bad request - invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "VALIDATION_ERROR"
            message: "Invalid input data"
            details:
              field: "email"
              reason: "Invalid email format"
            timestamp: "2024-01-15T10:30:00Z"
            request_id: "req_abc123def456"

    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "UNAUTHORIZED"
            message: "Authentication required"
            timestamp: "2024-01-15T10:30:00Z"
            request_id: "req_abc123def456"

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "FORBIDDEN"
            message: "Insufficient permissions"
            timestamp: "2024-01-15T10:30:00Z"
            request_id: "req_abc123def456"

    NotFound:
      description: Not found - resource does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "NOT_FOUND"
            message: "Resource not found"
            timestamp: "2024-01-15T10:30:00Z"
            request_id: "req_abc123def456"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "INTERNAL_ERROR"
            message: "An internal error occurred"
            timestamp: "2024-01-15T10:30:00Z"
            request_id: "req_abc123def456"

tags:
  - name: Users
    description: User management operations
  - name: Roles
    description: Role management operations
  - name: Territories
    description: Territory management operations
  - name: Groups
    description: Group management operations
  - name: Group Members
    description: Group membership management operations
  - name: Principals
    description: Principal management operations
  - name: Identities
    description: Identity management operations
  - name: Security Objects
    description: Security object management operations
  - name: Security Fields
    description: Security field management operations
  - name: Permission Sets
    description: Permission set management operations
  - name: Object Permissions
    description: Object permission management operations
  - name: Field Permissions
    description: Field permission management operations
  - name: Authentication
    description: Authentication and authorization operations
  - name: Permissions
    description: Permission checking operations
  - name: Cache
    description: Cache management operations
